#
# This mixin provides helpers to perform SQL injection
# - provides a level of abstraction for common queries, for example, querying the table names
# - implements blind and time-based SQL injection in a reusable manner
# - Highly extendable (user can run any code to perform the requests, encode payloads and parse results)
#
module Msf::Exploit::SQLi
  #
  # This class represents any SQL injection object (an ancestor of any DBMS-specific SQL Injection class)
  # You cannot instanciate it directly
  #
  class SQLi
    #
    #   Creates an instance of an SQL Injection object, instantiate directly only if you don't know the DBMS in use
    #
    #   @param opts [Hash] a dictionnary containing the parameters needed
    #   @option opts [String] prefix :  [Required] the string to prepend to each injection payload, can be "' " for example
    #   @option opts [String] suffix :  [Required] the string to append to each injection payload, can be "#" for example
    #   @option opts [Integer] truncation_length :  [Optional] The number of characters returned, if the query result is truncated
    #   @option opts [String] concat_separator : [Optional] The separator to use with group_concat (default ',')
    #   @option opts [String] second_concat_separator : [Optional] The separator to use with concat_ws (default ';')
    #   @option opts [Boolean] safe : don't use group_concat, safer for large tables, but more queries will be performed
    #   @param query_proc is a block that will receive the payload, and should send the request to the target,
    #   - if it's a regular SQL injection, it should return the part of the response that is the query result (one row)
    #   - if it's a boolean-based blind SQL injection, it should return `true`, `false`, or a value that evaluates to one of them
    #   `true` if the query returned a result, false otherwise
    #   - if it's a time-based blind SQL injection, the return value does not matter, the time the block takes to run does.
    #
    def initialize(opts, &query_proc)
      raise ArgumentError, 'Missing the bloc that does the requests' unless block_given?

      check_opts(opts)
      @query_proc = query_proc
      @prefix = opts[:prefix]
      @suffix = opts[:suffix]
      @safe = opts[:safe]
      @concat_separator = opts[:concat_separator]
      @second_concat_separator = opts[:second_concat_separator]
      @truncation_length = opts[:truncation_length] if opts[:truncation_length] && opts[:truncation_length].is_a?(Integer) && opts[:truncation_length] > 0
    end

    #
    #   Queries the bloc with the given SQL query, and returns the result (this method is used in regular
    #   SQL injection exploits, where the query results are returned in the response to the user
    #   @param query [String] The SQL query to execute
    #   @return [String] The query results
    #
    def run_sql(query)
      @query_proc.call(@prefix + query + @suffix)
    end

    private

    def check_opts(opts)
      required_opts = %i[prefix suffix]
      missing_opt = required_opts.detect { |opt| !opts[opt] }
      raise ArgumentError, "missing option #{missing_opt}" if missing_opt
    end
  end
end

require 'msf/core/exploit/sqli/mysqli'
