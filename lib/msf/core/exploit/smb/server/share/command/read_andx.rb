# -*- coding: binary -*-

module Msf
  module Exploit::Remote::SMB::Server
    module Share
      module Command
        module ReadAndx
          #
          # Responds to a client READ_ANDX request
          # This function sends chunks of the payload to the client
          # by reading the offset and length requested by the client
          # and sending the appropriate chunk of the payload
          #
          def smb_cmd_read(c, buff)
            dprint("[SMB_CMD_READ]")
            pkt = CONST::SMB_READ_PKT.make_struct
            pkt.from_s(buff)

            offset = pkt['Payload'].v['Offset']
            length = pkt['Payload'].v['MaxCountLow']

            pkt = CONST::SMB_READ_RES_PKT.make_struct
            smb_set_defaults(c, pkt)

            pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_READ_ANDX
            pkt['Payload']['SMB'].v['Flags1'] = FLAGS
            pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
            pkt['Payload']['SMB'].v['WordCount'] = 12
            pkt['Payload'].v['AndX'] = 0xff # no more commands
            pkt['Payload'].v['Remaining'] = 0xffff
            pkt['Payload'].v['DataLenLow'] = length
            pkt['Payload'].v['DataOffset'] = 59
            pkt['Payload'].v['DataLenHigh'] = 0
            pkt['Payload'].v['Reserved3'] = 0
            pkt['Payload'].v['Reserved4'] = 0x0a
            pkt['Payload'].v['ByteCount'] = length
            pkt['Payload'].v['Payload'] = exe_contents[offset, length]
            c.put(pkt.to_s)
          end
        end
      end
    end
  end
end
