# -*- coding: binary -*-

module Msf
  module Exploit::Remote::SMB::Server
    module Share
      module Command
        module Trans2
          # This mixin provides methods to handle TRAN2_QUERY_PATH_INFORMATION subcommands
          module QueryPathInformation

            def smb_cmd_trans2_query_path_information(c, buff)
              params = CONST::SMB_QUERY_PATH_TRANS2_PARAMETERS.make_struct
              params.from_s(buff)

              loi = params.v['InformationLevel']
              file_name = params.v['FileName']
              file_name.gsub!(/[\x00]*$/, '') #delete padding

              case loi
              when CONST::SMB_QUERY_FILE_BASIC_INFO, CONST::SMB_QUERY_FILE_BASIC_INFO_ALIAS, CONST::SMB_SET_FILE_BASIC_INFO_ALIAS
                smb_cmd_trans_query_path_info_basic(c, file_name)
              when CONST::SMB_QUERY_FILE_STANDARD_INFO, CONST::SMB_QUERY_FILE_STANDARD_INFO_ALIAS
                smb_cmd_trans_query_path_info_standard(c, file_name)
              #when CONST::SMB_QUERY_FILE_NETWORK_OPEN_INFO
                #dprint("\t\t[smb_cmd_trans_query_path_info_network]")
                #smb_cmd_trans_query_file_info_network(c, buff)
              else
                dprint("\t\tUnknown LOI [smb_cmd_trans2_query_path_information] - #{loi.to_s}")
                # SEND success with the hope of going ahead...
                smb_error(CONST::SMB_COM_TRANSACTION2, c, CONST::SMB_STATUS_SUCCESS)
              end
            end
          end
        end
      end
    end
  end
end
