# -*- coding: binary -*-

module Msf
  module Exploit::Remote::SMB::Server
    module Share
      module Command
        module Trans2
          require 'msf/core/exploit/smb/server/share/command/trans2/find_first2'
          require 'msf/core/exploit/smb/server/share/command/trans2/query_file_information'
          require 'msf/core/exploit/smb/server/share/command/trans2/query_path_information'

          #
          # Responds to client TRANSACTION2 requests and dispatches the request off to
          # other functions dependent on what the sub_command is. Commands supported
          # include:
          #  QUERY_FILE_INFO (Basic, Standard and Internal)
          #  QUERY_PATH_INFO (Basic and Standard)
          #
          def smb_cmd_trans(c, buff)
            dprint("[SMB_CMD_TRANS]")
            # Client socket is c
            pkt = CONST::SMB_TRANS2_PKT.make_struct
            pkt.from_s(buff)

            sub_command = pkt['Payload'].v['SetupData'].unpack("v").first

            case sub_command
            when CONST::TRANS2_QUERY_FILE_INFO
              smb_cmd_trans2_query_file_information(c, buff)
            when CONST::TRANS2_QUERY_PATH_INFO
              smb_cmd_trans2_query_path_information(c, buff)
            when CONST::TRANS2_FIND_FIRST2
              smb_cmd_trans2_find_first2(c, buff)
            else
              dprint("\t[Unsupported/Unknown command]")
              pkt = CONST::SMB_TRANS_RES_PKT.make_struct
              smb_set_defaults(c, pkt)
              pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_TRANSACTION2
              pkt['Payload']['SMB'].v['Flags1'] = 0x88
              pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
              pkt['Payload']['SMB'].v['ErrorClass'] = 0xc0000225 # NT_STATUS_NOT_FOUND
              c.put(pkt.to_s)
            end
          end

        end
      end
    end
  end
end
