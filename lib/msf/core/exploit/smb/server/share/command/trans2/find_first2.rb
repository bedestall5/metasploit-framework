# -*- coding: binary -*-

module Msf
  module Exploit::Remote::SMB::Server
    module Share
      module Command
        module Trans2
          # This mixin provides methods to handle TRAN2_FIND_FIRST2 subcommands
          module FindFirst2
            def smb_cmd_trans2_find_first2(c, buff)
              dprint("[smb_cmd_trans2_find_first2]")

              ar = Rex::Text.to_hex(buff, '').to_s
              loi = ar[156..159].unpack('n*').reverse.pack('n*').to_i(16)
=begin
            # OLD DISPATCHING
              case loi
              when CONST::SMB_FIND_FILE_NAMES_INFO
                smb_cmd_find_file_names_info(c, buff)
              when CONST::SMB_FIND_FILE_BOTH_DIRECTORY_INFO
                smb_cmd_find_file_both_directory_info(c, buff)
              when CONST::SMB_FIND_FILE_FULL_DIRECTORY_INFO
                smb_cmd_find_file_full_directory_info(c, buff)
              else
                smb_cmd_find_file_both_directory_info(c, buff)
              end
=end
              case loi
              when CONST::SMB_FIND_FILE_NAMES_INFO
                #dprint("\t[SMB_FIND_FILE_NAMES_INFO]")
                smb_cmd_find_file_names_info(c, buff)
              when CONST::SMB_FIND_FILE_BOTH_DIRECTORY_INFO
                #dprint("\t[SMB_FIND_FILE_BOTH_DIRECTORY_INFO]")
                smb_cmd_find_file_both_directory_info(c, buff)
              when CONST::SMB_FIND_FILE_FULL_DIRECTORY_INFO
                #dprint("\t[SMB_FIND_FILE_FULL_DIRECTORY_INFO]")
                smb_cmd_find_file_full_directory_info(c, buff)
              else
                dprint("\t\tUnknown LOI [smb_cmd_trans2_find_first2] - #{loi}")
                # SEND success with the hope of going ahead...
                smb_error(CONST::SMB_COM_TRANSACTION2, c, CONST::SMB_STATUS_SUCCESS)
              end
            end
          end
        end
      end
    end
  end
end
