# -*- coding: binary -*-

module Msf
  module Exploit::Remote::SMB::Server
    module Share
      module Command
        module SessionSetupAndx
          #
          # Sets up an SMB session in response to a SESSION_SETUP_ANDX request
          #
          def smb_cmd_session_setup(c, buff)
            tree_connect_response = CONST::SMB_TREE_CONN_ANDX_RES_PKT.make_struct
            tree_connect_response.v['WordCount'] = 7
            tree_connect_response.v['AndXCommand'] = CONST::SMB_COM_NO_ANDX_COMMAND
            tree_connect_response.v['AndXReserved'] = 0
            tree_connect_response.v['AndXOffset'] = 0
            tree_connect_response.v['OptionalSupport'] = 1
            tree_connect_response.v['AccessRights'] = 0x1200a9
            tree_connect_response.v['GuestAccessRights'] = 0
            tree_connect_response.v['Payload'] = "A:\x00#{Rex::Text.to_unicode('NTFS')}\x00\x00"

            pkt = CONST::SMB_SETUP_RES_PKT.make_struct
            smb_set_defaults(c, pkt)

            pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_SESSION_SETUP_ANDX
            pkt['Payload']['SMB'].v['Flags1'] = FLAGS
            pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
            pkt['Payload']['SMB'].v['WordCount'] = 3
            pkt['Payload'].v['AndX'] = CONST::SMB_COM_TREE_CONNECT_ANDX
            pkt['Payload'].v['Reserved1'] = 00
            pkt['Payload'].v['AndXOffset'] = 96
            pkt['Payload'].v['Action'] = CONST::SMB_SETUP_GUEST
            pkt['Payload'].v['Payload'] =
              Rex::Text.to_unicode('Unix', 'utf-16be') + "\x00\x00" + # Native OS # Samba signature
              Rex::Text.to_unicode('Samba 3.4.7', 'utf-16be') + "\x00\x00" + # Native LAN Manager # Samba signature
              Rex::Text.to_unicode('WORKGROUP', 'utf-16be') + "\x00\x00\x00" # Primary DOMAIN # Samba signature

            full_pkt = pkt.to_s + tree_connect_response.to_s
            original_length = full_pkt[2, 2].unpack('n')[0]
            original_length = original_length +  tree_connect_response.to_s.length
            full_pkt[2, 2] = [original_length].pack('n')

            c.put(full_pkt)
          end
        end
      end
    end
  end
end
