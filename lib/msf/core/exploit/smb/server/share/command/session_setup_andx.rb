# -*- coding: binary -*-

module Msf
  module Exploit::Remote::SMB::Server
    module Share
      module Command
        module SessionSetupAndx
          #
          # Sets up an SMB session in response to a SESSION_SETUP_ANDX request
          #
          def smb_cmd_session_setup(c, buff)
            dprint("[SMB_CMD_SESSION_SETUP]")
            pkt = CONST::SMB_SETUP_RES_PKT.make_struct
            smb_set_defaults(c, pkt)

            pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_SESSION_SETUP_ANDX
            pkt['Payload']['SMB'].v['Flags1'] = 0x88
            pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
            pkt['Payload']['SMB'].v['WordCount'] = 3
            pkt['Payload'].v['AndX'] = 0x75
            pkt['Payload'].v['Reserved1'] = 00
            pkt['Payload'].v['AndXOffset'] = 96
            pkt['Payload'].v['Action'] = 0x1 # Logged in as Guest
            pkt['Payload'].v['Payload'] =
                Rex::Text.to_unicode("Unix", 'utf-16be') + "\x00\x00" + # Native OS # Samba signature
                    Rex::Text.to_unicode("Samba 3.4.7", 'utf-16be') + "\x00\x00" + # Native LAN Manager # Samba signature
                    Rex::Text.to_unicode("WORKGROUP", 'utf-16be') + "\x00\x00\x00" + # Primary DOMAIN # Samba signature
                    tree_connect_response = ""
            tree_connect_response << [7].pack("C")  # Tree Connect Response : WordCount
            tree_connect_response << [0xff].pack("C") # Tree Connect Response : AndXCommand
            tree_connect_response << [0].pack("C") # Tree Connect Response : Reserved
            tree_connect_response << [0].pack("v")  # Tree Connect Response : AndXOffset
            tree_connect_response << [0x1].pack("v")  # Tree Connect Response : Optional Support
            tree_connect_response << [0xa9].pack("C") # Access Mask for just Read and Exec
            tree_connect_response << [0x00].pack("C")
            tree_connect_response << [0x12].pack("C")
            tree_connect_response << [0x00].pack("C")
            tree_connect_response << [0].pack("v") # Tree Connect Response : Word Parameter
            tree_connect_response << [0].pack("v") # Tree Connect Response : Word Parameter
            tree_connect_response << [13].pack("v") # Tree Connect Response : ByteCount
            tree_connect_response << "A:\x00" # Service
            tree_connect_response << "#{Rex::Text.to_unicode("NTFS")}\x00\x00" # Extra byte parameters
            # Fix the Netbios Session Service Message Length
            # to have into account the tree_connect_response,
            # need to do this because there isn't support for
            # AndX still
            my_pkt = pkt.to_s + tree_connect_response
            original_length = my_pkt[2, 2].unpack("n").first
            original_length = original_length +  tree_connect_response.length
            my_pkt[2, 2] = [original_length].pack("n")
            c.put(my_pkt)
          end
        end
      end
    end
  end
end
