# -*- coding: binary -*-

module Msf
  module Exploit::Remote::SMB::Server
    module Share
      module Command
        module NtCreateAndx
          #
          # Responds to a client NT_CREATE_ANDX request
          #
          def smb_cmd_create(c, buff)
            dprint("[SMB_CMD_CREATE]")
            smb = @state[c]
            pkt = CONST::SMB_CREATE_PKT.make_struct
            pkt.from_s(buff)

            payload = (pkt['Payload'].v['Payload'])
            payload.gsub!(/^[\x00]*/, '') # delete padding
            payload = Rex::Text.to_ascii(payload)
            payload.gsub!(/[\x00]*$/, '') # delete padding

            if payload.nil? || payload.empty?
              payload = file_name
            end

            if payload.ends_with?(file_name)
              fid = smb[:file_id].to_i
              attribs = 0x80 # File Attributes
              eof = exe_contents.length
              is_dir = 0
            elsif payload == path_name
              fid = smb[:dir_id].to_i
              attribs = 0x10 # Ordinary Dir
              eof = 0
              is_dir = 1
            else
              # Otherwise send not found
              pkt = CONST::SMB_CREATE_RES_PKT.make_struct
              smb_set_defaults(c, pkt)
              pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_NT_CREATE_ANDX
              pkt['Payload']['SMB'].v['ErrorClass'] = 0xC0000034 # OBJECT_NAME_NOT_FOUND
              pkt['Payload']['SMB'].v['Flags1'] = 0x88
              pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
              c.put(pkt.to_s)
              return
            end

            pkt = CONST::SMB_CREATE_RES_PKT.make_struct
            smb_set_defaults(c, pkt)
            pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_NT_CREATE_ANDX
            pkt['Payload']['SMB'].v['Flags1'] = 0x88
            pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
            pkt['Payload']['SMB'].v['WordCount'] = 42
            pkt['Payload'].v['AndX'] = 0xff # no further commands
            pkt['Payload'].v['OpLock'] = 0x3 # Grant Oplock on File
            pkt['Payload'].v['FileID'] = fid
            pkt['Payload'].v['Action'] = 0x1 # The file existed and was opened
            pkt['Payload'].v['CreateTimeLow'] = lo
            pkt['Payload'].v['CreateTimeHigh'] = hi
            pkt['Payload'].v['AccessTimeLow'] = lo
            pkt['Payload'].v['AccessTimeHigh'] = hi
            pkt['Payload'].v['WriteTimeLow'] = lo
            pkt['Payload'].v['WriteTimeHigh'] = hi
            pkt['Payload'].v['ChangeTimeLow'] = lo
            pkt['Payload'].v['ChangeTimeHigh'] = hi
            pkt['Payload'].v['Attributes'] = attribs
            pkt['Payload'].v['AllocLow'] = 0x100000
            pkt['Payload'].v['AllocHigh'] = 0
            pkt['Payload'].v['EOFLow'] = eof
            pkt['Payload'].v['EOFHigh'] = 0
            pkt['Payload'].v['FileType'] = 0
            pkt['Payload'].v['IPCState'] = 0x7
            pkt['Payload'].v['IsDirectory'] = is_dir

            connect_response = ""
            # GUID
            connect_response << ([0].pack("C") * 16)
            # File ID
            connect_response << ([0].pack("C") * 6)
            # Access Rights
            connect_response << [0xff].pack("C")
            connect_response << [0x01].pack("C")
            connect_response << [0x1f].pack("C")
            connect_response << [0].pack("C")
            connect_response << ([0].pack("C") * 4) # Guest access
            connect_response << ([0].pack("C") * 2) # Byte Count

            my_pkt = pkt.to_s + connect_response
            original_length = my_pkt[2, 2].unpack("n").first
            original_length = original_length + connect_response.length
            my_pkt[2, 2] = [original_length].pack("n")
            c.put(my_pkt)
          end
        end
      end
    end
  end
end
