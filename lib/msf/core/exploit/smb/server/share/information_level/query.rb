# -*- coding: binary -*-

module Msf
  module Exploit::Remote::SMB::Server
    module Share
      module InformationLevel
        # This mixin provides methods to handle TRAN2_QUERY_PATH_INFORMATION subcommands
        module Query

          #
          # Responds to QUERY_PATH_INFO (Basic) requests
          #
          def smb_cmd_trans_query_file_info_basic(c, fid)
            smb = @state[c]

            if fid.eql?smb[:file_id].to_i
              attrib = CONST::SMB_EXT_FILE_ATTR_NORMAL # File attributes => file
            elsif fid.nil? || fid.empty? || fid == "\x00" # empty path
              # QUERY_PATH_INFO_PARAMETERS doesn't include a file name, return a Directory answer
              attrib = CONST::SMB_EXT_FILE_ATTR_DIRECTORY # File attributes => directory
            else
              smb_error(CONST::SMB_COM_TRANSACTION2, c, CONST::SMB_STATUS_OBJECT_NAME_NOT_FOUND, true)
              return
            end

            pkt = CONST::SMB_TRANS_RES_PKT.make_struct
            smb_set_defaults(c, pkt)

            trans2_params = CONST::SMB_TRANS2_QUERY_PATH_INFORMATION_RES_PARAMETERS.make_struct
            trans2_params.v['EaErrorOffset'] = 0

            query_path_info = CONST::SMB_QUERY_FILE_BASIC_INFO_HDR.make_struct
            query_path_info.v['loCreationTime'] = lo
            query_path_info.v['hiCreationTime'] = hi
            query_path_info.v['loLastAccessTime'] = lo
            query_path_info.v['hiLastAccessTime'] = hi
            query_path_info.v['loLastWriteTime'] = lo
            query_path_info.v['hiLastWriteTime'] = hi
            query_path_info.v['loLastChangeTime'] = lo
            query_path_info.v['hiLastChangeTime'] = hi
            query_path_info.v['ExtFileAttributes'] = attrib

            pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_TRANSACTION2
            pkt['Payload']['SMB'].v['Flags1'] = FLAGS
            pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
            pkt['Payload']['SMB'].v['WordCount'] = 10
            pkt['Payload'].v['ParamCountTotal'] = trans2_params.to_s.length
            pkt['Payload'].v['DataCountTotal'] = query_path_info.to_s.length
            pkt['Payload'].v['ParamCount'] = trans2_params.to_s.length
            pkt['Payload'].v['ParamOffset'] = CONST::SMB_TRANS_RES_PKT_LENGTH
            pkt['Payload'].v['DataCount'] = query_path_info.to_s.length
            pkt['Payload'].v['DataOffset'] = CONST::SMB_TRANS_RES_PKT_LENGTH + trans2_params.to_s.length + UNICODE_NULL_LENGTH
            pkt['Payload'].v['Payload'] =
              "\x00" + # Padding
              trans2_params.to_s +
              "\x00\x00" + # Padding
              query_path_info.to_s

            c.put(pkt.to_s)
          end

          # shortcut, we only have one file....
          def smb_cmd_trans_query_file_info_standard(c, buff)
            trans2_params = CONST::SMB_TRANS2_QUERY_PATH_INFORMATION_RES_PARAMETERS.make_struct
            trans2_params.v['EaErrorOffset'] = 0

            query_path_info = CONST::SMB_QUERY_FILE_STANDARD_INFO_HDR.make_struct
            query_path_info.v['AllocationSize'] = 1048576
            query_path_info.v['EndOfFile'] = exe_contents.length
            query_path_info.v['NumberOfLinks'] = 1
            query_path_info.v['DeletePending'] = 0
            query_path_info.v['Directory'] = 0

            pkt = CONST::SMB_TRANS_RES_PKT.make_struct
            smb_set_defaults(c, pkt)

            pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_TRANSACTION2
            pkt['Payload']['SMB'].v['Flags1'] = FLAGS
            pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
            pkt['Payload']['SMB'].v['WordCount'] = 10
            pkt['Payload'].v['ParamCountTotal'] = trans2_params.to_s.length
            pkt['Payload'].v['DataCountTotal'] = query_path_info.to_s.length + UNICODE_NULL_LENGTH
            pkt['Payload'].v['ParamCount'] = trans2_params.to_s.length
            pkt['Payload'].v['ParamOffset'] = CONST::SMB_TRANS_RES_PKT_LENGTH
            pkt['Payload'].v['DataCount'] = query_path_info.to_s.length + UNICODE_NULL_LENGTH
            pkt['Payload'].v['DataOffset'] = CONST::SMB_TRANS_RES_PKT_LENGTH + trans2_params.to_s.length + UNICODE_NULL_LENGTH
            pkt['Payload'].v['Payload'] =
              "\x00" + # Padding
              trans2_params.to_s +
              "\x00\x00" + # Padding
              query_path_info.to_s +
              "\x00\x00" # Unknown

            c.put(pkt.to_s)
          end

          #
          # Responds to QUERY_PATH_INFO (Basic) requests
          #
          def smb_cmd_trans_query_path_info_basic(c, path)
            if path && path.ends_with?(file_name) #TODO: do it better
              attrib = CONST::SMB_EXT_FILE_ATTR_NORMAL
            elsif path && path.ends_with?(file_name + '.Local')
              attrib = CONST::SMB_EXT_FILE_ATTR_NORMAL
            elsif path && path == path_name
              attrib = CONST::SMB_EXT_FILE_ATTR_DIRECTORY
            elsif path.nil? || path.empty? || path == "\x00" # empty path
              attrib = CONST::SMB_EXT_FILE_ATTR_DIRECTORY
            else
              smb_error(CONST::SMB_COM_TRANSACTION2, c, CONST::SMB_STATUS_OBJECT_NAME_NOT_FOUND, true)
              return
            end

            pkt = CONST::SMB_TRANS_RES_PKT.make_struct
            smb_set_defaults(c, pkt)

            trans2_params = CONST::SMB_TRANS2_QUERY_PATH_INFORMATION_RES_PARAMETERS.make_struct
            trans2_params.v['EaErrorOffset'] = 0

            query_path_info = CONST::SMB_QUERY_FILE_BASIC_INFO_HDR.make_struct
            query_path_info.v['loCreationTime'] = lo
            query_path_info.v['hiCreationTime'] = hi
            query_path_info.v['loLastAccessTime'] = lo
            query_path_info.v['hiLastAccessTime'] = hi
            query_path_info.v['loLastWriteTime'] = lo
            query_path_info.v['hiLastWriteTime'] = hi
            query_path_info.v['loLastChangeTime'] = lo
            query_path_info.v['hiLastChangeTime'] = hi
            query_path_info.v['ExtFileAttributes'] = attrib

            pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_TRANSACTION2
            pkt['Payload']['SMB'].v['Flags1'] = FLAGS
            pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
            pkt['Payload']['SMB'].v['WordCount'] = 10
            pkt['Payload'].v['ParamCountTotal'] = trans2_params.to_s.length
            pkt['Payload'].v['DataCountTotal'] = query_path_info.to_s.length
            pkt['Payload'].v['ParamCount'] = trans2_params.to_s.length
            pkt['Payload'].v['ParamOffset'] = CONST::SMB_TRANS_RES_PKT_LENGTH
            pkt['Payload'].v['DataCount'] = query_path_info.to_s.length
            pkt['Payload'].v['DataOffset'] = CONST::SMB_TRANS_RES_PKT_LENGTH + trans2_params.to_s.length + UNICODE_NULL_LENGTH
            pkt['Payload'].v['Payload'] =
              "\x00" + # Padding
              trans2_params.to_s +
              "\x00\x00" + # Padding
              query_path_info.to_s

            c.put(pkt.to_s)
          end

          #
          # Responds to QUERY_PATH_INFO (Standard) requests
          #
          # At the moment we just support '\\' path always send a SUCCESS...
          def smb_cmd_trans_query_path_info_standard(c, path)

            puts "[smb_cmd_trans_query_path_info_standard] #{path}"

            if path && path.include?(file_name) #TODO: do it better
              attrib = 0 # File attributes => file
            elsif path && path == path_name
              attrib = 1 # File attributes => directory
            elsif path.nil? || path.empty? || path == "\x00" # empty path
              attrib = 1 # File attributes => directory
            else
              smb_error(CONST::SMB_COM_TRANSACTION2, c, CONST::SMB_STATUS_OBJECT_NAME_NOT_FOUND, true)
              return
            end

            pkt = CONST::SMB_TRANS_RES_PKT.make_struct
            smb_set_defaults(c, pkt)

            trans2_params = CONST::SMB_TRANS2_QUERY_PATH_INFORMATION_RES_PARAMETERS.make_struct
            trans2_params.v['EaErrorOffset'] = 0

            query_path_info = CONST::SMB_QUERY_FILE_STANDARD_INFO_HDR.make_struct
            query_path_info.v['AllocationSize'] = 1048576
            query_path_info.v['EndOfFile'] = exe_contents.length
            query_path_info.v['NumberOfLinks'] = 1
            query_path_info.v['DeletePending'] = 0
            query_path_info.v['Directory'] = attrib

            pkt = CONST::SMB_TRANS_RES_PKT.make_struct
            smb_set_defaults(c, pkt)

            pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_TRANSACTION2
            pkt['Payload']['SMB'].v['Flags1'] = FLAGS
            pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
            pkt['Payload']['SMB'].v['WordCount'] = 10
            pkt['Payload'].v['ParamCountTotal'] = trans2_params.to_s.length
            #pkt['Payload'].v['DataCountTotal'] = query_path_info.to_s.length + UNICODE_NULL_LENGTH
            pkt['Payload'].v['DataCountTotal'] = query_path_info.to_s.length
            pkt['Payload'].v['ParamCount'] = trans2_params.to_s.length
            pkt['Payload'].v['ParamOffset'] = CONST::SMB_TRANS_RES_PKT_LENGTH
            #pkt['Payload'].v['DataCount'] = query_path_info.to_s.length + UNICODE_NULL_LENGTH
            pkt['Payload'].v['DataCount'] = query_path_info.to_s.length
            pkt['Payload'].v['DataOffset'] = CONST::SMB_TRANS_RES_PKT_LENGTH + trans2_params.to_s.length + UNICODE_NULL_LENGTH
            pkt['Payload'].v['Payload'] =
              "\x00" + # Padding
              trans2_params.to_s +
              "\x00\x00" + # Padding
              query_path_info.to_s #+
              #"\x00\x00" # Unknown

            c.put(pkt.to_s)
          end

          #
          # Responds to QUERY_PATH_INFO (Network Open) requests
          #
          # At the moment we just support '\\' path always send a SUCCESS...
          def smb_cmd_trans_query_path_info_network(c, path)

            if path && path.include?(file_name) #TODO: do it better
              attrib = 0 # File attributes => file
            elsif path && path == path_name
              # QUERY_PATH_INFO_PARAMETERS doesn't include a file name, return a Directory answer
              attrib = CONST::SMB_EXT_FILE_ATTR_DIRECTORY # File attributes => directory
            elsif path.nil? || path.empty? || path == "\x00" # empty path
              # QUERY_PATH_INFO_PARAMETERS doesn't include a file name, return a Directory answer
              attrib = CONST::SMB_EXT_FILE_ATTR_DIRECTORY # File attributes => directory
            else
              smb_error(CONST::SMB_COM_TRANSACTION2, c, CONST::SMB_STATUS_OBJECT_NAME_NOT_FOUND, true)
              return
            end

            pkt = CONST::SMB_TRANS_RES_PKT.make_struct
            smb_set_defaults(c, pkt)

            trans2_params = CONST::SMB_TRANS2_QUERY_PATH_INFORMATION_RES_PARAMETERS.make_struct
            trans2_params.v['EaErrorOffset'] = 0

            query_path_info = CONST::SMB_QUERY_FILE_NETWORK_INFO_HDR.make_struct
            query_path_info.v['loCreationTime'] = lo
            query_path_info.v['hiCreationTime'] = hi
            query_path_info.v['loLastAccessTime'] = lo
            query_path_info.v['hiLastAccessTime'] = hi
            query_path_info.v['loLastWriteTime'] = lo
            query_path_info.v['hiLastWriteTime'] = hi
            query_path_info.v['loLastChangeTime'] = lo
            query_path_info.v['hiLastChangeTime'] = hi
            query_path_info.v['AllocationSize'] = 1048576
            query_path_info.v['EndOfFile'] = exe_contents.length
            query_path_info.v['ExtFileAttributes'] = attrib

            pkt = CONST::SMB_TRANS_RES_PKT.make_struct
            smb_set_defaults(c, pkt)

            pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_TRANSACTION2
            pkt['Payload']['SMB'].v['Flags1'] = FLAGS
            pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
            pkt['Payload']['SMB'].v['WordCount'] = 10
            pkt['Payload'].v['ParamCountTotal'] = trans2_params.to_s.length
            pkt['Payload'].v['DataCountTotal'] = query_path_info.to_s.length + UNICODE_NULL_LENGTH
            pkt['Payload'].v['ParamCount'] = trans2_params.to_s.length
            pkt['Payload'].v['ParamOffset'] = CONST::SMB_TRANS_RES_PKT_LENGTH
            pkt['Payload'].v['DataCount'] = query_path_info.to_s.length + UNICODE_NULL_LENGTH
            pkt['Payload'].v['DataOffset'] = CONST::SMB_TRANS_RES_PKT_LENGTH + trans2_params.to_s.length + UNICODE_NULL_LENGTH
            pkt['Payload'].v['Payload'] =
              "\x00" + # Padding
              trans2_params.to_s +
              "\x00\x00" + # Padding
              query_path_info.to_s

            c.put(pkt.to_s)
          end
        end
      end
    end
  end
end
