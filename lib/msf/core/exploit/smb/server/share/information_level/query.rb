# -*- coding: binary -*-

module Msf
  module Exploit::Remote::SMB::Server
    module Share
      module InformationLevel
        # This mixin provides methods to handle TRAN2_QUERY_PATH_INFORMATION subcommands
        module Query
=begin
          # TODO: delete?
          def smb_cmd_trans_query_file_info_network(c, buff)
            dprint("****** [smb_cmd_trans_query_file_info_network] ******")
            pkt = CONST::SMB_TRANS2_PKT.make_struct
            pkt.from_s(buff)

            payload = pkt['Payload'].v['SetupData'].gsub(/\x00/, '').gsub(/.*\\/, '').chomp.strip

            if payload.length.to_s.eql?('4')
              attrib = "\x10\x00\x00\x00" # File attributes => directory
            else
              attrib = "\x80\x00\x00\x00" # File attributes => normal file
            end

            trans2_params = CONST::SMB_TRANS2_QUERY_PATH_INFORMATION_RES_PARAMETERS.make_struct
            trans2_params.v['EaErrorOffset'] = 0

            pkt = CONST::SMB_TRANS_RES_PKT.make_struct
            smb_set_defaults(c, pkt)

            pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_TRANSACTION2
            pkt['Payload']['SMB'].v['Flags1'] = 0x88
            pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
            pkt['Payload']['SMB'].v['WordCount'] = 10
            pkt['Payload'].v['ParamCountTotal'] = 2
            pkt['Payload'].v['DataCountTotal'] = 56
            pkt['Payload'].v['ParamCount'] = 2
            pkt['Payload'].v['ParamOffset'] = 56
            pkt['Payload'].v['DataCount'] = 56
            pkt['Payload'].v['DataOffset'] = 60
            pkt['Payload'].v['Payload'] =
              "\x00" + # Padding
              trans2_params.to_s +
              "\x00\x00" + # Padding
              # QUERY_PATH_INFO Data
              [lo, hi].pack("VV") + # Created
              [lo, hi].pack("VV") + # Last Access
              [lo, hi].pack("VV") + # Last Write
              [lo, hi].pack("VV") + # Change
              "\x00\x00\x10\x00\x00\x00\x00\x00" + # Allocation Size = 1048576 || 1Mb
              [exe_contents.length].pack("V") + "\x00\x00\x00\x00" + # End Of File
              attrib +
              "\x00\x00\x00\x00" # Unknown
            c.put(pkt.to_s)
          end
=end
          def smb_cmd_trans_query_file_info_standard(c, buff)
            trans2_params = CONST::SMB_TRANS2_QUERY_PATH_INFORMATION_RES_PARAMETERS.make_struct
            trans2_params.v['EaErrorOffset'] = 0

            query_path_info = CONST::SMB_QUERY_FILE_STANDARD_INFO_HDR.make_struct
            query_path_info.v['AllocationSize'] = 1048576
            query_path_info.v['EndOfFile'] = exe_contents.length
            query_path_info.v['NumberOfLinks'] = 1
            query_path_info.v['DeletePending'] = 0
            query_path_info.v['Directory'] = 0 #isdir == false

            pkt = CONST::SMB_TRANS_RES_PKT.make_struct
            smb_set_defaults(c, pkt)

            pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_TRANSACTION2
            pkt['Payload']['SMB'].v['Flags1'] = 0x88
            pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
            pkt['Payload']['SMB'].v['WordCount'] = 10
            pkt['Payload'].v['ParamCountTotal'] = 2
            pkt['Payload'].v['DataCountTotal'] = 24
            pkt['Payload'].v['ParamCount'] = 2
            pkt['Payload'].v['ParamOffset'] = 56
            pkt['Payload'].v['DataCount'] = 24
            pkt['Payload'].v['DataOffset'] = 60
            pkt['Payload'].v['Payload'] =
              "\x00" + # Padding
              trans2_params.to_s +
              "\x00\x00" + # Padding
              query_path_info.to_s +
              "\x00\x00" # Unknown

            c.put(pkt.to_s)
          end

          #
          # Responds to QUERY_FILE_INFO (Basic) requests
          #
          def smb_cmd_trans_query_file_info_basic(c, buff)
            dprint("[smb_cmd_trans_query_file_info_basic]")
=begin
            pkt = CONST::SMB_TRANS2_PKT.make_struct
            pkt.from_s(buff)

            payload = pkt['Payload'].v['SetupData'].gsub(/\x00/, '').gsub(/.*\\/, '\\').chomp.strip

            puts "payload..."
            puts "#{Rex::Text.to_hex_dump(payload)}"

            file = file_name
            path = path_name

            begin
              fileext = file.split('.').last
            rescue
              fileext = file
            end

            begin
              payext = payload.split('.').last
            rescue
              payext = payload
            end
=end
            pkt = CONST::SMB_TRANS_RES_PKT.make_struct
            smb_set_defaults(c, pkt)

            # If payload contains our file extension, send file response
            #if payext and payext.downcase.eql?(fileext.downcase)
              attrib = SMB_EXT_FILE_ATTR_NORMAL # File attributes => file
            #elsif payload.length.to_s.eql?('1') or payload.eql?(path)
              # if QUERY_PATH_INFO_PARAMETERS doesn't include a file name,
              # return a Directory answer
              #attrib = CONST::SMB_EXT_FILE_ATTR_DIRECTORY # File attributes => directory
            #else
              #attrib = CONST::SMB_EXT_FILE_ATTR_DIRECTORY
            #end

            #if (payext and payext.downcase.eql?(fileext.downcase)) or payload.length.to_s.eql?('1') or payload.length.to_s.eql?('4') or payload.eql?(path)

              trans2_params = CONST::SMB_TRANS2_QUERY_PATH_INFORMATION_RES_PARAMETERS.make_struct
              trans2_params.v['EaErrorOffset'] = 0

              query_path_info = CONST::SMB_QUERY_FILE_BASIC_INFO_HDR.make_struct
              query_path_info.v['loCreationTime'] = lo
              query_path_info.v['hiCreationTime'] = hi
              query_path_info.v['loLastAccessTime'] = lo
              query_path_info.v['hiLastAccessTime'] = hi
              query_path_info.v['loLastWriteTime'] = lo
              query_path_info.v['hiLastWriteTime'] = hi
              query_path_info.v['loLastChangeTime'] = lo
              query_path_info.v['hiLastChangeTime'] = hi
              query_path_info.v['ExtFileAttributes'] = attrib

              pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_TRANSACTION2
              pkt['Payload']['SMB'].v['Flags1'] = 0x88
              pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
              pkt['Payload']['SMB'].v['WordCount'] = 10
              pkt['Payload'].v['ParamCountTotal'] = 2
              pkt['Payload'].v['DataCountTotal'] = 40
              pkt['Payload'].v['ParamCount'] = 2
              pkt['Payload'].v['ParamOffset'] = 56
              pkt['Payload'].v['DataCount'] = 40
              pkt['Payload'].v['DataOffset'] = 60
              pkt['Payload'].v['Payload'] =
                "\x00" + # Padding
                trans2_params.to_s +
                "\x00\x00" + # Padding
                query_path_info.to_s
              c.put(pkt.to_s)
            #else
              #pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_TRANSACTION2
              #pkt['Payload']['SMB'].v['ErrorClass'] = 0xC0000034 # OBJECT_NAME_NOT_FOUND
              #pkt['Payload']['SMB'].v['Flags1'] = 0x88
              #pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
              #c.put(pkt.to_s)
            #end
          end

          #
          # Responds to QUERY_PATH_INFO (Basic) requests
          #
          def smb_cmd_trans_query_path_info_basic(c, buff)
            dprint("[smb_cmd_trans_query_path_info_basic]")
            #pkt = CONST::SMB_TRANS2_PKT.make_struct
            #pkt.from_s(buff)

            #payload = pkt['Payload'].v['SetupData'].gsub(/\x00/, '').gsub(/.*\\/, '\\').chomp.strip.split('\\').last
            #file = file_name

            pkt = CONST::SMB_TRANS_RES_PKT.make_struct
            smb_set_defaults(c, pkt)

            # If payload contains our file, send a file response
            # For MS13-071, payload is an empty unicode request (4 bytes)
            #if payload.downcase.eql?(file.downcase) or payload.length.to_s.eql?('4')
            #  if payload.length.to_s.eql?('4')
            #    attrib = CONST::SMB_EXT_FILE_ATTR_DIRECTORY # File attributes => directory
            #  else
            #    attrib = CONST::SMB_EXT_FILE_ATTR_NORMAL # File attributes => file
            #  end
            #else
            #  if payload.downcase.include?(file.downcase)
            #    attrib = CONST::SMB_EXT_FILE_ATTR_NORMAL # File attributes => file
            #  else
                # QUERY_PATH_INFO_PARAMETERS doesn't include a file name, return a Directory answer
                attrib = CONST::SMB_EXT_FILE_ATTR_DIRECTORY # File attributes => directory
            #  end
            #end

            trans2_params = CONST::SMB_TRANS2_QUERY_PATH_INFORMATION_RES_PARAMETERS.make_struct
            trans2_params.v['EaErrorOffset'] = 0

            query_path_info = CONST::SMB_QUERY_FILE_BASIC_INFO_HDR.make_struct
            query_path_info.v['loCreationTime'] = lo
            query_path_info.v['hiCreationTime'] = hi
            query_path_info.v['loLastAccessTime'] = lo
            query_path_info.v['hiLastAccessTime'] = hi
            query_path_info.v['loLastWriteTime'] = lo
            query_path_info.v['hiLastWriteTime'] = hi
            query_path_info.v['loLastChangeTime'] = lo
            query_path_info.v['hiLastChangeTime'] = hi
            query_path_info.v['ExtFileAttributes'] = attrib

            # If payload contains our file, send the response
            #if payload.downcase.eql?(file.downcase) or payload.length.to_s.eql?('4') or payload.downcase.include?(file.downcase)
            # At the moment we just support '\\' path always send a SUCCESS...
              pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_TRANSACTION2
              pkt['Payload']['SMB'].v['Flags1'] = 0x88
              pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
              pkt['Payload']['SMB'].v['WordCount'] = 10
              pkt['Payload'].v['ParamCountTotal'] = 2
              pkt['Payload'].v['DataCountTotal'] = 40
              pkt['Payload'].v['ParamCount'] = 2
              pkt['Payload'].v['ParamOffset'] = 56
              pkt['Payload'].v['DataCount'] = 40
              pkt['Payload'].v['DataOffset'] = 60
              pkt['Payload'].v['Payload'] =
                "\x00" + # Padding
                trans2_params.to_s +
                "\x00\x00" + # Padding
                query_path_info.to_s
              c.put(pkt.to_s)
            #else
              # Else send not found
              #pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_TRANSACTION2
              #pkt['Payload']['SMB'].v['ErrorClass'] = 0xC0000034 # OBJECT_NAME_NOT_FOUND
              #pkt['Payload']['SMB'].v['Flags1'] = 0x88
              #pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
              #c.put(pkt.to_s)
            #end
          end

          #
          # Responds to QUERY_PATH_INFO (Standard) requests
          #
          # At the moment we just support '\\' path always send a SUCCESS...
          def smb_cmd_trans_query_path_info_standard(c, buff)
            dprint("[smb_cmd_trans_query_path_info_standard]")
            #smb = @state[c]
            #pkt = CONST::SMB_TRANS2_PKT.make_struct
            #pkt.from_s(buff)

            #payload = pkt['Payload'].v['SetupData'].gsub(/\x00/, '').gsub(/.*\\/, '').chomp.strip
            #ar = Rex::Text.to_hex(buff, '').to_s
            #fid = ar[144..147].unpack('n*').reverse.pack('n*')

            # If FileID matches or matches file, send file response
            #if ( fid.hex.eql?(smb[:file_id].to_i) or payload.length.eql?(file_name.length) )
            #attrib2 = 0 # IsFile
            #else
            # Otherwise return a Directory answer
            attrib2 = 1 # IsDir
            #end

            trans2_params = CONST::SMB_TRANS2_QUERY_PATH_INFORMATION_RES_PARAMETERS.make_struct
            trans2_params.v['EaErrorOffset'] = 0

            query_path_info = CONST::SMB_QUERY_FILE_STANDARD_INFO_HDR.make_struct
            query_path_info.v['AllocationSize'] = 1048576
            query_path_info.v['EndOfFile'] = exe_contents.length
            query_path_info.v['NumberOfLinks'] = 1
            query_path_info.v['DeletePending'] = 0
            query_path_info.v['Directory'] = attrib2

            pkt = CONST::SMB_TRANS_RES_PKT.make_struct
            smb_set_defaults(c, pkt)

            pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_TRANSACTION2
            pkt['Payload']['SMB'].v['Flags1'] = 0x88
            pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
            pkt['Payload']['SMB'].v['WordCount'] = 10
            pkt['Payload'].v['ParamCountTotal'] = 2
            pkt['Payload'].v['DataCountTotal'] = 24
            pkt['Payload'].v['ParamCount'] = 2
            pkt['Payload'].v['ParamOffset'] = 56
            pkt['Payload'].v['DataCount'] = 24
            pkt['Payload'].v['DataOffset'] = 60
            pkt['Payload'].v['Payload'] =
                "\x00" + # Padding
                    trans2_params.to_s +
                    "\x00\x00" + # Padding
                    query_path_info.to_s +
                    "\x00\x00" # Unknown
            c.put(pkt.to_s)
          end
        end
      end
    end
  end
end
