# -*- coding: binary -*-

module Msf
  module Exploit::Remote::SMB::Server
    module Share
      module InformationLevel
        # This mixin provides methods to handle TRAN2_FIND_FIRST2 subcommands
        module Find

          #
          # Responds to FIND_FIRST2 requests
          # Command: Find File Both Directory Info
          #
          def smb_cmd_find_file_both_directory_info(c, payload)
            pkt = CONST::SMB_TRANS_RES_PKT.make_struct
            smb_set_defaults(c, pkt)

            if payload && payload.include?(file_name)
              data = Rex::Text.to_unicode(file_name)
              length = exe_contents.length
              ea = 0
              alloc = 1048576 # Allocation Size = 1048576 || 1Mb
              attrib = CONST::SMB_EXT_FILE_ATTR_NORMAL
              search = 1
            elsif payload && payload == path_name
              data = Rex::Text.to_unicode(path)
              length = 0
              ea = 0x21
              alloc = 0 # 0Mb
              attrib = CONST::SMB_EXT_FILE_ATTR_DIRECTORY
              pkt['Payload'].v['SetupCount'] = 0
              search = 0x100
            else
              smb_error(CONST::SMB_COM_TRANSACTION2, c, CONST::SMB_STATUS_NO_SUCH_FILE, true)
              return
            end

            trans2_params = CONST::SMB_TRANS2_FIND_FIRST2_RES_PARAMETERS.make_struct
            trans2_params.v['SID'] = 0xfffd
            trans2_params.v['SearchCount'] = search
            trans2_params.v['EndOfSearch'] = search
            trans2_params.v['EaErrorOffset'] = ea
            trans2_params.v['LastNameOffset'] = 0

            find_file = CONST::SMB_FIND_FILE_BOTH_DIRECTORY_INFO_HDR.make_struct
            find_file.v['NextEntryOffset'] = CONST::SMB_FIND_FILE_BOTH_DIRECTORY_INFO_HDR_LENGTH + data.length
            find_file.v['FileIndex'] = 0
            find_file.v['loCreationTime'] = lo
            find_file.v['hiCreationTime'] = hi
            find_file.v['loLastAccessTime'] = lo
            find_file.v['hiLastAccessTime'] = hi
            find_file.v['loLastWriteTime'] = lo
            find_file.v['hiLastWriteTime'] = hi
            find_file.v['loLastChangeTime'] = lo
            find_file.v['hiLastChangeTime'] = hi
            find_file.v['EndOfFile'] = length
            find_file.v['AllocationSize'] = alloc
            find_file.v['ExtFileAttributes'] = attrib
            find_file.v['FileName'] = data

            pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_TRANSACTION2
            pkt['Payload']['SMB'].v['Flags1'] = FLAGS
            pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
            pkt['Payload']['SMB'].v['WordCount'] = 10
            pkt['Payload'].v['ParamCountTotal'] = 10
            pkt['Payload'].v['DataCountTotal'] = CONST::SMB_FIND_FILE_BOTH_DIRECTORY_INFO_HDR_LENGTH + data.length
            pkt['Payload'].v['ParamCount'] = 10
            pkt['Payload'].v['ParamOffset'] = 56
            pkt['Payload'].v['DataCount'] = CONST::SMB_FIND_FILE_BOTH_DIRECTORY_INFO_HDR_LENGTH + data.length
            pkt['Payload'].v['DataOffset'] = 68
            pkt['Payload'].v['Payload'] =
              "\x00" + # Padding
              trans2_params.to_s +
              "\x00\x00" + # Padding
              find_file.to_s
            c.put(pkt.to_s)
          end

          #
          # Responds to FIND_FIRST2 requests
          # Command: Find File Names Info
          #
          def smb_cmd_find_file_names_info(c, payload)

            pkt = CONST::SMB_TRANS_RES_PKT.make_struct
            smb_set_defaults(c, pkt)

            if payload && payload.include?(file_name)
              data = Rex::Text.to_unicode(file_name)
            elsif payload && payload == path_name
              data = Rex::Text.to_unicode(path_name)
            else
              smb_error(CONST::SMB_COM_TRANSACTION2, c, CONST::SMB_STATUS_NO_SUCH_FILE, true)
              return
            end

            find_file = CONST::SMB_FIND_FILE_NAMES_INFO_HDR.make_struct
            find_file.v['NextEntryOffset'] = CONST::SMB_FIND_FILE_NAMES_INFO_HDR_LENGTH + data.length
            find_file.v['FileIndex'] = 0
            find_file.v['FileName'] = data

            trans2_params = CONST::SMB_TRANS2_FIND_FIRST2_RES_PARAMETERS.make_struct
            trans2_params.v['SID'] = 0xfffd
            trans2_params.v['SearchCount'] = 1
            trans2_params.v['EndOfSearch'] = 1
            trans2_params.v['EaErrorOffset'] = 0
            trans2_params.v['LastNameOffset'] = 0

            # If its asking for a file, return file
            pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_TRANSACTION2
            pkt['Payload']['SMB'].v['Flags1'] = FLAGS
            pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
            pkt['Payload']['SMB'].v['WordCount'] = 10
            pkt['Payload'].v['ParamCountTotal'] = 10
            pkt['Payload'].v['DataCountTotal'] = 14 + data.length
            pkt['Payload'].v['ParamCount'] = 10
            pkt['Payload'].v['ParamOffset'] = 56
            pkt['Payload'].v['DataCount'] = 14 + data.length
            pkt['Payload'].v['DataOffset'] = 68
            pkt['Payload'].v['Payload'] =
              "\x00" + # Padding
              trans2_params.to_s +
              "\x00\x00" + # Padding
              find_file.to_s +
              "\x00\x00"
            c.put(pkt.to_s)
          end

          #
          # Responds to FIND_FIRST2 requests
          # Command: Find File Full Directory Info
          #
          def smb_cmd_find_file_full_directory_info(c, payload)
            pkt = CONST::SMB_TRANS_RES_PKT.make_struct
            smb_set_defaults(c, pkt)

            if payload && payload.include?(file_name)
              data = Rex::Text.to_unicode(file_name)
              length = exe_contents.length
              ea = 0
              alloc = 1048576 # Allocation Size = 1048576 || 1Mb
              attrib = CONST::SMB_EXT_FILE_ATTR_NORMAL # File
              search = 0x100
            elsif payload && payload == path_name
              data = path
              length = 0
              ea = 0x21
              alloc = 0 # 0Mb
              attrib = CONST::SMB_EXT_FILE_ATTR_DIRECTORY # Dir
              pkt['Payload'].v['SetupCount'] = 0
              search = 1
            else
              smb_error(CONST::SMB_COM_TRANSACTION2, c, CONST::SMB_STATUS_NO_SUCH_FILE, true)
              return
            end

            find_file = CONST::SMB_FIND_FILE_FULL_DIRECTORY_INFO_HDR.make_struct
            find_file.v['NextEntryOffset'] = CONST::SMB_FIND_FILE_FULL_DIRECTORY_INFO_HDR_LENGTH + data.length
            find_file.v['FileIndex'] = 0
            find_file.v['loCreationTime'] = lo
            find_file.v['hiCreationTime'] = hi
            find_file.v['loLastAccessTime'] = lo
            find_file.v['hiLastAccessTime'] = hi
            find_file.v['loLastWriteTime'] = lo
            find_file.v['hiLastWriteTime'] = hi
            find_file.v['loLastChangeTime'] = lo
            find_file.v['hiLastChangeTime'] = hi
            find_file.v['EndOfFile'] = length
            find_file.v['AllocationSize'] = alloc
            find_file.v['ExtFileAttributes'] = attrib
            find_file.v['FileName'] = data

            trans2_params = CONST::SMB_TRANS2_FIND_FIRST2_RES_PARAMETERS.make_struct
            trans2_params.v['SID'] = 0xfffd
            trans2_params.v['SearchCount'] = search
            trans2_params.v['EndOfSearch'] = search
            trans2_params.v['EaErrorOffset'] = ea
            trans2_params.v['LastNameOffset'] = 0

            pkt['Payload']['SMB'].v['Command'] = CONST::SMB_COM_TRANSACTION2
            pkt['Payload']['SMB'].v['Flags1'] = 0x88
            pkt['Payload']['SMB'].v['Flags2'] = FLAGS2
            pkt['Payload']['SMB'].v['WordCount'] = 10
            pkt['Payload'].v['ParamCountTotal'] = 10
            pkt['Payload'].v['DataCountTotal'] = 68 + data.length
            pkt['Payload'].v['ParamCount'] = 10
            pkt['Payload'].v['ParamOffset'] = 56
            pkt['Payload'].v['DataCount'] = 68 + data.length
            pkt['Payload'].v['DataOffset'] = 68
            pkt['Payload'].v['Payload'] =
              "\x00" + # Padding
              trans2_params.to_s +
              "\x00\x00" + # Padding
              find_file.to_s

            c.put(pkt.to_s)
          end
        end
      end
    end
  end
end
