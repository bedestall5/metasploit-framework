module Msf

module Exploit::Remote::SMB::Client::PipeAudit
  include Msf::Exploit::Remote::SMB::Client

  def initialize(info = {})
    super
	register_options(
      [
        OptPath.new('NAMED_PIPES_FILE', [ true, "List of known named pipes",
          File.join(Msf::Config.data_directory, "wordlists", "named_pipes.txt")]),
      ])
  end

  def connect_to_pipe()
    accessible_pipes||=[]
    pipe_handles||=[]
	pipe_file = datastore['NAMED_PIPES_FILE']
	if (!pipe_file)
       print_error("File with named pipes is needed")
    end
    p_file = File.open(pipe_file).read
    p_file.each_line do |pipe|
       begin
		 pipe_name = "#{pipe.to_s.split("\n")[0]}"
		 vprint_status("Using pipe #{pipe_name}")
         pipe_handle = self.simple.create_pipe(pipe_name, 'o')
         print_good("Accessible pipe found: #{pipe_name}")
		 pipe_found = true
	     accessible_pipes << pipe_name
		 pipe_handles << pipe_handle
       rescue Rex::Proto::SMB::Exceptions::ErrorCode => e
         vprint_status("Inaccessible named pipe #{pipe_name} - #{e.message}")
       end
       if (pipe_found)
	       return accessible_pipes, pipe_handles
       end
    end
  end
end
end

