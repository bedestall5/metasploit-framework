require 'msf/core/exploit/local/compile_c'
load 'lib/msf/core/exploit/local/compile_c.rb'

module Msf
module Exploit::Local::Linux
	include Exploit::Local::CompileC

	def linux_x86_syscall_wrappers(metasm_exe)
		cparser.parse <<-EOC
			#ifndef size_t
			#define size_t int
			#endif
			#ifndef off_t
			#define off_t unsigned long
			#endif

			#define O_CREAT 64
			#define O_RDWR 2

			#define MAP_PRIVATE   0x02
			#define MAP_FIXED     0x10
			#define MAP_ANONYMOUS 0x20
			#define MAP_ANON MAP_ANONYMOUS
			#define MAP_FAILED ((void *)-1)

			#define PROT_READ  0x1
			#define PROT_WRITE 0x2
			#define PROT_EXEC  0x4

			void exit(int status);
			int read(int fd, void *buf, size_t count);
			int write(int fd, void *buf, size_t count);
			int open(const char *pathname, int flags, int mode);
			int unlink(const char *pathname);
			int ftruncate(int fd, off_t length);
			int socket(int, int, int);
			int sendfile(int in_fd, int out_fd, void *, int count);
			void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);
			void *__mmap2(void *addr, size_t length, int prot, int flags, int fd, off_t offset);

			void *
			mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset)
			{
				return __mmap2(addr, length, prot, flags, fd, (offset >> 12));
			}

			#ifdef DEBUGGING
			void sigtrap();
			#else
			#define sigtrap()
			#endif

		EOC
		metasm_exe.parse <<-EOS
			sigtrap:
				int    3
				ret
			exit:
				mov    eax, 1         ; sys_exit
				mov    ebx, [esp+4]
				int    0x80
				ret
			read:
				mov    eax, 3         ; sys_write
				mov    edx,[esp+12]   ; length
				mov    ecx,[esp+8]    ; string
				mov    ebx,[esp+4]    ; file descriptor
				int    0x80
				ret
			write:
				mov    eax, 4         ; sys_write
				mov    edx,[esp+12]   ; length
				mov    ecx,[esp+8]    ; string
				mov    ebx,[esp+4]    ; file descriptor
				int    0x80
				ret
			open:
				mov    eax, 5         ; sys_open
				mov    ecx,[esp+8]    ; mode
				mov    ebx,[esp+4]    ; flags
				int    0x80
				ret
			ftruncate:
				mov    eax, 92        ; sys_ftruncate
				mov    ecx,[esp+8]    ; file descriptor
				mov    ebx,[esp+4]    ; size
				int    0x80
				ret
			socket:
				mov    eax, 102       ; sys_socketcall
				mov    ecx,[esp]      ; args
				mov    ebx,0x1        ;
				int    0x80
				ret
			sendfile:
				mov   eax, 187       ; sys_sendfile
				mov   esi,[esp+16]   ; size
				mov   edx,[esp+12]   ; offset
				mov   ecx,[esp+8]    ; out_fd
				mov   ebx,[esp+4]    ; in_fd
				int   0x80
				ret

			unlink:
				mov   eax, 10        ; sys_unlink
				mov   ebx,[esp+4]    ; filename
				int   0x80
				ret

			__mmap2:
				push  ebx
				push  ecx
				push  edx
				push  esi
				push  edi
				push  ebp

				mov   eax, 90
				mov   ebx, [esp+28]
				mov   ecx, [esp+32]
				mov   edx, [esp+36]
				mov   esi, [esp+40]
				mov   edi, [esp+44]
				mov   ebp, [esp+48]
				int   0x80

				pop   ebp
				pop   edi
				pop   esi
				pop   edx
				pop   ecx
				pop   ebx
				ret
		EOS

	end
end
end

