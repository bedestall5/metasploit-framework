require 'rex/exploitation/cmdstager'

module Msf

###
#
# This mixin provides a interface to generating cmdstagers
#
###
module Exploit::CmdStager

	#
	# Creates an instance of an exploit that uses an CmdStager overwrite.
	#
	def initialize(info = {})
		super
		@cmdstager = nil
	end


	#
	# Generates a cmd stub based on the current target's architecture
	# and operating system.
	#
	def generate_cmdstager(opts = {}, linelen=2047, pl=nil)
		# Prefer the target's platform/architecture information, but use
		# the module's if no target specific information exists
		los   = target_platform
		larch = target_arch || ARCH_X86
		pl ||= payload

		if los.nil?
			raise RuntimeError, "No platform restrictions were specified -- cannot generate cmdstager"
		end

		cmdstager  = Rex::Exploitation::CmdStager.new(pl, framework, los, larch)
		cstager = cmdstager.generate(opts, linelen)

		if (cstager.nil?)
			print_error("The cmdstager could not be generated")
			raise ArgumentError
		end

		@cmdstager = cstager
		return cstager
	end


	#
	# Show the progress of the upload (XXX: uses printf/print)
	#
	def progress(total, sent)

		done = (sent.to_f / total.to_f) * 100

		if(done.to_f < 99.00)
			printf("\r\e[0K[ cmdstager %3.2f%% done (%d/%d bytes) ]", done.to_f, sent, total)
			$stdout.flush
		end

		if(done.to_f > 99.00 && done.to_f < 100.00)
			# just to beautify output so the handler output will kick in
			print "\r\e[0K"
			$stdout.flush
			return
		end

	end

end

end
