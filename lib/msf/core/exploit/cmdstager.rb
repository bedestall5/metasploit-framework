require 'rex/exploitation/cmdstager'

module Msf

###
#
# This mixin provides a interface to generating cmdstagers
#
###
module Exploit::CmdStager

	#
	# Creates an instance of an exploit that uses an CmdStager overwrite.
	#
	def initialize(info = {})
		super
		@cmd_list = nil
	end


	#
	# Generates a cmd stub based on the current target's architecture
	# and operating system.
	#
	def generate_cmdstager(opts = {}, linelen=2047, pl=nil)
		# Prefer the target's platform/architecture information, but use
		# the module's if no target specific information exists
		los   = target_platform
		larch = target_arch || ARCH_X86
		pl ||= payload

		if los.nil?
			raise RuntimeError, "No platform restrictions were specified -- cannot generate cmdstager"
		end

		cmdstager = Rex::Exploitation::CmdStager.new(pl.encoded, framework, los, larch)
		cmd_list = cmdstager.generate(opts, linelen)

		if (cmd_list.nil? or cmd_list.length < 1)
			print_error("The command stager could not be generated")
			raise ArgumentError
		end

		@cmd_list = cmd_list
	end


	#
	# Show the progress of the upload
	#
	def progress(total, sent)
		done = (sent.to_f / total.to_f) * 100
		if (done.to_f < 99.00)
			print_status("Command Stager progress - %3.2f%% done (%d/%d bytes)" % [done.to_f, sent, total])
		end
	end

end

end
