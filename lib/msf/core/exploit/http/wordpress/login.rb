# -*- coding: binary -*-

module Msf::Exploit::Remote::HTTP::Wordpress::Login
  # performs a wordpress login
  #
  # @param user [String] Username
  # @param pass [String] Password
  # @param timeout [Integer] The maximum number of seconds to wait before the request times out
  # @return [String,nil] the session cookies as a single string on successful login, nil otherwise
  def wordpress_login(user, pass, timeout = 20)
    redirect = "#{target_uri}#{Rex::Text.rand_text_alpha(8)}"
    res = send_request_cgi({
        'method' => 'POST',
        'uri' => wordpress_url_login,
        'vars_post' => wordpress_helper_login_post_data(user, pass, redirect)
    }, timeout)
    if res && res.redirect? && res.redirection && res.redirection.to_s == redirect
      cookies = res.get_cookies
    end

    if cookies && (
      # current Wordpress (2.6+)
      cookies =~ /wordpress_(?:sec|logged_in_)[^=]+=[^;]+;/i ||
      # Wordpress 2.5
      cookies =~ /wordpress_[a-z0-9]+=[^;]+;/i ||
      # Wordpress 2.0
      cookies =~ /wordpress(?:user|pass)_[^=]+=[^;]+;/i
    )

      service_data = {
        address: rhost,
        port: rport,
        protocol: 'tcp',
        service_name: 'http',
        workspace_id: myworkspace_id,
      }

      cdata = {
        module_fullname: self.fullname,
        origin_type: :service,
        username: user,
        private_data: pass,
        private_type: :password,
      }.merge(service_data)

      core = create_credential(cdata)
      login_data = { core: core }.merge(service_data)

      create_credential_login(login_data)

      return cookies
    end

    nil
  end
end
