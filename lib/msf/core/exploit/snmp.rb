require 'msf/core'
require 'snmp'

module Msf

###
#
# This module exposes methods for querying a SNMP service
#
###
module Exploit::Remote::SNMPClient
	
	
	include Exploit::Remote::Udp

	
	#
	# Creates an instance of a SNMP exploit module.
	#
	def initialize(info = {})
		super

		# Register the options that all SNMP exploits may make use of.
		register_options(
			[
				Opt::RHOST,
				Opt::RPORT(161),
				OptString.new('COMMUNITY', [ false, 'The snmp community to use', 'public' ])
			], Msf::Exploit::Remote::SNMPClient)		
	end
	
	#
	# This method wraps the snmp library and passes in
	# the Rex UDP socket
	#
	def connect_snmp(global=true, opts={})
		s = connect_udp(false, opts)
		snmp = ::SNMP::Manager.new(
			:Host => rhost,
			:Port => rport,
			:Socket => s,
			:Transport => ::SNMP::RexUDPTransport,
			:Community => community
		)
		
		@snmp = snmp if global
		snmp
	end
	
	def disconnect_snmp
		@snmp.close if @snmp
		@snmp = nil
	end
	
	def snmp
		@snmp
	end
	
	def community
		datastore['COMMUNITY'] || 'public'
	end

protected

	attr_accessor :snmp
end
end
