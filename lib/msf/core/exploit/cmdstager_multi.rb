# -*- coding: binary -*-

require 'msf/core/exploit/cmdstager'

module Msf

###
#
# This mixin provides an interface for staging cmd to arbitrary payloads
#
###
module Exploit::CmdStagerMulti

  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super

    register_advanced_options(
      [
        OptString.new('CMDSTAGER::DECODERSTUB',  [ false, 'The decoder stub to use.', nil]),
      ], self.class)
  end

  def create_stager(exe, opts)
    case opts[:flavor]
    when :bourne
      return Rex::Exploitation::CmdStagerBourne.new(exe)
    when :debug_asm
      return Rex::Exploitation::CmdStagerDebugAsm.new(exe)
    when :debug_write
      return Rex::Exploitation::CmdStagerDebugWrite.new(exe)
    when :echo
      return Rex::Exploitation::CmdStagerEcho.new(exe)
    when :vbs, :vbs_adodb
      return Rex::Exploitation::CmdStagerVBS.new(exe)
    end
  end

  def execute_cmdstager(opts = {})
    opts[:decoder] = guess_decoder(opts) if datastore['CMDSTAGER::DECODERSTUB'].nil?
    super
  end

  def generate_cmdstager(opts = {}, pl = nil)
    if not opts.include?(:flavor)
      default_flavor = guess_flavor
      vprint_status("Using default stager: #{default_flavor}")
      opts[:flavor] = default_flavor
    end
    opts[:decoder] = guess_decoder(opts) if datastore['CMDSTAGER::DECODERSTUB'].nil?
    super
  end

  def guess_decoder(opts)
    case opts[:flavor]
    when :debug_asm
      return File.join(Msf::Config.install_root, "data", "exploits", "cmdstager", "debug_asm")
    when :debug_write
      return File.join(Msf::Config.install_root, "data", "exploits", "cmdstager", "debug_write")
    when :vbs
      return File.join(Msf::Config.install_root, "data", "exploits", "cmdstager", "vbs_b64")
    when :vbs_adodb
      return File.join(Msf::Config.install_root, "data", "exploits", "cmdstager", "vbs_b64_adodb")
    end
    return nil
  end

  def guess_flavor
    c_platform = nil
    if target_platform.names.length == 1
      c_platform = target_platform.names.first
    end
    case c_platform
    when 'linux', 'Linux'
      return :bourne
    when 'osx', 'OSX'
      return :bourne
    when 'unix', 'Unix'
      return :bourne
    when 'win', 'Windows'
      return :vbs
    end
    return nil
  end
end

end
