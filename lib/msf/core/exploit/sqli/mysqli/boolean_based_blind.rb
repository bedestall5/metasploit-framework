#
#   Boolean-Based Blind SQL injection support for MySQL
#
class Msf::Exploit::SQLi::MySQLi::BooleanBasedBlind < Msf::Exploit::SQLi::MySQLi::Common
  #
  #   Gets the output of the given SQL query, in a boolean-based blind manner.
  #   The block given to initialize must return true if querying its parameter
  #   gave a result, false otherwise.
  #   @param query [String] The SQL query to execute
  #   @return [String] The query results
  #
  def run_sql(query)
    puts "[*] Executing (#{query})" if @verbose
    if @hex_encode_strings
      query = hex_encode_strings(query)
      puts "[*] Encoded to (#{query})" if @verbose
    end
    # first, get the length of the output
    output_length = blind_detect_length(query, false)
    puts "[*] Boolean-based injection: expecting output of length #{output_length}" if @verbose
    # now, get the output, of the given length
    print '[+] Data: ' if @verbose
    blind_dump_data(query, output_length, false)
  end

  #
  # This method checks if the target is vulnerable to Blind boolean-based injection by checking that
  # the values returned by the bloc for some boolean queries are correct.
  #
  def test_vulnerable
    out_true = blind_request('1=1')
    out_false = blind_request('1=2')
    out_true && !out_false
  end

  private

  #
  # Performs one request, should leak one bit of information
  # (if return value is not false or nil, 1, 0 otherwise)
  #
  def blind_request(query)
    @query_proc.call(query)
  end
end
