require 'socket'

module Msf::Exploit::Remote::SMB::Mitm
  # This class provides the SMB server core. Settings that are relevant server wide are managed by this object.
  # Currently, the server only supports negotiating and authenticating requests. No other server functionality is
  # available at this time. The negotiating and authentication is supported for SMB versions 1 through 3.1.1.
  class MITMServer < ::RubySMB::Server
    def initialize(relay_timeout:, relay_targets:, listener:, **kwargs)
      super(**kwargs)

      @relay_targets = relay_targets
      @relay_timeout = relay_timeout
      @listener = listener
    end

    # Run the server and accept any connections. For each connection, the block will be executed if specified. When the
    # block returns false, the loop will exit and the server will no long accept new connections.
    def run(&block)
      loop do
        sock = @socket.accept
        server_client = Msf::Exploit::Remote::SMB::Mitm::MITMServerClient.new(
          self,
          RubySMB::Dispatcher::Socket.new(sock),
          relay_targets: TargetList.new(@relay_targets),
          relay_timeout: @relay_timeout,
          listener: @listener
        )
        @connections << Connection.new(server_client, Thread.new {
          begin
            server_client.run
          rescue => e
            print_error "#{e.message}"
            elog(e)
          end
        })

        break unless block.nil? || block.call(server_client)
      end
    end
  end
end
