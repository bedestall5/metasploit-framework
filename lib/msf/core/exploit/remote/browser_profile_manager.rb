module Msf
  module Exploit::Remote::BrowserProfileManager
  	def initialize(info={})
  		super
  		# See get_profile's documentation to understand what @target_profiles stores
  		@target_profiles = {}
  	end


    # Returns the target profile based on the tag. Each profile has the following structure:
    # 'cookie_name' =>
    # {
    #   :os_name   => 'Windows 7'
    #   ...... etc ......
    # }
    # A profile should at least have info about the following:
    # :source    : The data source. Either from 'script', or 'headers'. The 'script' source
    #              should be more accurate in some scenarios like browser compatibility mode
    # :ua_name   : The name of the browser
    # :ua_ver    : The version of the browser (not yet implemented)
    # :os_name   : The name of the OS ("Windows XP")
    # :language  : The system's language
    # :arch      : The system's arch
    # :proxy     : Indicates whether proxy is used
    #
    # For more info about what the actual value might be for each key, see HttpServer.
    #
    # If the source is 'script', the profile might have even more information about plugins:
    # 'office'       : The version of Microsoft Office (IE only)
    # 'activex'      : Whether a specific set of clsid & method is available from an ActiveX control (IE only)
    # 'java'         : The Java version
    # 'mshtml_build' : The MSHTML build version
    # 'flash'        : The Flash version
    # 'silverlight'  : The Silverlight version
    #
    # @param tag [String] Either a cookie or IP + User-Agent
    # @return [Hash] The profile found. If not found, returns nil
    def get_profile(tag)
      sync do
        return @target_profiles[tag]
      end
    end


    # Updates information for a specific profile
    #
    # @param target_profile [Hash] The profile to update
    # @param key [Symbol] The symbol to use for the hash
    # @param value [String] The value to assign
    def update_profile(target_profile, key, value)
      sync do
        target_profile[key] = value
      end
    end


    # Initializes a profile, if it did not previously exist
    #
    # @param tag [String] A unique string as a way to ID the profile
    def init_profile(tag)
      sync do
        @target_profiles[tag] ||= {}
      end
    end


    
  end
end