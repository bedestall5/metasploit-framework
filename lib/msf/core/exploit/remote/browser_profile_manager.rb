require 'msgpack'

module Msf
  module Exploit::Remote::BrowserProfileManager

    # @overload note_type_prefix
    #  Sets the note type prefix to retrieve or load target information.
    def note_type_prefix
      raise NoMethodError, "A mixin that's using BrowserProfileManager should define note_type_prefix"
    end


    # Returns profile information about a specific browser client.
    #
    # @param [String] tag A tag that's unique to the browser. Probably generated by Msf::Exploit::Remote::BrowserExploitServer#retrieve_tag.
    # @return [Hash]
    def get_profile_info(tag)
      normalized_tag = "#{note_type_prefix}.#{tag}"
      framework.db.notes.each do |note|
        return MessagePack.unpack(note.data) if note.ntype == normalized_tag 
      end

      {}
    end


    # Updates profile information about a specific browser client.
    # It will also automatically initialize the profile (an empty one) if it's not found.
    #
    # @see #init_profile
    # @param [String] tag A tag that's unique to the browser. Probably generated by Msf::Exploit::Remote::BrowserExploitServer#retrieve_tag.
    # @param [String] key A specific key to update (for example: os name).
    # @param [String] value The value for the key.
    # @return [void]
    def update_profile(tag, key, value)
      profile = get_profile_info(tag)
      if profile.empty?
        init_profile(tag)
        profile = get_profile_info(tag)
      end

      normalized_tag = "#{note_type_prefix}.#{tag}"
      profile[normalized_tag][key.to_s] = value
      framework.db.report_note(
        :type => normalized_tag,
        :data => profile.to_msgpack,
        :update => :unique
      )
    end


    # Initializes a profile.
    #
    # @param [String] tag A tag that's unique to the browser. Probably generated by Msf::Exploit::Remote::BrowserExploitServer#retrieve_tag.
    # @return [void]
    def init_profile(tag)
      normalized_tag = "#{note_type_prefix}.#{tag}"
      empty_profile = { normalized_tag => {} }
      framework.db.report_note(
        :type => normalized_tag,
        :data => empty_profile.to_msgpack,
        :update => :unique
      )
    end

  end
end
