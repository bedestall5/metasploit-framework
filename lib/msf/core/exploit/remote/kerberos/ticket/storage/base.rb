module Msf::Exploit::Remote::Kerberos::Ticket::Storage
  class Base
    extend Forwardable
    include Msf::Auxiliary::Report

    # @!attribute [r] framework
    #   @return [Msf::Framework] the Metasploit framework instance
    attr_reader :framework

    # @!attribute [r] framework
    #   @return [Msf::Module] the Metasploit framework module that is associated with the authentication instance
    attr_reader :framework_module

    def_delegators :@framework_module,
                  :print_status,
                  :print_good,
                  :workspace

    def initialize(framework: nil, framework_module: nil)
      @framework = framework || framework_module&.framework
      @framework_module = framework_module
    end

    # return [Array<StoredTicket>]
    def delete_tickets(options = {})
      []
    end

    # return [Array<StoredTicket>]
    def tickets(options = {}, &block)
      []
    end

    # Load a stored credential object that is suitable for authenticaiton.
    #
    # return [Rex::Proto::Kerberos::CredentialCache::Krb5CcacheCredential] credential
    def load_credential(options = {})
      nil
    end

    # @param [Rex::Proto::Kerberos::CredentialCache::Krb5Ccache] ccache
    # @return [nil]
    def store_ccache(ccache, options = {})
      nil
    end

    private

    # return [Array<Mdm::Loot>]
    def objects(options, &block)
      return [] unless active_db?

      filter = {}
      if options[:host].present?
        if options[:host].is_a?(Mdm::Host)
          filter[:host] = options[:host]
        else
          filter[:host] = { address: options[:host] }
        end
      end
      unless (info = loot_info(options)).blank?
        filter[:info] = info
      end
      framework.db.loots(workspace: myworkspace, ltype: 'mit.kerberos.ccache', **filter).each do |stored_loot|
        block.call(stored_loot) if block_given?
      end
    end

    # Build a loot info string that can later be used in a lookup.
    #
    # @param [Hash] options
    # @option options [String] :realm the realm of the ticket (optional)
    # @option options [String] :server the service name of the ticket (optional)
    # @option options [String] :client the client username of the ticket (optional)
    # @option options [Boolean] :valid whether or not the ticket is valid, defaults to true (optional)
    # @return [String] the info string
    def loot_info(options = {})
      info = []

      info << '[invalid]' if !options.fetch(:valid, true)

      realm = options[:realm]
      info << "realm: #{realm.to_s.upcase}" if realm.present?

      client = options[:client]
      info << "client: #{client.to_s.downcase}" if client.present?

      server = options[:server]
      info << "server: #{server.to_s.downcase}" if server.present?

      info.join(', ')
    end
  end
end
