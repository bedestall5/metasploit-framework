module Msf::Exploit::Remote::Kerberos::Ticket::Storage
  module ReadMixin
    # return [Array<FixMeKrbObj>]
    def credentials(options = {}, &block)
      objects(options) do |stored_loot|
        ccache = Rex::Proto::Kerberos::CredentialCache::Krb5Ccache.read(stored_loot.data)
        # at this time Metasploit stores 1 credential per ccache file, so no need to iterate through them
        credential = ccache.credentials.first
        block.call(credential) if block_given?
        credential
      end
    end

    # return [Rex::Proto::Kerberos::CredentialCache::Krb5CcacheCredential] credential
    def load_credential(options = {})
      return nil unless active_db?

      now = Time.now.utc
      credentials(options) do |credential|
        tkt_start = credential.starttime == Time.at(0).utc ? credential.authtime : credential.starttime
        tkt_end = credential.endtime
        return credential if tkt_start < now && now < tkt_end
      end

      nil
    end
  end
end
