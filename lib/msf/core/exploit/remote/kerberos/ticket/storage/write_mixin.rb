module Msf::Exploit::Remote::Kerberos::Ticket::Storage
  # A mixin providing the ability to store new and delete existing tickets.
  module WriteMixin
    # (see Base#delete_tickets)
    def delete_tickets(options = {})
      if options.keys == [:ids]
        # skip calling #objects which issues a query when the IDs are specified
        ids = options[:ids]
      else
        ids = objects(options).map(&:id)
      end

      framework.db.delete_loot(ids: ids).map do |stored_loot|
        StoredTicket.new(stored_loot)
      end
    end

    # (see Base#store_ccache)
    def store_ccache(ccache, options = {})
      realm = options.fetch(:realm) { ccache.default_principal.realm }
      # use #components.to_a.join('/') to omit the realm that #to_s includes
      client = options.fetch(:client) { ccache.credentials.first&.client&.components.to_a.join('/') }
      server = options.fetch(:server) { ccache.credentials.first&.server&.components.to_a.join('/') }
      info = loot_info(realm: realm, client: client, server: server)

      path = store_loot('mit.kerberos.ccache', 'application/octet-stream', options[:host], ccache.encode, nil, info)
      message = ''
      if @framework_module.respond_to?(:peer) && @framework_module.peer.present? && @framework_module.peer != ':'
        message << "#{@framework_module.peer} - "
      end
      if server && server.to_s.downcase.start_with?('krbtgt/')
        message << 'TGT '
      else
        message << 'TGS '
      end
      message << "MIT Credential Cache ticket saved to #{path}"
      print_status(message)

      { path: path }
    end
  end
end
