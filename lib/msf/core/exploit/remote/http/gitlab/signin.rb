# -*- coding: binary -*-

# GitLab session mixin
module Msf::Exploit::Remote::HTTP::Gitlab::Signin
  # performs a gitlab login
  #
  # @param user [String] Username
  # @param pass [String] Password
  # @param timeout [Integer] The maximum number of seconds to wait before the request times out
  # @return [String,nil] the session cookies as a single string on successful login, nil otherwise
  def gitlab_sign_in(username, password)
    sign_in_path = '/users/sign_in'
    csrf_token = gitlab_helper_extract_csrf_token(
      path: sign_in_path,
      regex: %r{action="/users/sign_in".*name="authenticity_token"\s+value="([^"]+)"}
    )
    res = send_request_cgi({
      'method' => 'POST',
      'uri' => sign_in_path,
      'keep_cookies' => true,
      'vars_post' => gitlab_helper_login_post_data(username, password, csrf_token)
    })

    if res.nil? || res.body.nil?
      raise Msf::Exploit::Remote::HTTP::Gitlab::GitLabClientException, 'Empty response. Please validate RHOST'
    elsif res.body.include?('Invalid Login or password')
      raise Msf::Exploit::Remote::HTTP::Gitlab::GitLabClientException, 'Username or password invalid'
    elsif res.code != 302
      raise Msf::Exploit::Remote::HTTP::Gitlab::GitLabClientException, "#{__method__} Unexpected HTTP #{res.code} response."
    elsif res.headers.fetch('Location', '').include?(sign_in_path)
      raise Msf::Exploit::Remote::HTTP::Gitlab::GitLabClientException, 'Login not successful. The account may need activated. Verify login works manually.'
    end

    cookies = res.get_cookies
    # Check if a valid gitlab cookie is returned
    return cookies if cookies =~ /(_gitlab_session=[A-Za-z0-9%-]+)/i

    nil
  end

  # performs a gitlab logout
  #
  # @return [Bolean,GitLabClientException] True if sign out, Msf::Exploit::Remote::HTTP::Gitlab::GitLabClientException otherwise
  def gitlab_sign_out
    csrf_token = gitlab_helper_extract_csrf_token(
      path: '/',
      regex: /name="csrf-token" content="(.*)"/
    )
    res = send_request_cgi({
      'method' => 'POST',
      'uri' => '/users/sign_out',
      'keep_cookies' => true,
      'vars_post' => {
        '_method' => 'post',
        'authenticity_token' => csrf_token
      }
    })

    raise Msf::Exploit::Remote::HTTP::Gitlab::GitLabClientException, "#{__method__} Unexpected HTTP #{res.code} response." unless res&.code == 302 && res&.headers&.fetch('Location', '')&.include?('/users/sign_in')

    true
  end
end
