# -*- coding: binary -*-

# GitLab Access Tokens mixin
module Msf::Exploit::Remote::HTTP::Gitlab::AccessTokens
  # Create Gitlab access access token
  #
  # @return [String,nil] Gitlab personal access token if created, nil otherwise
  def gitlab_create_access_token
    res = send_request_cgi({
      'method' => 'POST',
      'uri' => '/-/profile/personal_access_tokens',
      'keep_cookies' => true,
      'vars_post' => {
        'personal_access_token[name]' => Rex::Text.rand_text_alphanumeric(8),
        'personal_access_token[expires_at]' => '',
        'personal_access_token[scopes][]' => 'api',
        'commit' => 'Create personal access token'
      },
      'headers' => {
        'X-CSRF-Token' => gitlab_helper_extract_csrf_token(path: '/-/profile/personal_access_tokens', regex: /name="csrf-token" content="(.*)"/)
      }
    })

    if res.nil? || res.body.nil?
      raise Msf::Exploit::Remote::HTTP::Gitlab::GitLabClientException, 'Empty response. Please validate RHOST'
    elsif res.code != 200
      raise Msf::Exploit::Remote::HTTP::Gitlab::GitLabClientException, "#{__method__} Unexpected HTTP #{res.code} response."
    end

    token = JSON.parse(res.body)['new_token']

    return token if token

    nil
  end

  # Revoke Gitlab personal access token
  #
  # @return [nil,GitLabClientException] nil if revoke, Msf::Exploit::Remote::HTTP::Gitlab::GitLabClientException otherwise
  def gitlab_revoke_access_token(api_token)
    res = send_request_cgi({
      'method' => 'DELETE',
      'uri' => '/api/v4/personal_access_tokens/self',
      'ctype' => 'application/json',
      'headers' => {
        'PRIVATE-TOKEN' => api_token
      }
    })

    if res.nil? || res.body.nil?
      raise Msf::Exploit::Remote::HTTP::Gitlab::GitLabClientException, 'Empty response. Please validate RHOST'
    elsif res.code != 204
      raise Msf::Exploit::Remote::HTTP::Gitlab::GitLabClientException, "#{__method__} Unexpected HTTP #{res.code} response."
    end

    nil
  end
end
