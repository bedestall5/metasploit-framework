# -*- coding: binary -*-

# GitLab Groups mixin
module Msf::Exploit::Remote::HTTP::Gitlab::Groups
  # Create a new group
  #
  # @return [String,nil] Group ID if successful create, nil otherwise
  def gitlab_create_group(group_name, api_token)
    res = send_request_cgi({
      'method' => 'POST',
      'uri' => '/api/v4/groups',
      'ctype' => 'application/json',
      'headers' => {
        'PRIVATE-TOKEN' => api_token
      },
      'data' => {
        name: group_name, path: group_name, visibility: 'public'
      }.to_json
    })

    if res.nil? || res.body.nil?
      raise Msf::Exploit::Remote::HTTP::Gitlab::GitLabClientException, 'Empty response. Please validate RHOST'
    elsif res.code != 201
      raise Msf::Exploit::Remote::HTTP::Gitlab::GitLabClientException, "#{__method__} Unexpected HTTP #{res.code} response."
    end

    group_id = JSON.parse(res.body)['id']

    return group_id if group_id

    nil
  end

  # Delete a group
  #
  # @return [Bolean,GitLabClientException] True if successful deleted, Msf::Exploit::Remote::HTTP::Gitlab::GitLabClientException otherwise
  def gitlab_delete_group(group_id, api_token)
    res = send_request_cgi({
      'method' => 'DELETE',
      'uri' => normalize_uri('/api/v4/groups', group_id),
      'ctype' => 'application/json',
      'headers' => {
        'PRIVATE-TOKEN' => api_token
      }
    })

    if res.nil? || res.body.nil?
      raise Msf::Exploit::Remote::HTTP::Gitlab::GitLabClientException, 'Empty response. Please validate RHOST'
    elsif res.code != 202
      raise Msf::Exploit::Remote::HTTP::Gitlab::GitLabClientException, "#{__method__} Unexpected HTTP #{res.code} response."
    end

    true
  end
end
