# -*- coding: binary -*-

module Msf::Exploit::Remote::HTTP::ManageEngineAdauditPlus::JsonPostData
  # Generates a JSON hash according to the format required by the GPOWatcherData endpoint
  #
  # @param options [Hash] Hash containing parameters to include in the JSON hash. The parameters can be Booleans, Strings and/or Integers
  # @return [JSON] A JSON hash matching the format required by the GPOWatcherData endpoint. if the options param is invalid, an empty JSON hash is returned
  def generate_gpo_watcher_data_json(options)
    post_data = {}
    return post_data.to_json unless options.is_a?(Hash)

    post_data['isGPOData'] = options['isGPOData'] || true
    post_data['DOMAIN_NAME'] = options['DOMAIN_NAME'] || ''
    post_data['GPO_GUID'] = options['GPO_GUID'] || Rex::Proto::MsDtyp::MsDtypGuid.random_generate
    post_data['GPO_VERSION'] = options['GPO_VERSION'] || rand(1..9)
    post_data['VER_FILE_NAME'] = options['VER_FILE_NAME'] || generate_ver_file_name
    post_data['xmlReport'] = options['xmlReport'] || '<?xml version="1.0" encoding="utf-16"?>'

    html_filename = options['Html_fileName']
    post_data['Html_fileName'] = html_filename if html_filename

    html_report = options['htmlReport']
    post_data['htmlReport'] = html_report if html_report

    post_data.to_json
  end

  # Returns a String matching the VER_FILE_NAME format used by ADAudit Plus
  #
  # @return [String] Randomly generated String matching the the VER_FILE_NAME format used by ADAudit Plus
  def generate_ver_file_name
    "#{rand(1..9)}_#{Rex::Text.rand_text_alphanumeric(18)}".downcase + '.xml'
  end
end
