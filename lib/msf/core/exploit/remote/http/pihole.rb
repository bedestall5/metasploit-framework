# -*- coding: binary -*-

module Msf
  class Exploit
    class Remote
      module HTTP
        # This module provides a way of interacting with pihole installations
        module Pihole
          include Msf::Exploit::Remote::HttpClient

          def initialize(info = {})
            super

            register_options(
              [
                OptString.new('PASSWORD', [ false, 'Password for Pi-Hole interface', ''])
              ], Msf::Exploit::Remote::HTTP::Pihole
            )
          end

          # Extracts the Pihole version information from the admin page
          #
          # @return [(String, String, String),nil] Pihole versions if found (version, web_version, ftl_version), nil otherwise
          def get_versions
            res = send_request_cgi(
              'uri' => normalize_uri(target_uri.path, 'admin', 'index.php'),
              'method' => 'GET',
              'keep_cookies' => 'true'
            )
            fail_with(Msf::Exploit::Failure::UnexpectedReply, "#{peer} - Could not connect to web service - no response") if res.nil?
            fail_with(Msf::Exploit::Failure::UnexpectedReply, "#{peer} - Check URI Path, unexpected HTTP response code: #{res.code}") if res.code != 200

            # Verified against:
            # (current) 5.7, 5.12.1, 5.9
            # 5.2.2, 5.2.2, 5.3.3
            # 4.4, 4.3.3, 4.3.1
            # 4.3.2, 4.3, 4.3.1

            unless %r{<(?:strong|b)>Pi-hole(?: Version)?\s*</(?:strong|b)>\s*(?:<a .*?>)?v(?<version>[\d.]{1,8})\s*<}m =~ res.body
              # vDev versions
              %r{<(?:strong|b)>Pi-hole(?: Version)?\s*</(?:strong|b)>\s*(?:<a .*?>)?vDev \(\w+, v(?<version>[\d.]{1,8})[\w-]+\)<}m =~ res.body
            end
            %r{<(?:strong|b)>Web Interface(?: Version)?\s*</(?:strong|b)>\s*(?:<a .*?>)?v(?<web_version>[\d.]{1,8})\s*<}m =~ res.body
            %r{<(?:strong|b)>FTL(?: Version)?\s*</(?:strong|b)>\s*(?:<a .*?>)?v(?<ftl_version>[\d.]{1,8})\s*<}m =~ res.body
            return version, web_version, ftl_version
          end

          # Performs a login to pihole
          #
          # @return [String,nil] cookie if login was successful, nil otherwise
          def login(password)
            vprint_status('Attempting login.')
            res = send_request_cgi(
              'uri' => normalize_uri(target_uri.path, 'admin', 'index.php'),
              'vars_get' => {
                'login' => ''
              },
              'vars_post' => {
                'pw' => password
              },
              'method' => 'POST',
              'keep_cookies' => 'true'
            )
            if res && res.body.include?('Sign in to start your session')
              fail_with(Msf::Exploit::Failure::BadConfig, 'Incorrect Password')
            end
            res.get_cookies
          end

          # Performs a gravity update
          #
          # @return [HTTPResponse,nil] HTTPResponse
          def update_gravity
            vprint_status('Forcing gravity pull')
            send_request_cgi(
              'uri' => normalize_uri(target_uri.path, 'admin', 'scripts', 'pi-hole', 'php', 'gravity.sh.php'),
              'keep_cookies' => 'true'
            )
          end
        end
      end
    end
  end
end
