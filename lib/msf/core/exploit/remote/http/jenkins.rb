# -*- coding: binary -*-

module Msf
  class Exploit
    class Remote
      module HTTP
        # This module provides a way of logging into Jenkins
        module Jenkins
          include Msf::Exploit::Remote::HttpClient

          # This method takes a target URI and makes a request to verify if logging in is posiible,
          # otherwise it will fail gracefully
          #
          # @param [Sting] target_uri The targets URI
          # @return [Hash] URI for successful login, Cookie that's needed by newer versions
          def jenkins_uri_check(target_uri, keep_cookie: false)
            uri_path = normalize_uri(target_uri.path)
            uri_path << '/' if uri_path[-1, 1] != '/'

            # get that first cookie that's needed by newer versions
            res = send_request_cgi({ 'uri' => normalize_uri(uri_path, 'login'), 'keep_cookies' => keep_cookie })
            cookie = res.headers['Set-Cookie'] if keep_cookie
            fail_with(Msf::Module::Failure::UnexpectedReply, 'Unexpected reply from server') unless res&.code == 200
            if res.body =~ /action="(j_([a-z0-9_]+))"/
              uri = Regexp.last_match(1)
            else
              fail_with(Msf::Module::Failure::UnexpectedReply, 'Failed to identify the login resource.')
            end

            { uri: uri, cookie: cookie }.delete_if { |_k, v| v.nil? }
          end

          # This method takes a target URI and attempts to login to Jenkins and will either fail with appropriate errors
          #
          # @param [Sting] target_uri The targets URI
          def jenkins_login(target_uri)
            res = send_request_cgi({
              'method' => 'POST',
              'uri' => normalize_uri(target_uri),
              'keep_cookies' => true,
              'vars_post' =>
                {
                  'j_username' => datastore['USERNAME'],
                  'j_password' => datastore['PASSWORD'],
                  'Submit' => 'log in'
                }
            })

            if !(res && (res.code == 302)) || res.headers['Location'] =~ (/loginError/)
              fail_with(Msf::Module::Failure::NoAccess, 'Login failed')
            end
          end
        end
      end
    end
  end
end
