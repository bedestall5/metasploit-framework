# -*- coding: binary -*-

module Msf::Exploit::Remote::HTTP::NagiosXi::Version
  # Extracts the Nagios XI version information from an HTTP response
  #
  # @param res_backend [String] HTTP response
  # @return [String, Msf::Exploit::CheckCode], String containing the Nagios XI version if successful, otherwise Msf::Exploit::CheckCode
  def nagios_xi_version(res_backend)
    version = res_backend.scan(/product=nagiosxi&version=(\d+\.\d+\.\d+)&/).flatten.first rescue ''
    if version.blank?
      return Msf::Exploit::CheckCode::Detected('Unable to obtain the Nagios XI version from the dashboard')
    end

    version
  end

  # Tries to obtain the Nagios XI version from the login.php page. This will not work for older Nagios XI versions.
  #
  # @return [String, Msf::Exploit::CheckCode], String containing the Nagios XI version if successful, otherwise Msf::Exploit::CheckCode
  def nagios_xi_version_no_auth
    res = send_request_cgi({
      'method' => 'GET',
      'uri' => nagios_xi_login_url,
    })

    unless res
      return Msf::Exploit::CheckCode::Unknown('Connection failed')
    end

    unless [200,302].include?(res.code) && res.body.include?('>Nagios XI<')
      return Msf::Exploit::CheckCode::Safe('Target is not a Nagios XI application')
    end

    nagios_version = res.body.scan(/name="version" value="(\d+\.\d+\.\d+)">/).flatten.first
    
    if nagios_version.blank?
      return Msf::Exploit::CheckCode::Unknown('Unable to obtain Nagios XI version from the login page.')
    end

    nagios_version
  end

end

