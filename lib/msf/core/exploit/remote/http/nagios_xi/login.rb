# -*- coding: binary -*-

module Msf::Exploit::Remote::HTTP::NagiosXi::Login
  # performs a Naxios XI login
  #
  # @param user [String] Username
  # @param pass [String] Password
  # @return [String, Msf::Exploit::CheckCode] String containing the session cookies on successful login, Msf::Exploit::CheckCode otherwise
  def nagios_xi_login(user, pass)
    # visit the login page in order to obtain the cookies and the `nsp_str` token required for authentication
    res_pre_login = send_request_cgi({
      'method' => 'GET',
      'uri' => nagios_xi_login_url,
    })

    unless res_pre_login
      return Msf::Exploit::CheckCode::Unknown('Connection failed')
    end

    unless res_pre_login.code == 200 && res_pre_login.body.include?('>Nagios XI<')
      return Msf::Exploit::CheckCode::Safe('Target is not a Nagios XI application')
    end

    nsp = get_nsp(res_pre_login)

    if nsp.blank?
      return Msf::Exploit::CheckCode::Unknown('Unable to obtain the value of the `nsp_str` token required for authentication')
    end

    pre_auth_cookies = res_pre_login.get_cookies
    if pre_auth_cookies.blank?
      return Msf::Exploit::CheckCode::Unknown('Unable to obtain the cookies required for authentication')
    end

    # authenticate
    res_login = send_request_cgi({
      'method' => 'POST',
      'uri' => nagios_xi_login_url,
      'cookie' => pre_auth_cookies,
      'vars_post' => {
        'nsp' => nsp,
        'pageopt' => 'login',
        'username' => user,
        'password' => pass
      }
    })

    unless res_login
      return Msf::Exploit::CheckCode::Unknown('Connection failed')
    end

    unless res_login.code == 302 && res_login.headers['Location'] == 'index.php'
      return Msf::Exploit::CheckCode::Detected('Received unexpected reply while trying to authenticate')
    end

    # grab the cookies
    auth_cookies = res_login.get_cookies

    if auth_cookies.blank?
      return Msf::Exploit::CheckCode::Unknown('Unable to obtain the cookies required for authentication')
    end

    # for newer Nagios XI versions, we need to remove the pre_auth cookies from the auth_cookies string, otherwise the session will timeout
    # however, older Nagios XI versions only use one and the same cookie before and after authentication
    unless pre_auth_cookies == auth_cookies

      if auth_cookies.include?(pre_auth_cookies)
        auth_cookies = auth_cookies.gsub(pre_auth_cookies, '').strip
      end
    end

    # visit the index page to verify we successfully authenticated
    res_index = send_request_cgi({
      'method' => 'GET',
      'uri' => nagios_xi_backend_url,
      'cookie' => auth_cookies
    })

    unless res_index
      return Msf::Exploit::CheckCode::Unknown('Connection failed')
    end

    unless res_index.code == 200 && res_index.body.include?('>Home Dashboard<')
      return Msf::Exploit::CheckCode::Detected('Received unexpected reply while trying to acess the NagiosXI home dashboard after authenticating.')
    end

    auth_cookies
  end

  # Grabs the nsp_str value from an HTTP response using regex
  #
  # @param res [Rex::Proto::Http::Response] HTTP response
  # @return [String] nsp_str value
  def get_nsp(res)
    nsp = res.body.scan(/nsp_str = "([a-z0-9]+)/).flatten.first rescue ''
  end
end
