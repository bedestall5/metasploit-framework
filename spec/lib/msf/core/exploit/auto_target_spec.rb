require 'spec_helper'

RSpec.describe Msf::Exploit::AutoTarget do

  include_context 'Msf::DBManager'

  let(:windows_exploit) {
    framework.modules.add_module_path(File.join(FILE_FIXTURES_PATH, 'modules'))
    framework.modules.create('exploit/auto_target_windows')
  }

  let(:linux_exploit){
    framework.modules.add_module_path(File.join(FILE_FIXTURES_PATH, 'modules'))
    framework.modules.create('exploit/auto_target_linux')
  }

  let(:auto_exploit){
    framework.modules.add_module_path(File.join(FILE_FIXTURES_PATH, 'modules'))
    framework.modules.create('exploit/existing_auto_target')
  }

  let(:single_exploit){
    framework.modules.add_module_path(File.join(FILE_FIXTURES_PATH, 'modules'))
    framework.modules.create('exploit/single_target_exploit')
  }

  context 'adding an Automatic target' do
    context 'an exploit without an existing Automatic target' do

      it 'should have an Automatic target added to the top of the list' do
        first_target = windows_exploit.targets.first
        expect(first_target.name).to eq 'Automatic'
      end
    end

    context 'an exploit with an existing Automatic target' do
      it 'should not add an extra Automatic Target' do
        expect(auto_exploit.targets.count).to eq 5
      end
    end

    context 'an exploit with only one target' do
      it 'should not add an automatic target' do
        expect(single_exploit.targets.count).to eq 1
      end
    end
  end

  context 'finding the target host' do
    it 'should return a matching Mdm::host if there is one' do
      host_addr = '192.168.1.5'
      host_obj  = FactoryGirl.create(:mdm_host, address: host_addr )
      windows_exploit.datastore['WORKSPACE'] = host_obj.workspace.name
      windows_exploit.datastore['RHOST'] = host_addr
      expect(windows_exploit.target_host).to eq host_obj
    end

    it 'should return nil if there is not one' do
      windows_exploit.datastore['RHOST'] = '192.168.111.115'
      expect(windows_exploit.target_host).to be_nil
    end
  end



end