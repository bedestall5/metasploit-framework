# -*- coding:binary -*-

require 'msf/core'
require 'msf/core/module'
require 'msf/core/exploit/sqli'

RSpec.shared_examples "Msf::Exploit::SQLi::Common" do|sqli_class|
  let(:common_class) do
	sqli_class
  end
  before(:example) do
    # because vprint_status accesses framework, datastore and user_output
    allow_any_instance_of(common_class).to receive(:vprint_status).and_return(nil)
  end

  context 'Without opts' do
    it 'Should return a mask of (known bits common to all bytes, number of bits to guess)' do
      range = (0b01011010..0b01011110) # common bits are 01011***
      sqli_obj = common_class.new({}, {}, {}) {}
      known_bits, to_guess = sqli_obj.send(:get_bitmask, range)
      expect([known_bits, to_guess]).to eql [0b01011000, 3] # 3 changing bits, upper fixed bits = 01011
    end

    it 'should yield the query to the block, and return its return value' do
      queries = ["select concat(username,':',password) from users", "select 'hello'", 'select 1234 from users']
      sqli_obj = common_class.new({}, {}, {}) do |payload|
        payload
      end
      queries.each do |query|
        expect(sqli_obj.run_sql(query)).to eql query
      end
    end

    it 'Should return true if the block returns what the SQL statement should return' do
      sqli_obj1 = common_class.new({}, {}, {}) { |payload| payload[/'(.+?)'/, 1] }
      sqli_obj2 = common_class.new({}, {}, {}) { '<div id="articles"></div>' }
      expect(sqli_obj1.test_vulnerable).to eql true
      expect(sqli_obj2.test_vulnerable).to eql false
    end
    it 'Should call vprint_status when running queries' do
      sqli_obj = common_class.new({}, {}, {}) { |payload| payload[/'(.+?)'/, 1] }
      expect(sqli_obj).to receive(:vprint_status).once
      sqli_obj.run_sql("select '1'")
    end
    it 'Query should have a limit on the number of rows returned' do
      result_limit = rand(1..26)
      results = result_limit.times.map { |i| ('a'.ord + i).chr }
      sqli_obj = common_class.new({}, {}, {}) do |payload|
        expect(payload).to match /limit #{result_limit}/i
        results.join(',')
      end
      expect(sqli_obj.dump_table_fields('information_schema.tables', %w[table_name], '', result_limit)).to(eql(results.map { |name| [name] }))
    end
  end
  context 'truncation_length set' do
    let(:opts) do
      { truncation_length: rand(1..20) }
    end
    it 'Should call truncated_query if truncation_length is set, and should parse its return value correctly' do
      sqli_obj = common_class.new({}, {}, {}, opts) { 'a,b,c' }
      expect(sqli_obj).to receive(:truncated_query).with(/\^OFFSET\^/).and_return('a,b,c')
      expect(sqli_obj.enum_table_names).to eql %w[a b c]
    end

    it 'Should concatenate slices of the output to produce output similar to that of run_sql' do
      dump_data = 'articles,users,purchases,roles,sessions'.each_char.each_slice(opts[:truncation_length]).to_a
      i = -1
      sqli_obj = common_class.new({}, {}, {}, opts) { dump_data[i += 1] || '' }
      expect(sqli_obj.send(:truncated_query, '')).to eql dump_data.join
    end
  end

  context 'builtin encoder set' do
    let(:opts) do
      { encoder: common_class::ENCODERS.keys.sample }
    end
    it 'Should set the encoder correctly' do
      next if common_class::ENCODERS.empty?
      current_encoder = common_class::ENCODERS[opts[:encoder]]
      sqli_obj = common_class.new({}, {}, {}, opts) {}
      object_encoder = sqli_obj.instance_variable_get(:@encoder)
      expect(object_encoder).to eql current_encoder
    end
  end

  context 'custom encoder set' do
    let(:opts) do
      { encoder: { encode: 'reverse(^DATA^)', decode: :reverse.to_proc } }
    end

    it 'Should yield a query that calls reverse(), and call reverse from Ruby on the results' do
      dump_data = %w[articles users purchases roles sessions]
      function_call = /reverse\(/i
      sqli_obj = common_class.new({}, {}, {}, opts) do |payload|
        expect(payload).to match function_call
        # the server response should be encoded
        dump_data.map(&:reverse).join(',')
      end
      expect(sqli_obj.enum_table_names).to eql dump_data
    end
  end
end
