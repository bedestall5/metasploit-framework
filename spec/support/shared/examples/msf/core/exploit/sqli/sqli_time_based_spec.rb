# -*- coding:binary -*-
require 'msf/core'
require 'msf/core/module'
require 'msf/core/exploit/sqli'
require 'base64'

RSpec.shared_examples "TimeBasedBlind" do|sqli_class|
  let(:common_class) do
	sqli_class
  end
  let(:datastore) do
    { 'SqliDelay' => 1.0 }
  end
  it "Should return true if the block takes more than datastore['SqliDelay'] to run" do
    sqli_obj = described_class.new(datastore, {}, {}) do|payload|
      sleep(payload[/\d+\.?\d*/].to_f)
    end
    expect(sqli_obj.send(:blind_request, 'sleep(1.3)')).to eql true
    expect(sqli_obj.send(:blind_request, 'sleep(0.5)')).to eql false
    expect(sqli_obj.send(:blind_request, 'sleep(0)')).to eql false    
  end
end

RSpec.describe Msf::Exploit::SQLi::MySQLi::TimeBasedBlind do
  it_should_behave_like "TimeBasedBlind", described_class
end
