##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote

  Rank = ExcellentRanking

  prepend Msf::Exploit::Remote::AutoCheck
  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Microsoft Exchange Server ChainedSerializationBinder Blacklist Typo RCE',
        'Description' => %q{
          This vulnerability allows remote attackers to execute arbitrary code
          on Exchange Server 2019 CU10 prior to Security Update 3, Exchange Server 2019 CU11
          prior to Security Update 2, Exchange Server 2016 CU21 prior to
          Security Update 3, and Exchange Server 2016 CU22 prior to
          Security Update 2.

          Note that authentication is required to exploit this vulnerability.

          The specific flaw exists due to the fact that the blacklist for the
          ChainedSerializationBinder had a typo whereby an entry was typo'd as
          System.Security.ClaimsPrincipal instead of the proper value of
          System.Security.Claims.ClaimsPrincipal.

          By leveraging this vulnerability, attacks can bypass the
          ChainedSerializationBinder's deserialization blacklist
          and execute code as NT AUTHORITY\SYSTEM.

          Tested against Exchange Server 2019 CU11 SU0 on Windows Server 2019.
        },
        'Author' => [
          'pwnforsp', # Original Bug Discovery
          'zcgonvh', # Of 360 noah lab, Original Bug Discovery
          'Microsoft Threat Intelligence Center', # Discovery of exploitation in the wild
          'Microsoft Security Response Center', # Discovery of exploitation in the wild
          'peterjson', # Writeup
          'testanull', # PoC Exploit
          'Grant Willcox', # Aka tekwizz123. That guy in the back who took the hard work of all the people above and wrote this module :D
        ],
        'References' => [
          ['CVE', '2021-42321'],
          ['URL', 'https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-42321'],
          ['URL', 'https://support.microsoft.com/en-us/topic/description-of-the-security-update-for-microsoft-exchange-server-2019-2016-and-2013-november-9-2021-kb5007409-7e1f235a-d41b-4a76-bcc4-3db90cd161e7'],
          ['URL', 'https://techcommunity.microsoft.com/t5/exchange-team-blog/released-november-2021-exchange-server-security-updates/ba-p/2933169'],
          ['URL', 'https://gist.github.com/testanull/0188c1ae847f37a70fe536123d14f398'],
          ['URL', 'https://peterjson.medium.com/some-notes-about-microsoft-exchange-deserialization-rce-cve-2021-42321-110d04e8852']
        ],
        'DisclosureDate' => '2021-12-09',
        'License' => MSF_LICENSE,
        'Platform' => 'win',
        'Arch' => [ARCH_X86, ARCH_X64],
        'Privileged' => true,
        'Targets' => [
          ['Exchange Server', {}] # Probably should update this but IDK what the appropriate description should be.
        ],
        'DefaultTarget' => 0,
        'DefaultOptions' => {
          'SSL' => true,
          'PAYLOAD' => 'windows/x64/meterpreter/reverse_https',
          'HttpClientTimeout' => 5,
          'WfsDelay' => 10
        },
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [
            IOC_IN_LOGS, # Can easily log using advice at https://techcommunity.microsoft.com/t5/exchange-team-blog/released-november-2021-exchange-server-security-updates/ba-p/2933169
            CONFIG_CHANGES, # Alters the user configuration on the Inbox folder to get the payload to trigger.
            ACCOUNT_LOCKOUTS # Highly unlikely but this is an authenticated exploit so I feel it may be needed. Maybe someone can comment on this?
          ]
        }
      )
    )

    register_options([
      Opt::RPORT(443),
      OptString.new('TARGETURI', [true, 'Base path', '/']),
      OptString.new('USERNAME', [false, 'OWA username']),
      OptString.new('PASSWORD', [false, 'OWA password'])
    ])
  end

  def post_auth?
    true
  end

  def username
    datastore['USERNAME']
  end

  def password
    datastore['PASSWORD']
  end

  def vuln_builds
    # https://docs.microsoft.com/en-us/exchange/new-features/build-numbers-and-release-dates?view=exchserver-2019
    [
      [Rex::Version.new('15.1.2308.8'), Rex::Version.new('15.1.2308.20')], # Exchange Server 2016 CU21
      [Rex::Version.new('15.1.2375.7'), Rex::Version.new('15.1.2375.17')], # Exchange Server 2016 CU22
      [Rex::Version.new('15.2.922.7'), Rex::Version.new('15.2.922.19')], # Exchange Server 2019 CU10
      [Rex::Version.new('15.2.986.5'), Rex::Version.new('15.2.986.14')] # Exchange Server 2019 CU11
    ]
  end

  def check
    # First lets try a cheap way of doing this via a leak of the X-OWA-Version header.
    # If we get this we know the version number for sure and we can skip a lot of leg work.
    res = send_request_cgi(
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, '/owa/service')
    )

    unless res
      return CheckCode::Unknown('Target did not respond to check.')
    end

    if res.headers['X-OWA-Version']
      build = res.headers['X-OWA-Version']
      if vuln_builds.any? { |build_range| Rex::Version.new(build).between?(*build_range) }
        return CheckCode::Appears("Exchange Server #{build} is a vulnerable build.")
      else
        return CheckCode::Safe("Exchange Server #{build} is not a vulnerable build.")
      end
    end

    # Next, determine if we are up against an older version of Exchange Server where
    # the /owa/auth/logon.aspx page gives the full version. Recent versions of Exchange
    # give only a partial version without the build number.
    res = send_request_cgi(
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, '/owa/auth/logon.aspx')
    )

    unless res
      return CheckCode::Unknown('Target did not respond to check.')
    end

    if res.code == 200 && ((%r{/owa/(?<build>\d+\.\d+\.\d+\.\d+)} =~ res.body) || (%r{/owa/auth/(?<build>\d+\.\d+\.\d+\.\d+)} =~ res.body))
      if vuln_builds.any? { |build_range| Rex::Version.new(build).between?(*build_range) }
        return CheckCode::Appears("Exchange Server #{build} is a vulnerable build.")
      else
        return CheckCode::Safe("Exchange Server #{build} is not a vulnerable build.")
      end
    end

    # Next try @tseller's way and try /ecp/Current/exporttool/microsoft.exchange.ediscovery.exporttool.application
    # URL which if successful should provide some XML with entries like the following:
    #
    # <assemblyIdentity name="microsoft.exchange.ediscovery.exporttool.application"
    # version="15.2.986.5" publicKeyToken="b1d1a6c45aa418ce" language="neutral"
    # processorArchitecture="msil" xmlns="urn:schemas-microsoft-com:asm.v1" />
    #
    # This only works on Exchange Server 2013 and later and may not always work, but if it
    # does work it provides the full version number so its a nice strategy.
    #

    res = send_request_cgi(
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, '/ecp/current/exporttool/microsoft.exchange.ediscovery.exporttool.application')
    )

    unless res
      return CheckCode::Unknown('Target did not respond to check.')
    end

    if res.code == 200 && res.body =~ /name="microsoft.exchange.ediscovery.exporttool" version="\d+\.\d+\.\d+\.\d+"/
      build = res.body.match(/name="microsoft.exchange.ediscovery.exporttool" version="(\d+\.\d+\.\d+\.\d+)"/)[1]
      if vuln_builds.any? { |build_range| Rex::Version.new(build).between?(*build_range) }
        return CheckCode::Appears("Exchange Server #{build} is a vulnerable build.")
      else
        return CheckCode::Safe("Exchange Server #{build} is not a vulnerable build.")
      end
    end

    # Finally, try a variation on the above and use a well known trick of grabbing /owa/auth/logon.aspx
    # to get a partial version number, then use the URL at /ecp/<version here>/exporttool/. If we get a 200
    # OK response, we found the target version number, otherwise we didn't find it.

    for build in ['15.1.2308.8', '15.1.2308.14', '15.1.2308.15', '15.1.2375.7', '15.1.2375.12', '15.2.922.7', '15.2.922.13', '15.2.922.14', '15.2.986.5', '15.2.986.9']
      res = send_request_cgi(
        'method' => 'GET',
        'uri' => normalize_uri(target_uri.path, "/ecp/#{build}/exporttool/")
      )

      unless res
        return CheckCode::Unknown('Target did not respond to check.')
      end

      if res && res.code == 200
        return CheckCode::Appears("Exchange Server #{build} is a vulnerable build.")
      end
    end

    CheckCode::Unknown('Could not determine the build number of the target Exchange Server.')
  end

  def exploit
    print_status('To come soon :)')
  end

end
